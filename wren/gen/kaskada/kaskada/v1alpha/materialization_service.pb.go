// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0-devel
// 	protoc        (unknown)
// source: kaskada/kaskada/v1alpha/materialization_service.proto

package kaskadav1alpha

import (
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type WithView struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The view's name.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// A Fenl expresion describing the view's values.
	Expression string `protobuf:"bytes,2,opt,name=expression,proto3" json:"expression,omitempty"`
}

func (x *WithView) Reset() {
	*x = WithView{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kaskada_kaskada_v1alpha_materialization_service_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WithView) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WithView) ProtoMessage() {}

func (x *WithView) ProtoReflect() protoreflect.Message {
	mi := &file_kaskada_kaskada_v1alpha_materialization_service_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WithView.ProtoReflect.Descriptor instead.
func (*WithView) Descriptor() ([]byte, []int) {
	return file_kaskada_kaskada_v1alpha_materialization_service_proto_rawDescGZIP(), []int{0}
}

func (x *WithView) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *WithView) GetExpression() string {
	if x != nil {
		return x.Expression
	}
	return ""
}

type WithViews struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A list of WithView objects.
	Views []*WithView `protobuf:"bytes,1,rep,name=views,proto3" json:"views,omitempty"`
}

func (x *WithViews) Reset() {
	*x = WithViews{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kaskada_kaskada_v1alpha_materialization_service_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WithViews) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WithViews) ProtoMessage() {}

func (x *WithViews) ProtoReflect() protoreflect.Message {
	mi := &file_kaskada_kaskada_v1alpha_materialization_service_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WithViews.ProtoReflect.Descriptor instead.
func (*WithViews) Descriptor() ([]byte, []int) {
	return file_kaskada_kaskada_v1alpha_materialization_service_proto_rawDescGZIP(), []int{1}
}

func (x *WithViews) GetViews() []*WithView {
	if x != nil {
		return x.Views
	}
	return nil
}

type Materialization struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The Materialization's ID.
	//
	// This value is a unique identifier for the materialization within a
	// Kaskada account. The ID is generated by Kaskada, and is provided as a
	// read-only field.
	MaterializationId string `protobuf:"bytes,1,opt,name=materialization_id,json=materializationId,proto3" json:"materialization_id,omitempty"`
	// The Materialization's Name.
	//
	// This value must be unique within an Kaskada account as it is used to
	// identify the materialization in Fenl queries.
	MaterializationName string `protobuf:"bytes,2,opt,name=materialization_name,json=materializationName,proto3" json:"materialization_name,omitempty"`
	// The creation timestamp of the materialization in kaskada
	CreateTime *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	// A Fenl expression to compute.
	Query string `protobuf:"bytes,4,opt,name=query,proto3" json:"query,omitempty"`
	// An optional list of views to use when computing the query results.
	//
	// Views may be referenced by name in the query.
	// Views described here take precedence over views defined using the
	// View API.
	WithViews []*WithView `protobuf:"bytes,5,rep,name=with_views,json=withViews,proto3" json:"with_views,omitempty"`
	// Configures where the results should be outputted to.
	Destination *Materialization_Destination `protobuf:"bytes,6,opt,name=destination,proto3" json:"destination,omitempty"`
	// The schema of the materialization.
	Schema *Schema `protobuf:"bytes,7,opt,name=schema,proto3" json:"schema,omitempty"`
	// How to slice the input data when processing the materialization
	Slice *SliceRequest `protobuf:"bytes,8,opt,name=slice,proto3" json:"slice,omitempty"`
	// The result of the analyze step during materialization creation
	Analysis *Analysis `protobuf:"bytes,9,opt,name=analysis,proto3" json:"analysis,omitempty"`
	// The latest data version id this materialization was computed at.
	//
	// This value should be updated on subsequent materialiations, as
	// new data is loaded.
	DataVersionId int32 `protobuf:"varint,10,opt,name=data_version_id,json=dataVersionId,proto3" json:"data_version_id,omitempty"`
}

func (x *Materialization) Reset() {
	*x = Materialization{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kaskada_kaskada_v1alpha_materialization_service_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Materialization) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Materialization) ProtoMessage() {}

func (x *Materialization) ProtoReflect() protoreflect.Message {
	mi := &file_kaskada_kaskada_v1alpha_materialization_service_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Materialization.ProtoReflect.Descriptor instead.
func (*Materialization) Descriptor() ([]byte, []int) {
	return file_kaskada_kaskada_v1alpha_materialization_service_proto_rawDescGZIP(), []int{2}
}

func (x *Materialization) GetMaterializationId() string {
	if x != nil {
		return x.MaterializationId
	}
	return ""
}

func (x *Materialization) GetMaterializationName() string {
	if x != nil {
		return x.MaterializationName
	}
	return ""
}

func (x *Materialization) GetCreateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

func (x *Materialization) GetQuery() string {
	if x != nil {
		return x.Query
	}
	return ""
}

func (x *Materialization) GetWithViews() []*WithView {
	if x != nil {
		return x.WithViews
	}
	return nil
}

func (x *Materialization) GetDestination() *Materialization_Destination {
	if x != nil {
		return x.Destination
	}
	return nil
}

func (x *Materialization) GetSchema() *Schema {
	if x != nil {
		return x.Schema
	}
	return nil
}

func (x *Materialization) GetSlice() *SliceRequest {
	if x != nil {
		return x.Slice
	}
	return nil
}

func (x *Materialization) GetAnalysis() *Analysis {
	if x != nil {
		return x.Analysis
	}
	return nil
}

func (x *Materialization) GetDataVersionId() int32 {
	if x != nil {
		return x.DataVersionId
	}
	return 0
}

type ListMaterializationsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Materialization search string.
	//
	// If provided, only materializations with a name containing the given
	// string will be returned.
	Search string `protobuf:"bytes,1,opt,name=search,proto3" json:"search,omitempty"`
	// The maximum number of items to return.
	PageSize int32 `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// The next_page_token value returned from a previous List request, if
	// any. Note: if this is set, the `search` and `page_size` parameters
	// are ignored, and the values set in the original request are used
	// instead.
	PageToken string `protobuf:"bytes,3,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
}

func (x *ListMaterializationsRequest) Reset() {
	*x = ListMaterializationsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kaskada_kaskada_v1alpha_materialization_service_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListMaterializationsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListMaterializationsRequest) ProtoMessage() {}

func (x *ListMaterializationsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kaskada_kaskada_v1alpha_materialization_service_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListMaterializationsRequest.ProtoReflect.Descriptor instead.
func (*ListMaterializationsRequest) Descriptor() ([]byte, []int) {
	return file_kaskada_kaskada_v1alpha_materialization_service_proto_rawDescGZIP(), []int{3}
}

func (x *ListMaterializationsRequest) GetSearch() string {
	if x != nil {
		return x.Search
	}
	return ""
}

func (x *ListMaterializationsRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListMaterializationsRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

type ListMaterializationsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A list of Materializations.
	Materializations []*Materialization `protobuf:"bytes,1,rep,name=materializations,proto3" json:"materializations,omitempty"`
	// Token to retrieve the next page of results, or empty if there are no
	// more results in the list.
	NextPageToken string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	// Information, help, or warnings related to the request
	RequestDetails *RequestDetails `protobuf:"bytes,3,opt,name=request_details,json=requestDetails,proto3" json:"request_details,omitempty"`
}

func (x *ListMaterializationsResponse) Reset() {
	*x = ListMaterializationsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kaskada_kaskada_v1alpha_materialization_service_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListMaterializationsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListMaterializationsResponse) ProtoMessage() {}

func (x *ListMaterializationsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kaskada_kaskada_v1alpha_materialization_service_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListMaterializationsResponse.ProtoReflect.Descriptor instead.
func (*ListMaterializationsResponse) Descriptor() ([]byte, []int) {
	return file_kaskada_kaskada_v1alpha_materialization_service_proto_rawDescGZIP(), []int{4}
}

func (x *ListMaterializationsResponse) GetMaterializations() []*Materialization {
	if x != nil {
		return x.Materializations
	}
	return nil
}

func (x *ListMaterializationsResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

func (x *ListMaterializationsResponse) GetRequestDetails() *RequestDetails {
	if x != nil {
		return x.RequestDetails
	}
	return nil
}

type GetMaterializationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of the Materialization to get.
	MaterializationName string `protobuf:"bytes,1,opt,name=materialization_name,json=materializationName,proto3" json:"materialization_name,omitempty"`
}

func (x *GetMaterializationRequest) Reset() {
	*x = GetMaterializationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kaskada_kaskada_v1alpha_materialization_service_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMaterializationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMaterializationRequest) ProtoMessage() {}

func (x *GetMaterializationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kaskada_kaskada_v1alpha_materialization_service_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMaterializationRequest.ProtoReflect.Descriptor instead.
func (*GetMaterializationRequest) Descriptor() ([]byte, []int) {
	return file_kaskada_kaskada_v1alpha_materialization_service_proto_rawDescGZIP(), []int{5}
}

func (x *GetMaterializationRequest) GetMaterializationName() string {
	if x != nil {
		return x.MaterializationName
	}
	return ""
}

type GetMaterializationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The requested Materialization.
	Materialization *Materialization `protobuf:"bytes,1,opt,name=materialization,proto3" json:"materialization,omitempty"`
	// Information, help, or warnings related to the request
	RequestDetails *RequestDetails `protobuf:"bytes,2,opt,name=request_details,json=requestDetails,proto3" json:"request_details,omitempty"`
}

func (x *GetMaterializationResponse) Reset() {
	*x = GetMaterializationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kaskada_kaskada_v1alpha_materialization_service_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMaterializationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMaterializationResponse) ProtoMessage() {}

func (x *GetMaterializationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kaskada_kaskada_v1alpha_materialization_service_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMaterializationResponse.ProtoReflect.Descriptor instead.
func (*GetMaterializationResponse) Descriptor() ([]byte, []int) {
	return file_kaskada_kaskada_v1alpha_materialization_service_proto_rawDescGZIP(), []int{6}
}

func (x *GetMaterializationResponse) GetMaterialization() *Materialization {
	if x != nil {
		return x.Materialization
	}
	return nil
}

func (x *GetMaterializationResponse) GetRequestDetails() *RequestDetails {
	if x != nil {
		return x.RequestDetails
	}
	return nil
}

type CreateMaterializationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The Materialization resource to crate.
	Materialization *Materialization `protobuf:"bytes,1,opt,name=materialization,proto3" json:"materialization,omitempty"`
	// If this is `true`, then the materialization is validated and if there are no
	// errors, the resultant analysis is returned. No actual materializaiton is created.
	DryRun bool `protobuf:"varint,2,opt,name=dry_run,json=dryRun,proto3" json:"dry_run,omitempty"`
}

func (x *CreateMaterializationRequest) Reset() {
	*x = CreateMaterializationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kaskada_kaskada_v1alpha_materialization_service_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateMaterializationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateMaterializationRequest) ProtoMessage() {}

func (x *CreateMaterializationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kaskada_kaskada_v1alpha_materialization_service_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateMaterializationRequest.ProtoReflect.Descriptor instead.
func (*CreateMaterializationRequest) Descriptor() ([]byte, []int) {
	return file_kaskada_kaskada_v1alpha_materialization_service_proto_rawDescGZIP(), []int{7}
}

func (x *CreateMaterializationRequest) GetMaterialization() *Materialization {
	if x != nil {
		return x.Materialization
	}
	return nil
}

func (x *CreateMaterializationRequest) GetDryRun() bool {
	if x != nil {
		return x.DryRun
	}
	return false
}

type CreateMaterializationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The Materialization resource that was created.
	// If this is empty, check `analysis` for reasons.
	Materialization *Materialization `protobuf:"bytes,1,opt,name=materialization,proto3" json:"materialization,omitempty"`
	// Information, help, or warnings related to the request
	RequestDetails *RequestDetails `protobuf:"bytes,2,opt,name=request_details,json=requestDetails,proto3" json:"request_details,omitempty"`
	// The result of the analyze step during materialization creation
	Analysis *Analysis `protobuf:"bytes,3,opt,name=analysis,proto3" json:"analysis,omitempty"`
}

func (x *CreateMaterializationResponse) Reset() {
	*x = CreateMaterializationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kaskada_kaskada_v1alpha_materialization_service_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateMaterializationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateMaterializationResponse) ProtoMessage() {}

func (x *CreateMaterializationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kaskada_kaskada_v1alpha_materialization_service_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateMaterializationResponse.ProtoReflect.Descriptor instead.
func (*CreateMaterializationResponse) Descriptor() ([]byte, []int) {
	return file_kaskada_kaskada_v1alpha_materialization_service_proto_rawDescGZIP(), []int{8}
}

func (x *CreateMaterializationResponse) GetMaterialization() *Materialization {
	if x != nil {
		return x.Materialization
	}
	return nil
}

func (x *CreateMaterializationResponse) GetRequestDetails() *RequestDetails {
	if x != nil {
		return x.RequestDetails
	}
	return nil
}

func (x *CreateMaterializationResponse) GetAnalysis() *Analysis {
	if x != nil {
		return x.Analysis
	}
	return nil
}

type DeleteMaterializationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of the Materialization to delete.
	MaterializationName string `protobuf:"bytes,1,opt,name=materialization_name,json=materializationName,proto3" json:"materialization_name,omitempty"`
}

func (x *DeleteMaterializationRequest) Reset() {
	*x = DeleteMaterializationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kaskada_kaskada_v1alpha_materialization_service_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteMaterializationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteMaterializationRequest) ProtoMessage() {}

func (x *DeleteMaterializationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kaskada_kaskada_v1alpha_materialization_service_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteMaterializationRequest.ProtoReflect.Descriptor instead.
func (*DeleteMaterializationRequest) Descriptor() ([]byte, []int) {
	return file_kaskada_kaskada_v1alpha_materialization_service_proto_rawDescGZIP(), []int{9}
}

func (x *DeleteMaterializationRequest) GetMaterializationName() string {
	if x != nil {
		return x.MaterializationName
	}
	return ""
}

type DeleteMaterializationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Information, help, or warnings related to the request
	RequestDetails *RequestDetails `protobuf:"bytes,1,opt,name=request_details,json=requestDetails,proto3" json:"request_details,omitempty"`
}

func (x *DeleteMaterializationResponse) Reset() {
	*x = DeleteMaterializationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kaskada_kaskada_v1alpha_materialization_service_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteMaterializationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteMaterializationResponse) ProtoMessage() {}

func (x *DeleteMaterializationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kaskada_kaskada_v1alpha_materialization_service_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteMaterializationResponse.ProtoReflect.Descriptor instead.
func (*DeleteMaterializationResponse) Descriptor() ([]byte, []int) {
	return file_kaskada_kaskada_v1alpha_materialization_service_proto_rawDescGZIP(), []int{10}
}

func (x *DeleteMaterializationResponse) GetRequestDetails() *RequestDetails {
	if x != nil {
		return x.RequestDetails
	}
	return nil
}

type Materialization_Destination struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Destination:
	//	*Materialization_Destination_Redis
	//	*Materialization_Destination_ObjectStore
	//	*Materialization_Destination_Pulsar
	Destination isMaterialization_Destination_Destination `protobuf_oneof:"destination"`
}

func (x *Materialization_Destination) Reset() {
	*x = Materialization_Destination{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kaskada_kaskada_v1alpha_materialization_service_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Materialization_Destination) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Materialization_Destination) ProtoMessage() {}

func (x *Materialization_Destination) ProtoReflect() protoreflect.Message {
	mi := &file_kaskada_kaskada_v1alpha_materialization_service_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Materialization_Destination.ProtoReflect.Descriptor instead.
func (*Materialization_Destination) Descriptor() ([]byte, []int) {
	return file_kaskada_kaskada_v1alpha_materialization_service_proto_rawDescGZIP(), []int{2, 0}
}

func (m *Materialization_Destination) GetDestination() isMaterialization_Destination_Destination {
	if m != nil {
		return m.Destination
	}
	return nil
}

func (x *Materialization_Destination) GetRedis() *RedisDestination {
	if x, ok := x.GetDestination().(*Materialization_Destination_Redis); ok {
		return x.Redis
	}
	return nil
}

func (x *Materialization_Destination) GetObjectStore() *ObjectStoreDestination {
	if x, ok := x.GetDestination().(*Materialization_Destination_ObjectStore); ok {
		return x.ObjectStore
	}
	return nil
}

func (x *Materialization_Destination) GetPulsar() *PulsarDestination {
	if x, ok := x.GetDestination().(*Materialization_Destination_Pulsar); ok {
		return x.Pulsar
	}
	return nil
}

type isMaterialization_Destination_Destination interface {
	isMaterialization_Destination_Destination()
}

type Materialization_Destination_Redis struct {
	Redis *RedisDestination `protobuf:"bytes,1,opt,name=redis,proto3,oneof"`
}

type Materialization_Destination_ObjectStore struct {
	ObjectStore *ObjectStoreDestination `protobuf:"bytes,2,opt,name=object_store,json=objectStore,proto3,oneof"`
}

type Materialization_Destination_Pulsar struct {
	Pulsar *PulsarDestination `protobuf:"bytes,3,opt,name=pulsar,proto3,oneof"`
}

func (*Materialization_Destination_Redis) isMaterialization_Destination_Destination() {}

func (*Materialization_Destination_ObjectStore) isMaterialization_Destination_Destination() {}

func (*Materialization_Destination_Pulsar) isMaterialization_Destination_Destination() {}

var File_kaskada_kaskada_v1alpha_materialization_service_proto protoreflect.FileDescriptor

var file_kaskada_kaskada_v1alpha_materialization_service_proto_rawDesc = []byte{
	0x0a, 0x35, 0x6b, 0x61, 0x73, 0x6b, 0x61, 0x64, 0x61, 0x2f, 0x6b, 0x61, 0x73, 0x6b, 0x61, 0x64,
	0x61, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2f, 0x6d, 0x61, 0x74, 0x65, 0x72, 0x69,
	0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x17, 0x6b, 0x61, 0x73, 0x6b, 0x61, 0x64, 0x61,
	0x2e, 0x6b, 0x61, 0x73, 0x6b, 0x61, 0x64, 0x61, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e,
	0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x5f, 0x62, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x24, 0x6b, 0x61, 0x73, 0x6b, 0x61, 0x64, 0x61, 0x2f, 0x6b, 0x61, 0x73, 0x6b, 0x61, 0x64,
	0x61, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2a, 0x6b, 0x61, 0x73, 0x6b, 0x61, 0x64, 0x61, 0x2f,
	0x6b, 0x61, 0x73, 0x6b, 0x61, 0x64, 0x61, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2f,
	0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x24, 0x6b, 0x61, 0x73, 0x6b, 0x61, 0x64, 0x61, 0x2f, 0x6b, 0x61, 0x73, 0x6b,
	0x61, 0x64, 0x61, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2f, 0x73, 0x63, 0x68, 0x65,
	0x6d, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61,
	0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0x50, 0x0a, 0x08, 0x57, 0x69, 0x74, 0x68, 0x56, 0x69, 0x65, 0x77, 0x12, 0x1b, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04,
	0x72, 0x02, 0x10, 0x01, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x27, 0x0a, 0x0a, 0x65, 0x78,
	0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07,
	0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x22, 0x44, 0x0a, 0x09, 0x57, 0x69, 0x74, 0x68, 0x56, 0x69, 0x65, 0x77, 0x73,
	0x12, 0x37, 0x0a, 0x05, 0x76, 0x69, 0x65, 0x77, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x21, 0x2e, 0x6b, 0x61, 0x73, 0x6b, 0x61, 0x64, 0x61, 0x2e, 0x6b, 0x61, 0x73, 0x6b, 0x61, 0x64,
	0x61, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x57, 0x69, 0x74, 0x68, 0x56, 0x69,
	0x65, 0x77, 0x52, 0x05, 0x76, 0x69, 0x65, 0x77, 0x73, 0x22, 0xd8, 0x06, 0x0a, 0x0f, 0x4d, 0x61,
	0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x32, 0x0a,
	0x12, 0x6d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x11,
	0x6d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x64, 0x12, 0x3a, 0x0a, 0x14, 0x6d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x13, 0x6d, 0x61, 0x74, 0x65, 0x72, 0x69,
	0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x40, 0x0a,
	0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x03,
	0xe0, 0x41, 0x03, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x71, 0x75, 0x65, 0x72, 0x79, 0x12, 0x40, 0x0a, 0x0a, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x76, 0x69,
	0x65, 0x77, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6b, 0x61, 0x73, 0x6b,
	0x61, 0x64, 0x61, 0x2e, 0x6b, 0x61, 0x73, 0x6b, 0x61, 0x64, 0x61, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x2e, 0x57, 0x69, 0x74, 0x68, 0x56, 0x69, 0x65, 0x77, 0x52, 0x09, 0x77, 0x69,
	0x74, 0x68, 0x56, 0x69, 0x65, 0x77, 0x73, 0x12, 0x56, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x74, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x6b,
	0x61, 0x73, 0x6b, 0x61, 0x64, 0x61, 0x2e, 0x6b, 0x61, 0x73, 0x6b, 0x61, 0x64, 0x61, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x4d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x3c, 0x0a, 0x06, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1f, 0x2e, 0x6b, 0x61, 0x73, 0x6b, 0x61, 0x64, 0x61, 0x2e, 0x6b, 0x61, 0x73, 0x6b, 0x61, 0x64,
	0x61, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61,
	0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x06, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x12, 0x3b, 0x0a,
	0x05, 0x73, 0x6c, 0x69, 0x63, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6b,
	0x61, 0x73, 0x6b, 0x61, 0x64, 0x61, 0x2e, 0x6b, 0x61, 0x73, 0x6b, 0x61, 0x64, 0x61, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x53, 0x6c, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x52, 0x05, 0x73, 0x6c, 0x69, 0x63, 0x65, 0x12, 0x42, 0x0a, 0x08, 0x61, 0x6e,
	0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6b,
	0x61, 0x73, 0x6b, 0x61, 0x64, 0x61, 0x2e, 0x6b, 0x61, 0x73, 0x6b, 0x61, 0x64, 0x61, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x42,
	0x03, 0xe0, 0x41, 0x03, 0x52, 0x08, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x12, 0x26,
	0x0a, 0x0f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69,
	0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x64, 0x61, 0x74, 0x61, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x1a, 0xfb, 0x01, 0x0a, 0x0b, 0x44, 0x65, 0x73, 0x74, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x41, 0x0a, 0x05, 0x72, 0x65, 0x64, 0x69, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x6b, 0x61, 0x73, 0x6b, 0x61, 0x64, 0x61, 0x2e,
	0x6b, 0x61, 0x73, 0x6b, 0x61, 0x64, 0x61, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e,
	0x52, 0x65, 0x64, 0x69, 0x73, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x48, 0x00, 0x52, 0x05, 0x72, 0x65, 0x64, 0x69, 0x73, 0x12, 0x54, 0x0a, 0x0c, 0x6f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2f, 0x2e, 0x6b, 0x61, 0x73, 0x6b, 0x61, 0x64, 0x61, 0x2e, 0x6b, 0x61, 0x73, 0x6b, 0x61, 0x64,
	0x61, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x53, 0x74, 0x6f, 0x72, 0x65, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x48, 0x00, 0x52, 0x0b, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x12,
	0x44, 0x0a, 0x06, 0x70, 0x75, 0x6c, 0x73, 0x61, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2a, 0x2e, 0x6b, 0x61, 0x73, 0x6b, 0x61, 0x64, 0x61, 0x2e, 0x6b, 0x61, 0x73, 0x6b, 0x61, 0x64,
	0x61, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x50, 0x75, 0x6c, 0x73, 0x61, 0x72,
	0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x06, 0x70,
	0x75, 0x6c, 0x73, 0x61, 0x72, 0x42, 0x0d, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x22, 0x7d, 0x0a, 0x1b, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x61, 0x74, 0x65,
	0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x12, 0x27, 0x0a, 0x09, 0x70,
	0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0a,
	0xfa, 0x42, 0x07, 0x1a, 0x05, 0x18, 0xe8, 0x07, 0x28, 0x00, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65,
	0x53, 0x69, 0x7a, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x22, 0xee, 0x01, 0x0a, 0x1c, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x61, 0x74, 0x65,
	0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x54, 0x0a, 0x10, 0x6d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28,
	0x2e, 0x6b, 0x61, 0x73, 0x6b, 0x61, 0x64, 0x61, 0x2e, 0x6b, 0x61, 0x73, 0x6b, 0x61, 0x64, 0x61,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x4d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61,
	0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x10, 0x6d, 0x61, 0x74, 0x65, 0x72, 0x69,
	0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x65,
	0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x12, 0x50, 0x0a, 0x0f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x64, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x6b, 0x61,
	0x73, 0x6b, 0x61, 0x64, 0x61, 0x2e, 0x6b, 0x61, 0x73, 0x6b, 0x61, 0x64, 0x61, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x73, 0x52, 0x0e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x73, 0x22, 0x57, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x74, 0x65, 0x72,
	0x69, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x3a, 0x0a, 0x14, 0x6d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x13, 0x6d, 0x61, 0x74, 0x65, 0x72, 0x69,
	0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xc2, 0x01,
	0x0a, 0x1a, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x52, 0x0a, 0x0f,
	0x6d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x6b, 0x61, 0x73, 0x6b, 0x61, 0x64, 0x61, 0x2e,
	0x6b, 0x61, 0x73, 0x6b, 0x61, 0x64, 0x61, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e,
	0x4d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x0f, 0x6d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x50, 0x0a, 0x0f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x64, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x6b, 0x61, 0x73, 0x6b,
	0x61, 0x64, 0x61, 0x2e, 0x6b, 0x61, 0x73, 0x6b, 0x61, 0x64, 0x61, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x73, 0x52, 0x0e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x73, 0x22, 0x8b, 0x01, 0x0a, 0x1c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x74,
	0x65, 0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x52, 0x0a, 0x0f, 0x6d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x6b,
	0x61, 0x73, 0x6b, 0x61, 0x64, 0x61, 0x2e, 0x6b, 0x61, 0x73, 0x6b, 0x61, 0x64, 0x61, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x4d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0f, 0x6d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x17, 0x0a, 0x07, 0x64, 0x72, 0x79, 0x5f, 0x72,
	0x75, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x64, 0x72, 0x79, 0x52, 0x75, 0x6e,
	0x22, 0x84, 0x02, 0x0a, 0x1d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x74, 0x65, 0x72,
	0x69, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x52, 0x0a, 0x0f, 0x6d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x6b, 0x61,
	0x73, 0x6b, 0x61, 0x64, 0x61, 0x2e, 0x6b, 0x61, 0x73, 0x6b, 0x61, 0x64, 0x61, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x4d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0f, 0x6d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x50, 0x0a, 0x0f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x27, 0x2e, 0x6b, 0x61, 0x73, 0x6b, 0x61, 0x64, 0x61, 0x2e, 0x6b, 0x61, 0x73, 0x6b, 0x61, 0x64,
	0x61, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x0e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x3d, 0x0a, 0x08, 0x61, 0x6e, 0x61, 0x6c,
	0x79, 0x73, 0x69, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6b, 0x61, 0x73,
	0x6b, 0x61, 0x64, 0x61, 0x2e, 0x6b, 0x61, 0x73, 0x6b, 0x61, 0x64, 0x61, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x2e, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x52, 0x08, 0x61,
	0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x22, 0x5a, 0x0a, 0x1c, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x4d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x14, 0x6d, 0x61, 0x74, 0x65, 0x72,
	0x69, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x13,
	0x6d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e,
	0x61, 0x6d, 0x65, 0x22, 0x71, 0x0a, 0x1d, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x61, 0x74,
	0x65, 0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x50, 0x0a, 0x0f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f,
	0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e,
	0x6b, 0x61, 0x73, 0x6b, 0x61, 0x64, 0x61, 0x2e, 0x6b, 0x61, 0x73, 0x6b, 0x61, 0x64, 0x61, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x0e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x32, 0xff, 0x05, 0x0a, 0x16, 0x4d, 0x61, 0x74, 0x65, 0x72,
	0x69, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x12, 0xa6, 0x01, 0x0a, 0x14, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x61, 0x74, 0x65, 0x72, 0x69,
	0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x34, 0x2e, 0x6b, 0x61, 0x73,
	0x6b, 0x61, 0x64, 0x61, 0x2e, 0x6b, 0x61, 0x73, 0x6b, 0x61, 0x64, 0x61, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61,
	0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x35, 0x2e, 0x6b, 0x61, 0x73, 0x6b, 0x61, 0x64, 0x61, 0x2e, 0x6b, 0x61, 0x73, 0x6b, 0x61,
	0x64, 0x61, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4d,
	0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x21, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1b, 0x12,
	0x19, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2f, 0x6d, 0x61, 0x74, 0x65, 0x72, 0x69,
	0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0xb9, 0x01, 0x0a, 0x12, 0x47,
	0x65, 0x74, 0x4d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x32, 0x2e, 0x6b, 0x61, 0x73, 0x6b, 0x61, 0x64, 0x61, 0x2e, 0x6b, 0x61, 0x73, 0x6b,
	0x61, 0x64, 0x61, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x47, 0x65, 0x74, 0x4d,
	0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x33, 0x2e, 0x6b, 0x61, 0x73, 0x6b, 0x61, 0x64, 0x61, 0x2e,
	0x6b, 0x61, 0x73, 0x6b, 0x61, 0x64, 0x61, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e,
	0x47, 0x65, 0x74, 0x4d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x3a, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x34, 0x12, 0x32, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2f, 0x6d, 0x61, 0x74,
	0x65, 0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x6d,
	0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x3d, 0x2a, 0x7d, 0x12, 0xba, 0x01, 0x0a, 0x15, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x4d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x35, 0x2e, 0x6b, 0x61, 0x73, 0x6b, 0x61, 0x64, 0x61, 0x2e, 0x6b, 0x61, 0x73, 0x6b, 0x61,
	0x64, 0x61, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x4d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x36, 0x2e, 0x6b, 0x61, 0x73, 0x6b, 0x61, 0x64,
	0x61, 0x2e, 0x6b, 0x61, 0x73, 0x6b, 0x61, 0x64, 0x61, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x32, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2c, 0x3a, 0x0f, 0x6d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61,
	0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x19, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x2f, 0x6d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x12, 0xc2, 0x01, 0x0a, 0x15, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x61,
	0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x35, 0x2e,
	0x6b, 0x61, 0x73, 0x6b, 0x61, 0x64, 0x61, 0x2e, 0x6b, 0x61, 0x73, 0x6b, 0x61, 0x64, 0x61, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x61,
	0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x36, 0x2e, 0x6b, 0x61, 0x73, 0x6b, 0x61, 0x64, 0x61, 0x2e, 0x6b,
	0x61, 0x73, 0x6b, 0x61, 0x64, 0x61, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x3a, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x34, 0x2a, 0x32, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2f, 0x6d,
	0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f,
	0x7b, 0x6d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x2a, 0x7d, 0x42, 0x87, 0x02, 0x0a, 0x1b, 0x63, 0x6f, 0x6d,
	0x2e, 0x6b, 0x61, 0x73, 0x6b, 0x61, 0x64, 0x61, 0x2e, 0x6b, 0x61, 0x73, 0x6b, 0x61, 0x64, 0x61,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x42, 0x1b, 0x4d, 0x61, 0x74, 0x65, 0x72, 0x69,
	0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x4d, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x6b, 0x61, 0x73, 0x6b, 0x61, 0x64, 0x61, 0x2f, 0x6b, 0x61, 0x73, 0x6b,
	0x61, 0x64, 0x61, 0x2d, 0x61, 0x69, 0x2f, 0x77, 0x72, 0x65, 0x6e, 0x2f, 0x67, 0x65, 0x6e, 0x2f,
	0x6b, 0x61, 0x73, 0x6b, 0x61, 0x64, 0x61, 0x2f, 0x6b, 0x61, 0x73, 0x6b, 0x61, 0x64, 0x61, 0x2f,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x3b, 0x6b, 0x61, 0x73, 0x6b, 0x61, 0x64, 0x61, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0xa2, 0x02, 0x03, 0x4b, 0x4b, 0x58, 0xaa, 0x02, 0x17, 0x4b,
	0x61, 0x73, 0x6b, 0x61, 0x64, 0x61, 0x2e, 0x4b, 0x61, 0x73, 0x6b, 0x61, 0x64, 0x61, 0x2e, 0x56,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0xca, 0x02, 0x17, 0x4b, 0x61, 0x73, 0x6b, 0x61, 0x64, 0x61,
	0x5c, 0x4b, 0x61, 0x73, 0x6b, 0x61, 0x64, 0x61, 0x5c, 0x56, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0xe2, 0x02, 0x23, 0x4b, 0x61, 0x73, 0x6b, 0x61, 0x64, 0x61, 0x5c, 0x4b, 0x61, 0x73, 0x6b, 0x61,
	0x64, 0x61, 0x5c, 0x56, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x19, 0x4b, 0x61, 0x73, 0x6b, 0x61, 0x64, 0x61,
	0x3a, 0x3a, 0x4b, 0x61, 0x73, 0x6b, 0x61, 0x64, 0x61, 0x3a, 0x3a, 0x56, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_kaskada_kaskada_v1alpha_materialization_service_proto_rawDescOnce sync.Once
	file_kaskada_kaskada_v1alpha_materialization_service_proto_rawDescData = file_kaskada_kaskada_v1alpha_materialization_service_proto_rawDesc
)

func file_kaskada_kaskada_v1alpha_materialization_service_proto_rawDescGZIP() []byte {
	file_kaskada_kaskada_v1alpha_materialization_service_proto_rawDescOnce.Do(func() {
		file_kaskada_kaskada_v1alpha_materialization_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_kaskada_kaskada_v1alpha_materialization_service_proto_rawDescData)
	})
	return file_kaskada_kaskada_v1alpha_materialization_service_proto_rawDescData
}

var file_kaskada_kaskada_v1alpha_materialization_service_proto_msgTypes = make([]protoimpl.MessageInfo, 12)
var file_kaskada_kaskada_v1alpha_materialization_service_proto_goTypes = []interface{}{
	(*WithView)(nil),                      // 0: kaskada.kaskada.v1alpha.WithView
	(*WithViews)(nil),                     // 1: kaskada.kaskada.v1alpha.WithViews
	(*Materialization)(nil),               // 2: kaskada.kaskada.v1alpha.Materialization
	(*ListMaterializationsRequest)(nil),   // 3: kaskada.kaskada.v1alpha.ListMaterializationsRequest
	(*ListMaterializationsResponse)(nil),  // 4: kaskada.kaskada.v1alpha.ListMaterializationsResponse
	(*GetMaterializationRequest)(nil),     // 5: kaskada.kaskada.v1alpha.GetMaterializationRequest
	(*GetMaterializationResponse)(nil),    // 6: kaskada.kaskada.v1alpha.GetMaterializationResponse
	(*CreateMaterializationRequest)(nil),  // 7: kaskada.kaskada.v1alpha.CreateMaterializationRequest
	(*CreateMaterializationResponse)(nil), // 8: kaskada.kaskada.v1alpha.CreateMaterializationResponse
	(*DeleteMaterializationRequest)(nil),  // 9: kaskada.kaskada.v1alpha.DeleteMaterializationRequest
	(*DeleteMaterializationResponse)(nil), // 10: kaskada.kaskada.v1alpha.DeleteMaterializationResponse
	(*Materialization_Destination)(nil),   // 11: kaskada.kaskada.v1alpha.Materialization.Destination
	(*timestamppb.Timestamp)(nil),         // 12: google.protobuf.Timestamp
	(*Schema)(nil),                        // 13: kaskada.kaskada.v1alpha.Schema
	(*SliceRequest)(nil),                  // 14: kaskada.kaskada.v1alpha.SliceRequest
	(*Analysis)(nil),                      // 15: kaskada.kaskada.v1alpha.Analysis
	(*RequestDetails)(nil),                // 16: kaskada.kaskada.v1alpha.RequestDetails
	(*RedisDestination)(nil),              // 17: kaskada.kaskada.v1alpha.RedisDestination
	(*ObjectStoreDestination)(nil),        // 18: kaskada.kaskada.v1alpha.ObjectStoreDestination
	(*PulsarDestination)(nil),             // 19: kaskada.kaskada.v1alpha.PulsarDestination
}
var file_kaskada_kaskada_v1alpha_materialization_service_proto_depIdxs = []int32{
	0,  // 0: kaskada.kaskada.v1alpha.WithViews.views:type_name -> kaskada.kaskada.v1alpha.WithView
	12, // 1: kaskada.kaskada.v1alpha.Materialization.create_time:type_name -> google.protobuf.Timestamp
	0,  // 2: kaskada.kaskada.v1alpha.Materialization.with_views:type_name -> kaskada.kaskada.v1alpha.WithView
	11, // 3: kaskada.kaskada.v1alpha.Materialization.destination:type_name -> kaskada.kaskada.v1alpha.Materialization.Destination
	13, // 4: kaskada.kaskada.v1alpha.Materialization.schema:type_name -> kaskada.kaskada.v1alpha.Schema
	14, // 5: kaskada.kaskada.v1alpha.Materialization.slice:type_name -> kaskada.kaskada.v1alpha.SliceRequest
	15, // 6: kaskada.kaskada.v1alpha.Materialization.analysis:type_name -> kaskada.kaskada.v1alpha.Analysis
	2,  // 7: kaskada.kaskada.v1alpha.ListMaterializationsResponse.materializations:type_name -> kaskada.kaskada.v1alpha.Materialization
	16, // 8: kaskada.kaskada.v1alpha.ListMaterializationsResponse.request_details:type_name -> kaskada.kaskada.v1alpha.RequestDetails
	2,  // 9: kaskada.kaskada.v1alpha.GetMaterializationResponse.materialization:type_name -> kaskada.kaskada.v1alpha.Materialization
	16, // 10: kaskada.kaskada.v1alpha.GetMaterializationResponse.request_details:type_name -> kaskada.kaskada.v1alpha.RequestDetails
	2,  // 11: kaskada.kaskada.v1alpha.CreateMaterializationRequest.materialization:type_name -> kaskada.kaskada.v1alpha.Materialization
	2,  // 12: kaskada.kaskada.v1alpha.CreateMaterializationResponse.materialization:type_name -> kaskada.kaskada.v1alpha.Materialization
	16, // 13: kaskada.kaskada.v1alpha.CreateMaterializationResponse.request_details:type_name -> kaskada.kaskada.v1alpha.RequestDetails
	15, // 14: kaskada.kaskada.v1alpha.CreateMaterializationResponse.analysis:type_name -> kaskada.kaskada.v1alpha.Analysis
	16, // 15: kaskada.kaskada.v1alpha.DeleteMaterializationResponse.request_details:type_name -> kaskada.kaskada.v1alpha.RequestDetails
	17, // 16: kaskada.kaskada.v1alpha.Materialization.Destination.redis:type_name -> kaskada.kaskada.v1alpha.RedisDestination
	18, // 17: kaskada.kaskada.v1alpha.Materialization.Destination.object_store:type_name -> kaskada.kaskada.v1alpha.ObjectStoreDestination
	19, // 18: kaskada.kaskada.v1alpha.Materialization.Destination.pulsar:type_name -> kaskada.kaskada.v1alpha.PulsarDestination
	3,  // 19: kaskada.kaskada.v1alpha.MaterializationService.ListMaterializations:input_type -> kaskada.kaskada.v1alpha.ListMaterializationsRequest
	5,  // 20: kaskada.kaskada.v1alpha.MaterializationService.GetMaterialization:input_type -> kaskada.kaskada.v1alpha.GetMaterializationRequest
	7,  // 21: kaskada.kaskada.v1alpha.MaterializationService.CreateMaterialization:input_type -> kaskada.kaskada.v1alpha.CreateMaterializationRequest
	9,  // 22: kaskada.kaskada.v1alpha.MaterializationService.DeleteMaterialization:input_type -> kaskada.kaskada.v1alpha.DeleteMaterializationRequest
	4,  // 23: kaskada.kaskada.v1alpha.MaterializationService.ListMaterializations:output_type -> kaskada.kaskada.v1alpha.ListMaterializationsResponse
	6,  // 24: kaskada.kaskada.v1alpha.MaterializationService.GetMaterialization:output_type -> kaskada.kaskada.v1alpha.GetMaterializationResponse
	8,  // 25: kaskada.kaskada.v1alpha.MaterializationService.CreateMaterialization:output_type -> kaskada.kaskada.v1alpha.CreateMaterializationResponse
	10, // 26: kaskada.kaskada.v1alpha.MaterializationService.DeleteMaterialization:output_type -> kaskada.kaskada.v1alpha.DeleteMaterializationResponse
	23, // [23:27] is the sub-list for method output_type
	19, // [19:23] is the sub-list for method input_type
	19, // [19:19] is the sub-list for extension type_name
	19, // [19:19] is the sub-list for extension extendee
	0,  // [0:19] is the sub-list for field type_name
}

func init() { file_kaskada_kaskada_v1alpha_materialization_service_proto_init() }
func file_kaskada_kaskada_v1alpha_materialization_service_proto_init() {
	if File_kaskada_kaskada_v1alpha_materialization_service_proto != nil {
		return
	}
	file_kaskada_kaskada_v1alpha_common_proto_init()
	file_kaskada_kaskada_v1alpha_destinations_proto_init()
	file_kaskada_kaskada_v1alpha_schema_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_kaskada_kaskada_v1alpha_materialization_service_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WithView); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kaskada_kaskada_v1alpha_materialization_service_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WithViews); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kaskada_kaskada_v1alpha_materialization_service_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Materialization); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kaskada_kaskada_v1alpha_materialization_service_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListMaterializationsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kaskada_kaskada_v1alpha_materialization_service_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListMaterializationsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kaskada_kaskada_v1alpha_materialization_service_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMaterializationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kaskada_kaskada_v1alpha_materialization_service_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMaterializationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kaskada_kaskada_v1alpha_materialization_service_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateMaterializationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kaskada_kaskada_v1alpha_materialization_service_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateMaterializationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kaskada_kaskada_v1alpha_materialization_service_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteMaterializationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kaskada_kaskada_v1alpha_materialization_service_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteMaterializationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kaskada_kaskada_v1alpha_materialization_service_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Materialization_Destination); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_kaskada_kaskada_v1alpha_materialization_service_proto_msgTypes[11].OneofWrappers = []interface{}{
		(*Materialization_Destination_Redis)(nil),
		(*Materialization_Destination_ObjectStore)(nil),
		(*Materialization_Destination_Pulsar)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_kaskada_kaskada_v1alpha_materialization_service_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   12,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_kaskada_kaskada_v1alpha_materialization_service_proto_goTypes,
		DependencyIndexes: file_kaskada_kaskada_v1alpha_materialization_service_proto_depIdxs,
		MessageInfos:      file_kaskada_kaskada_v1alpha_materialization_service_proto_msgTypes,
	}.Build()
	File_kaskada_kaskada_v1alpha_materialization_service_proto = out.File
	file_kaskada_kaskada_v1alpha_materialization_service_proto_rawDesc = nil
	file_kaskada_kaskada_v1alpha_materialization_service_proto_goTypes = nil
	file_kaskada_kaskada_v1alpha_materialization_service_proto_depIdxs = nil
}
