// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: kaskada/kaskada/v1alpha/output.proto

package kaskadav1alpha

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on UnspecifiedOutput with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *UnspecifiedOutput) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UnspecifiedOutput with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UnspecifiedOutputMultiError, or nil if none found.
func (m *UnspecifiedOutput) ValidateAll() error {
	return m.validate(true)
}

func (m *UnspecifiedOutput) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UnspecifiedOutputMultiError(errors)
	}

	return nil
}

// UnspecifiedOutputMultiError is an error wrapping multiple validation errors
// returned by UnspecifiedOutput.ValidateAll() if the designated constraints
// aren't met.
type UnspecifiedOutputMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UnspecifiedOutputMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UnspecifiedOutputMultiError) AllErrors() []error { return m }

// UnspecifiedOutputValidationError is the validation error returned by
// UnspecifiedOutput.Validate if the designated constraints aren't met.
type UnspecifiedOutputValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UnspecifiedOutputValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UnspecifiedOutputValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UnspecifiedOutputValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UnspecifiedOutputValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UnspecifiedOutputValidationError) ErrorName() string {
	return "UnspecifiedOutputValidationError"
}

// Error satisfies the builtin error interface
func (e UnspecifiedOutputValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUnspecifiedOutput.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UnspecifiedOutputValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UnspecifiedOutputValidationError{}

// Validate checks the field values on ObjectStoreOutput with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ObjectStoreOutput) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ObjectStoreOutput with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ObjectStoreOutputMultiError, or nil if none found.
func (m *ObjectStoreOutput) ValidateAll() error {
	return m.validate(true)
}

func (m *ObjectStoreOutput) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for FileType

	if all {
		switch v := interface{}(m.GetOutputPaths()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ObjectStoreOutputValidationError{
					field:  "OutputPaths",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ObjectStoreOutputValidationError{
					field:  "OutputPaths",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOutputPaths()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ObjectStoreOutputValidationError{
				field:  "OutputPaths",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ObjectStoreOutputMultiError(errors)
	}

	return nil
}

// ObjectStoreOutputMultiError is an error wrapping multiple validation errors
// returned by ObjectStoreOutput.ValidateAll() if the designated constraints
// aren't met.
type ObjectStoreOutputMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ObjectStoreOutputMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ObjectStoreOutputMultiError) AllErrors() []error { return m }

// ObjectStoreOutputValidationError is the validation error returned by
// ObjectStoreOutput.Validate if the designated constraints aren't met.
type ObjectStoreOutputValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ObjectStoreOutputValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ObjectStoreOutputValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ObjectStoreOutputValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ObjectStoreOutputValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ObjectStoreOutputValidationError) ErrorName() string {
	return "ObjectStoreOutputValidationError"
}

// Error satisfies the builtin error interface
func (e ObjectStoreOutputValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sObjectStoreOutput.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ObjectStoreOutputValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ObjectStoreOutputValidationError{}

// Validate checks the field values on RedisOutput with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *RedisOutput) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RedisOutput with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in RedisOutputMultiError, or
// nil if none found.
func (m *RedisOutput) ValidateAll() error {
	return m.validate(true)
}

func (m *RedisOutput) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return RedisOutputMultiError(errors)
	}

	return nil
}

// RedisOutputMultiError is an error wrapping multiple validation errors
// returned by RedisOutput.ValidateAll() if the designated constraints aren't met.
type RedisOutputMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RedisOutputMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RedisOutputMultiError) AllErrors() []error { return m }

// RedisOutputValidationError is the validation error returned by
// RedisOutput.Validate if the designated constraints aren't met.
type RedisOutputValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RedisOutputValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RedisOutputValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RedisOutputValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RedisOutputValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RedisOutputValidationError) ErrorName() string { return "RedisOutputValidationError" }

// Error satisfies the builtin error interface
func (e RedisOutputValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRedisOutput.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RedisOutputValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RedisOutputValidationError{}

// Validate checks the field values on PulsarOutput with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *PulsarOutput) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PulsarOutput with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in PulsarOutputMultiError, or
// nil if none found.
func (m *PulsarOutput) ValidateAll() error {
	return m.validate(true)
}

func (m *PulsarOutput) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TopicUrl

	// no validation rules for BrokerServiceUrl

	if len(errors) > 0 {
		return PulsarOutputMultiError(errors)
	}

	return nil
}

// PulsarOutputMultiError is an error wrapping multiple validation errors
// returned by PulsarOutput.ValidateAll() if the designated constraints aren't met.
type PulsarOutputMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PulsarOutputMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PulsarOutputMultiError) AllErrors() []error { return m }

// PulsarOutputValidationError is the validation error returned by
// PulsarOutput.Validate if the designated constraints aren't met.
type PulsarOutputValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PulsarOutputValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PulsarOutputValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PulsarOutputValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PulsarOutputValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PulsarOutputValidationError) ErrorName() string { return "PulsarOutputValidationError" }

// Error satisfies the builtin error interface
func (e PulsarOutputValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPulsarOutput.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PulsarOutputValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PulsarOutputValidationError{}

// Validate checks the field values on ObjectStoreOutput_ResultPaths with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ObjectStoreOutput_ResultPaths) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ObjectStoreOutput_ResultPaths with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ObjectStoreOutput_ResultPathsMultiError, or nil if none found.
func (m *ObjectStoreOutput_ResultPaths) ValidateAll() error {
	return m.validate(true)
}

func (m *ObjectStoreOutput_ResultPaths) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ObjectStoreOutput_ResultPathsMultiError(errors)
	}

	return nil
}

// ObjectStoreOutput_ResultPathsMultiError is an error wrapping multiple
// validation errors returned by ObjectStoreOutput_ResultPaths.ValidateAll()
// if the designated constraints aren't met.
type ObjectStoreOutput_ResultPathsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ObjectStoreOutput_ResultPathsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ObjectStoreOutput_ResultPathsMultiError) AllErrors() []error { return m }

// ObjectStoreOutput_ResultPathsValidationError is the validation error
// returned by ObjectStoreOutput_ResultPaths.Validate if the designated
// constraints aren't met.
type ObjectStoreOutput_ResultPathsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ObjectStoreOutput_ResultPathsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ObjectStoreOutput_ResultPathsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ObjectStoreOutput_ResultPathsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ObjectStoreOutput_ResultPathsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ObjectStoreOutput_ResultPathsValidationError) ErrorName() string {
	return "ObjectStoreOutput_ResultPathsValidationError"
}

// Error satisfies the builtin error interface
func (e ObjectStoreOutput_ResultPathsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sObjectStoreOutput_ResultPaths.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ObjectStoreOutput_ResultPathsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ObjectStoreOutput_ResultPathsValidationError{}
