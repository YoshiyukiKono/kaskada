// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: kaskada/kaskada/v1alpha/view_service.proto

package kaskadav1alpha

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on View with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *View) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on View with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in ViewMultiError, or nil if none found.
func (m *View) ValidateAll() error {
	return m.validate(true)
}

func (m *View) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ViewId

	if utf8.RuneCountInString(m.GetViewName()) < 1 {
		err := ViewValidationError{
			field:  "ViewName",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetExpression()) < 1 {
		err := ViewValidationError{
			field:  "Expression",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetResultType()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ViewValidationError{
					field:  "ResultType",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ViewValidationError{
					field:  "ResultType",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetResultType()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ViewValidationError{
				field:  "ResultType",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetAnalysis()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ViewValidationError{
					field:  "Analysis",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ViewValidationError{
					field:  "Analysis",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAnalysis()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ViewValidationError{
				field:  "Analysis",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ViewMultiError(errors)
	}

	return nil
}

// ViewMultiError is an error wrapping multiple validation errors returned by
// View.ValidateAll() if the designated constraints aren't met.
type ViewMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ViewMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ViewMultiError) AllErrors() []error { return m }

// ViewValidationError is the validation error returned by View.Validate if the
// designated constraints aren't met.
type ViewValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ViewValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ViewValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ViewValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ViewValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ViewValidationError) ErrorName() string { return "ViewValidationError" }

// Error satisfies the builtin error interface
func (e ViewValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sView.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ViewValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ViewValidationError{}

// Validate checks the field values on ListViewsRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListViewsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListViewsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListViewsRequestMultiError, or nil if none found.
func (m *ListViewsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListViewsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Search

	if val := m.GetPageSize(); val < 0 || val > 1000 {
		err := ListViewsRequestValidationError{
			field:  "PageSize",
			reason: "value must be inside range [0, 1000]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for PageToken

	if len(errors) > 0 {
		return ListViewsRequestMultiError(errors)
	}

	return nil
}

// ListViewsRequestMultiError is an error wrapping multiple validation errors
// returned by ListViewsRequest.ValidateAll() if the designated constraints
// aren't met.
type ListViewsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListViewsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListViewsRequestMultiError) AllErrors() []error { return m }

// ListViewsRequestValidationError is the validation error returned by
// ListViewsRequest.Validate if the designated constraints aren't met.
type ListViewsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListViewsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListViewsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListViewsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListViewsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListViewsRequestValidationError) ErrorName() string { return "ListViewsRequestValidationError" }

// Error satisfies the builtin error interface
func (e ListViewsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListViewsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListViewsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListViewsRequestValidationError{}

// Validate checks the field values on ListViewsResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListViewsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListViewsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListViewsResponseMultiError, or nil if none found.
func (m *ListViewsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListViewsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetViews() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListViewsResponseValidationError{
						field:  fmt.Sprintf("Views[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListViewsResponseValidationError{
						field:  fmt.Sprintf("Views[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListViewsResponseValidationError{
					field:  fmt.Sprintf("Views[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if all {
		switch v := interface{}(m.GetRequestDetails()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListViewsResponseValidationError{
					field:  "RequestDetails",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListViewsResponseValidationError{
					field:  "RequestDetails",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRequestDetails()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListViewsResponseValidationError{
				field:  "RequestDetails",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for NextPageToken

	if len(errors) > 0 {
		return ListViewsResponseMultiError(errors)
	}

	return nil
}

// ListViewsResponseMultiError is an error wrapping multiple validation errors
// returned by ListViewsResponse.ValidateAll() if the designated constraints
// aren't met.
type ListViewsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListViewsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListViewsResponseMultiError) AllErrors() []error { return m }

// ListViewsResponseValidationError is the validation error returned by
// ListViewsResponse.Validate if the designated constraints aren't met.
type ListViewsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListViewsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListViewsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListViewsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListViewsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListViewsResponseValidationError) ErrorName() string {
	return "ListViewsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListViewsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListViewsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListViewsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListViewsResponseValidationError{}

// Validate checks the field values on GetViewRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetViewRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetViewRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetViewRequestMultiError,
// or nil if none found.
func (m *GetViewRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetViewRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetViewName()) < 1 {
		err := GetViewRequestValidationError{
			field:  "ViewName",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetViewRequestMultiError(errors)
	}

	return nil
}

// GetViewRequestMultiError is an error wrapping multiple validation errors
// returned by GetViewRequest.ValidateAll() if the designated constraints
// aren't met.
type GetViewRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetViewRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetViewRequestMultiError) AllErrors() []error { return m }

// GetViewRequestValidationError is the validation error returned by
// GetViewRequest.Validate if the designated constraints aren't met.
type GetViewRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetViewRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetViewRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetViewRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetViewRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetViewRequestValidationError) ErrorName() string { return "GetViewRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetViewRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetViewRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetViewRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetViewRequestValidationError{}

// Validate checks the field values on GetViewResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetViewResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetViewResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetViewResponseMultiError, or nil if none found.
func (m *GetViewResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetViewResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetView()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetViewResponseValidationError{
					field:  "View",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetViewResponseValidationError{
					field:  "View",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetView()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetViewResponseValidationError{
				field:  "View",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetRequestDetails()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetViewResponseValidationError{
					field:  "RequestDetails",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetViewResponseValidationError{
					field:  "RequestDetails",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRequestDetails()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetViewResponseValidationError{
				field:  "RequestDetails",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetViewResponseMultiError(errors)
	}

	return nil
}

// GetViewResponseMultiError is an error wrapping multiple validation errors
// returned by GetViewResponse.ValidateAll() if the designated constraints
// aren't met.
type GetViewResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetViewResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetViewResponseMultiError) AllErrors() []error { return m }

// GetViewResponseValidationError is the validation error returned by
// GetViewResponse.Validate if the designated constraints aren't met.
type GetViewResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetViewResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetViewResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetViewResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetViewResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetViewResponseValidationError) ErrorName() string { return "GetViewResponseValidationError" }

// Error satisfies the builtin error interface
func (e GetViewResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetViewResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetViewResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetViewResponseValidationError{}

// Validate checks the field values on CreateViewRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CreateViewRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateViewRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateViewRequestMultiError, or nil if none found.
func (m *CreateViewRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateViewRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetView() == nil {
		err := CreateViewRequestValidationError{
			field:  "View",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetView()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateViewRequestValidationError{
					field:  "View",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateViewRequestValidationError{
					field:  "View",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetView()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateViewRequestValidationError{
				field:  "View",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for DryRun

	if len(errors) > 0 {
		return CreateViewRequestMultiError(errors)
	}

	return nil
}

// CreateViewRequestMultiError is an error wrapping multiple validation errors
// returned by CreateViewRequest.ValidateAll() if the designated constraints
// aren't met.
type CreateViewRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateViewRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateViewRequestMultiError) AllErrors() []error { return m }

// CreateViewRequestValidationError is the validation error returned by
// CreateViewRequest.Validate if the designated constraints aren't met.
type CreateViewRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateViewRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateViewRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateViewRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateViewRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateViewRequestValidationError) ErrorName() string {
	return "CreateViewRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateViewRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateViewRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateViewRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateViewRequestValidationError{}

// Validate checks the field values on CreateViewResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateViewResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateViewResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateViewResponseMultiError, or nil if none found.
func (m *CreateViewResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateViewResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetView()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateViewResponseValidationError{
					field:  "View",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateViewResponseValidationError{
					field:  "View",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetView()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateViewResponseValidationError{
				field:  "View",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetRequestDetails()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateViewResponseValidationError{
					field:  "RequestDetails",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateViewResponseValidationError{
					field:  "RequestDetails",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRequestDetails()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateViewResponseValidationError{
				field:  "RequestDetails",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetAnalysis()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateViewResponseValidationError{
					field:  "Analysis",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateViewResponseValidationError{
					field:  "Analysis",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAnalysis()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateViewResponseValidationError{
				field:  "Analysis",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateViewResponseMultiError(errors)
	}

	return nil
}

// CreateViewResponseMultiError is an error wrapping multiple validation errors
// returned by CreateViewResponse.ValidateAll() if the designated constraints
// aren't met.
type CreateViewResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateViewResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateViewResponseMultiError) AllErrors() []error { return m }

// CreateViewResponseValidationError is the validation error returned by
// CreateViewResponse.Validate if the designated constraints aren't met.
type CreateViewResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateViewResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateViewResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateViewResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateViewResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateViewResponseValidationError) ErrorName() string {
	return "CreateViewResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateViewResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateViewResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateViewResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateViewResponseValidationError{}

// Validate checks the field values on DeleteViewRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *DeleteViewRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteViewRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteViewRequestMultiError, or nil if none found.
func (m *DeleteViewRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteViewRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetViewName()) < 1 {
		err := DeleteViewRequestValidationError{
			field:  "ViewName",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Force

	if len(errors) > 0 {
		return DeleteViewRequestMultiError(errors)
	}

	return nil
}

// DeleteViewRequestMultiError is an error wrapping multiple validation errors
// returned by DeleteViewRequest.ValidateAll() if the designated constraints
// aren't met.
type DeleteViewRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteViewRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteViewRequestMultiError) AllErrors() []error { return m }

// DeleteViewRequestValidationError is the validation error returned by
// DeleteViewRequest.Validate if the designated constraints aren't met.
type DeleteViewRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteViewRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteViewRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteViewRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteViewRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteViewRequestValidationError) ErrorName() string {
	return "DeleteViewRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteViewRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteViewRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteViewRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteViewRequestValidationError{}

// Validate checks the field values on DeleteViewResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteViewResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteViewResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteViewResponseMultiError, or nil if none found.
func (m *DeleteViewResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteViewResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetRequestDetails()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DeleteViewResponseValidationError{
					field:  "RequestDetails",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DeleteViewResponseValidationError{
					field:  "RequestDetails",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRequestDetails()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DeleteViewResponseValidationError{
				field:  "RequestDetails",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return DeleteViewResponseMultiError(errors)
	}

	return nil
}

// DeleteViewResponseMultiError is an error wrapping multiple validation errors
// returned by DeleteViewResponse.ValidateAll() if the designated constraints
// aren't met.
type DeleteViewResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteViewResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteViewResponseMultiError) AllErrors() []error { return m }

// DeleteViewResponseValidationError is the validation error returned by
// DeleteViewResponse.Validate if the designated constraints aren't met.
type DeleteViewResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteViewResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteViewResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteViewResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteViewResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteViewResponseValidationError) ErrorName() string {
	return "DeleteViewResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteViewResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteViewResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteViewResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteViewResponseValidationError{}
