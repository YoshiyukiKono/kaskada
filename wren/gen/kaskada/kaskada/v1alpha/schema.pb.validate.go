// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: kaskada/kaskada/v1alpha/schema.proto

package kaskadav1alpha

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on DataType with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *DataType) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DataType with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in DataTypeMultiError, or nil
// if none found.
func (m *DataType) ValidateAll() error {
	return m.validate(true)
}

func (m *DataType) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	switch m.Kind.(type) {

	case *DataType_Primitive:
		// no validation rules for Primitive

	case *DataType_Struct:

		if all {
			switch v := interface{}(m.GetStruct()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, DataTypeValidationError{
						field:  "Struct",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, DataTypeValidationError{
						field:  "Struct",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetStruct()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return DataTypeValidationError{
					field:  "Struct",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *DataType_Window:

		if all {
			switch v := interface{}(m.GetWindow()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, DataTypeValidationError{
						field:  "Window",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, DataTypeValidationError{
						field:  "Window",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetWindow()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return DataTypeValidationError{
					field:  "Window",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *DataType_List:

		if all {
			switch v := interface{}(m.GetList()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, DataTypeValidationError{
						field:  "List",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, DataTypeValidationError{
						field:  "List",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetList()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return DataTypeValidationError{
					field:  "List",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return DataTypeMultiError(errors)
	}

	return nil
}

// DataTypeMultiError is an error wrapping multiple validation errors returned
// by DataType.ValidateAll() if the designated constraints aren't met.
type DataTypeMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DataTypeMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DataTypeMultiError) AllErrors() []error { return m }

// DataTypeValidationError is the validation error returned by
// DataType.Validate if the designated constraints aren't met.
type DataTypeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DataTypeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DataTypeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DataTypeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DataTypeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DataTypeValidationError) ErrorName() string { return "DataTypeValidationError" }

// Error satisfies the builtin error interface
func (e DataTypeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDataType.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DataTypeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DataTypeValidationError{}

// Validate checks the field values on Schema with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Schema) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Schema with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in SchemaMultiError, or nil if none found.
func (m *Schema) ValidateAll() error {
	return m.validate(true)
}

func (m *Schema) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetFields() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SchemaValidationError{
						field:  fmt.Sprintf("Fields[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SchemaValidationError{
						field:  fmt.Sprintf("Fields[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SchemaValidationError{
					field:  fmt.Sprintf("Fields[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return SchemaMultiError(errors)
	}

	return nil
}

// SchemaMultiError is an error wrapping multiple validation errors returned by
// Schema.ValidateAll() if the designated constraints aren't met.
type SchemaMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SchemaMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SchemaMultiError) AllErrors() []error { return m }

// SchemaValidationError is the validation error returned by Schema.Validate if
// the designated constraints aren't met.
type SchemaValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SchemaValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SchemaValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SchemaValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SchemaValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SchemaValidationError) ErrorName() string { return "SchemaValidationError" }

// Error satisfies the builtin error interface
func (e SchemaValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSchema.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SchemaValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SchemaValidationError{}

// Validate checks the field values on Schema_Field with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Schema_Field) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Schema_Field with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in Schema_FieldMultiError, or
// nil if none found.
func (m *Schema_Field) ValidateAll() error {
	return m.validate(true)
}

func (m *Schema_Field) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	if all {
		switch v := interface{}(m.GetDataType()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, Schema_FieldValidationError{
					field:  "DataType",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, Schema_FieldValidationError{
					field:  "DataType",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDataType()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return Schema_FieldValidationError{
				field:  "DataType",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return Schema_FieldMultiError(errors)
	}

	return nil
}

// Schema_FieldMultiError is an error wrapping multiple validation errors
// returned by Schema_Field.ValidateAll() if the designated constraints aren't met.
type Schema_FieldMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Schema_FieldMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Schema_FieldMultiError) AllErrors() []error { return m }

// Schema_FieldValidationError is the validation error returned by
// Schema_Field.Validate if the designated constraints aren't met.
type Schema_FieldValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Schema_FieldValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Schema_FieldValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Schema_FieldValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Schema_FieldValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Schema_FieldValidationError) ErrorName() string { return "Schema_FieldValidationError" }

// Error satisfies the builtin error interface
func (e Schema_FieldValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSchema_Field.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Schema_FieldValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Schema_FieldValidationError{}
