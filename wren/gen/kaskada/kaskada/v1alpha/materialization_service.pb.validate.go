// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: kaskada/kaskada/v1alpha/materialization_service.proto

package kaskadav1alpha

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on WithView with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *WithView) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on WithView with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in WithViewMultiError, or nil
// if none found.
func (m *WithView) ValidateAll() error {
	return m.validate(true)
}

func (m *WithView) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetName()) < 1 {
		err := WithViewValidationError{
			field:  "Name",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetExpression()) < 1 {
		err := WithViewValidationError{
			field:  "Expression",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return WithViewMultiError(errors)
	}

	return nil
}

// WithViewMultiError is an error wrapping multiple validation errors returned
// by WithView.ValidateAll() if the designated constraints aren't met.
type WithViewMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m WithViewMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m WithViewMultiError) AllErrors() []error { return m }

// WithViewValidationError is the validation error returned by
// WithView.Validate if the designated constraints aren't met.
type WithViewValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WithViewValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WithViewValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WithViewValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WithViewValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WithViewValidationError) ErrorName() string { return "WithViewValidationError" }

// Error satisfies the builtin error interface
func (e WithViewValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWithView.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WithViewValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WithViewValidationError{}

// Validate checks the field values on WithViews with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *WithViews) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on WithViews with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in WithViewsMultiError, or nil
// if none found.
func (m *WithViews) ValidateAll() error {
	return m.validate(true)
}

func (m *WithViews) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetViews() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, WithViewsValidationError{
						field:  fmt.Sprintf("Views[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, WithViewsValidationError{
						field:  fmt.Sprintf("Views[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return WithViewsValidationError{
					field:  fmt.Sprintf("Views[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return WithViewsMultiError(errors)
	}

	return nil
}

// WithViewsMultiError is an error wrapping multiple validation errors returned
// by WithViews.ValidateAll() if the designated constraints aren't met.
type WithViewsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m WithViewsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m WithViewsMultiError) AllErrors() []error { return m }

// WithViewsValidationError is the validation error returned by
// WithViews.Validate if the designated constraints aren't met.
type WithViewsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WithViewsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WithViewsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WithViewsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WithViewsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WithViewsValidationError) ErrorName() string { return "WithViewsValidationError" }

// Error satisfies the builtin error interface
func (e WithViewsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWithViews.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WithViewsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WithViewsValidationError{}

// Validate checks the field values on Materialization with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *Materialization) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Materialization with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MaterializationMultiError, or nil if none found.
func (m *Materialization) ValidateAll() error {
	return m.validate(true)
}

func (m *Materialization) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for MaterializationId

	if utf8.RuneCountInString(m.GetMaterializationName()) < 1 {
		err := MaterializationValidationError{
			field:  "MaterializationName",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetCreateTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, MaterializationValidationError{
					field:  "CreateTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, MaterializationValidationError{
					field:  "CreateTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreateTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MaterializationValidationError{
				field:  "CreateTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Query

	for idx, item := range m.GetWithViews() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, MaterializationValidationError{
						field:  fmt.Sprintf("WithViews[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, MaterializationValidationError{
						field:  fmt.Sprintf("WithViews[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return MaterializationValidationError{
					field:  fmt.Sprintf("WithViews[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if all {
		switch v := interface{}(m.GetDestination()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, MaterializationValidationError{
					field:  "Destination",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, MaterializationValidationError{
					field:  "Destination",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDestination()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MaterializationValidationError{
				field:  "Destination",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetSchema()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, MaterializationValidationError{
					field:  "Schema",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, MaterializationValidationError{
					field:  "Schema",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSchema()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MaterializationValidationError{
				field:  "Schema",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetSlice()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, MaterializationValidationError{
					field:  "Slice",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, MaterializationValidationError{
					field:  "Slice",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSlice()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MaterializationValidationError{
				field:  "Slice",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetAnalysis()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, MaterializationValidationError{
					field:  "Analysis",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, MaterializationValidationError{
					field:  "Analysis",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAnalysis()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MaterializationValidationError{
				field:  "Analysis",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for DataVersionId

	if len(errors) > 0 {
		return MaterializationMultiError(errors)
	}

	return nil
}

// MaterializationMultiError is an error wrapping multiple validation errors
// returned by Materialization.ValidateAll() if the designated constraints
// aren't met.
type MaterializationMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MaterializationMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MaterializationMultiError) AllErrors() []error { return m }

// MaterializationValidationError is the validation error returned by
// Materialization.Validate if the designated constraints aren't met.
type MaterializationValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MaterializationValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MaterializationValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MaterializationValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MaterializationValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MaterializationValidationError) ErrorName() string { return "MaterializationValidationError" }

// Error satisfies the builtin error interface
func (e MaterializationValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMaterialization.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MaterializationValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MaterializationValidationError{}

// Validate checks the field values on ListMaterializationsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListMaterializationsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListMaterializationsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListMaterializationsRequestMultiError, or nil if none found.
func (m *ListMaterializationsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListMaterializationsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Search

	if val := m.GetPageSize(); val < 0 || val > 1000 {
		err := ListMaterializationsRequestValidationError{
			field:  "PageSize",
			reason: "value must be inside range [0, 1000]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for PageToken

	if len(errors) > 0 {
		return ListMaterializationsRequestMultiError(errors)
	}

	return nil
}

// ListMaterializationsRequestMultiError is an error wrapping multiple
// validation errors returned by ListMaterializationsRequest.ValidateAll() if
// the designated constraints aren't met.
type ListMaterializationsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListMaterializationsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListMaterializationsRequestMultiError) AllErrors() []error { return m }

// ListMaterializationsRequestValidationError is the validation error returned
// by ListMaterializationsRequest.Validate if the designated constraints
// aren't met.
type ListMaterializationsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListMaterializationsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListMaterializationsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListMaterializationsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListMaterializationsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListMaterializationsRequestValidationError) ErrorName() string {
	return "ListMaterializationsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListMaterializationsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListMaterializationsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListMaterializationsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListMaterializationsRequestValidationError{}

// Validate checks the field values on ListMaterializationsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListMaterializationsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListMaterializationsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListMaterializationsResponseMultiError, or nil if none found.
func (m *ListMaterializationsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListMaterializationsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetMaterializations() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListMaterializationsResponseValidationError{
						field:  fmt.Sprintf("Materializations[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListMaterializationsResponseValidationError{
						field:  fmt.Sprintf("Materializations[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListMaterializationsResponseValidationError{
					field:  fmt.Sprintf("Materializations[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for NextPageToken

	if all {
		switch v := interface{}(m.GetRequestDetails()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListMaterializationsResponseValidationError{
					field:  "RequestDetails",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListMaterializationsResponseValidationError{
					field:  "RequestDetails",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRequestDetails()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListMaterializationsResponseValidationError{
				field:  "RequestDetails",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ListMaterializationsResponseMultiError(errors)
	}

	return nil
}

// ListMaterializationsResponseMultiError is an error wrapping multiple
// validation errors returned by ListMaterializationsResponse.ValidateAll() if
// the designated constraints aren't met.
type ListMaterializationsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListMaterializationsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListMaterializationsResponseMultiError) AllErrors() []error { return m }

// ListMaterializationsResponseValidationError is the validation error returned
// by ListMaterializationsResponse.Validate if the designated constraints
// aren't met.
type ListMaterializationsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListMaterializationsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListMaterializationsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListMaterializationsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListMaterializationsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListMaterializationsResponseValidationError) ErrorName() string {
	return "ListMaterializationsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListMaterializationsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListMaterializationsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListMaterializationsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListMaterializationsResponseValidationError{}

// Validate checks the field values on GetMaterializationRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetMaterializationRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetMaterializationRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetMaterializationRequestMultiError, or nil if none found.
func (m *GetMaterializationRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetMaterializationRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetMaterializationName()) < 1 {
		err := GetMaterializationRequestValidationError{
			field:  "MaterializationName",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetMaterializationRequestMultiError(errors)
	}

	return nil
}

// GetMaterializationRequestMultiError is an error wrapping multiple validation
// errors returned by GetMaterializationRequest.ValidateAll() if the
// designated constraints aren't met.
type GetMaterializationRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetMaterializationRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetMaterializationRequestMultiError) AllErrors() []error { return m }

// GetMaterializationRequestValidationError is the validation error returned by
// GetMaterializationRequest.Validate if the designated constraints aren't met.
type GetMaterializationRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetMaterializationRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetMaterializationRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetMaterializationRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetMaterializationRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetMaterializationRequestValidationError) ErrorName() string {
	return "GetMaterializationRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetMaterializationRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetMaterializationRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetMaterializationRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetMaterializationRequestValidationError{}

// Validate checks the field values on GetMaterializationResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetMaterializationResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetMaterializationResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetMaterializationResponseMultiError, or nil if none found.
func (m *GetMaterializationResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetMaterializationResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetMaterialization()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetMaterializationResponseValidationError{
					field:  "Materialization",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetMaterializationResponseValidationError{
					field:  "Materialization",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMaterialization()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetMaterializationResponseValidationError{
				field:  "Materialization",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetRequestDetails()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetMaterializationResponseValidationError{
					field:  "RequestDetails",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetMaterializationResponseValidationError{
					field:  "RequestDetails",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRequestDetails()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetMaterializationResponseValidationError{
				field:  "RequestDetails",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetMaterializationResponseMultiError(errors)
	}

	return nil
}

// GetMaterializationResponseMultiError is an error wrapping multiple
// validation errors returned by GetMaterializationResponse.ValidateAll() if
// the designated constraints aren't met.
type GetMaterializationResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetMaterializationResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetMaterializationResponseMultiError) AllErrors() []error { return m }

// GetMaterializationResponseValidationError is the validation error returned
// by GetMaterializationResponse.Validate if the designated constraints aren't met.
type GetMaterializationResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetMaterializationResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetMaterializationResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetMaterializationResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetMaterializationResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetMaterializationResponseValidationError) ErrorName() string {
	return "GetMaterializationResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetMaterializationResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetMaterializationResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetMaterializationResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetMaterializationResponseValidationError{}

// Validate checks the field values on CreateMaterializationRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateMaterializationRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateMaterializationRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateMaterializationRequestMultiError, or nil if none found.
func (m *CreateMaterializationRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateMaterializationRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetMaterialization()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateMaterializationRequestValidationError{
					field:  "Materialization",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateMaterializationRequestValidationError{
					field:  "Materialization",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMaterialization()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateMaterializationRequestValidationError{
				field:  "Materialization",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for DryRun

	if len(errors) > 0 {
		return CreateMaterializationRequestMultiError(errors)
	}

	return nil
}

// CreateMaterializationRequestMultiError is an error wrapping multiple
// validation errors returned by CreateMaterializationRequest.ValidateAll() if
// the designated constraints aren't met.
type CreateMaterializationRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateMaterializationRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateMaterializationRequestMultiError) AllErrors() []error { return m }

// CreateMaterializationRequestValidationError is the validation error returned
// by CreateMaterializationRequest.Validate if the designated constraints
// aren't met.
type CreateMaterializationRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateMaterializationRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateMaterializationRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateMaterializationRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateMaterializationRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateMaterializationRequestValidationError) ErrorName() string {
	return "CreateMaterializationRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateMaterializationRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateMaterializationRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateMaterializationRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateMaterializationRequestValidationError{}

// Validate checks the field values on CreateMaterializationResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateMaterializationResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateMaterializationResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// CreateMaterializationResponseMultiError, or nil if none found.
func (m *CreateMaterializationResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateMaterializationResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetMaterialization()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateMaterializationResponseValidationError{
					field:  "Materialization",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateMaterializationResponseValidationError{
					field:  "Materialization",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMaterialization()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateMaterializationResponseValidationError{
				field:  "Materialization",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetRequestDetails()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateMaterializationResponseValidationError{
					field:  "RequestDetails",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateMaterializationResponseValidationError{
					field:  "RequestDetails",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRequestDetails()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateMaterializationResponseValidationError{
				field:  "RequestDetails",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetAnalysis()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateMaterializationResponseValidationError{
					field:  "Analysis",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateMaterializationResponseValidationError{
					field:  "Analysis",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAnalysis()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateMaterializationResponseValidationError{
				field:  "Analysis",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateMaterializationResponseMultiError(errors)
	}

	return nil
}

// CreateMaterializationResponseMultiError is an error wrapping multiple
// validation errors returned by CreateMaterializationResponse.ValidateAll()
// if the designated constraints aren't met.
type CreateMaterializationResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateMaterializationResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateMaterializationResponseMultiError) AllErrors() []error { return m }

// CreateMaterializationResponseValidationError is the validation error
// returned by CreateMaterializationResponse.Validate if the designated
// constraints aren't met.
type CreateMaterializationResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateMaterializationResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateMaterializationResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateMaterializationResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateMaterializationResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateMaterializationResponseValidationError) ErrorName() string {
	return "CreateMaterializationResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateMaterializationResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateMaterializationResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateMaterializationResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateMaterializationResponseValidationError{}

// Validate checks the field values on DeleteMaterializationRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteMaterializationRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteMaterializationRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteMaterializationRequestMultiError, or nil if none found.
func (m *DeleteMaterializationRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteMaterializationRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetMaterializationName()) < 1 {
		err := DeleteMaterializationRequestValidationError{
			field:  "MaterializationName",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DeleteMaterializationRequestMultiError(errors)
	}

	return nil
}

// DeleteMaterializationRequestMultiError is an error wrapping multiple
// validation errors returned by DeleteMaterializationRequest.ValidateAll() if
// the designated constraints aren't met.
type DeleteMaterializationRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteMaterializationRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteMaterializationRequestMultiError) AllErrors() []error { return m }

// DeleteMaterializationRequestValidationError is the validation error returned
// by DeleteMaterializationRequest.Validate if the designated constraints
// aren't met.
type DeleteMaterializationRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteMaterializationRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteMaterializationRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteMaterializationRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteMaterializationRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteMaterializationRequestValidationError) ErrorName() string {
	return "DeleteMaterializationRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteMaterializationRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteMaterializationRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteMaterializationRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteMaterializationRequestValidationError{}

// Validate checks the field values on DeleteMaterializationResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteMaterializationResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteMaterializationResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// DeleteMaterializationResponseMultiError, or nil if none found.
func (m *DeleteMaterializationResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteMaterializationResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetRequestDetails()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DeleteMaterializationResponseValidationError{
					field:  "RequestDetails",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DeleteMaterializationResponseValidationError{
					field:  "RequestDetails",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRequestDetails()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DeleteMaterializationResponseValidationError{
				field:  "RequestDetails",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return DeleteMaterializationResponseMultiError(errors)
	}

	return nil
}

// DeleteMaterializationResponseMultiError is an error wrapping multiple
// validation errors returned by DeleteMaterializationResponse.ValidateAll()
// if the designated constraints aren't met.
type DeleteMaterializationResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteMaterializationResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteMaterializationResponseMultiError) AllErrors() []error { return m }

// DeleteMaterializationResponseValidationError is the validation error
// returned by DeleteMaterializationResponse.Validate if the designated
// constraints aren't met.
type DeleteMaterializationResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteMaterializationResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteMaterializationResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteMaterializationResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteMaterializationResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteMaterializationResponseValidationError) ErrorName() string {
	return "DeleteMaterializationResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteMaterializationResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteMaterializationResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteMaterializationResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteMaterializationResponseValidationError{}

// Validate checks the field values on Materialization_Destination with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *Materialization_Destination) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Materialization_Destination with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// Materialization_DestinationMultiError, or nil if none found.
func (m *Materialization_Destination) ValidateAll() error {
	return m.validate(true)
}

func (m *Materialization_Destination) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	switch m.Destination.(type) {

	case *Materialization_Destination_Redis:

		if all {
			switch v := interface{}(m.GetRedis()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, Materialization_DestinationValidationError{
						field:  "Redis",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, Materialization_DestinationValidationError{
						field:  "Redis",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetRedis()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return Materialization_DestinationValidationError{
					field:  "Redis",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Materialization_Destination_ObjectStore:

		if all {
			switch v := interface{}(m.GetObjectStore()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, Materialization_DestinationValidationError{
						field:  "ObjectStore",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, Materialization_DestinationValidationError{
						field:  "ObjectStore",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetObjectStore()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return Materialization_DestinationValidationError{
					field:  "ObjectStore",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Materialization_Destination_Pulsar:

		if all {
			switch v := interface{}(m.GetPulsar()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, Materialization_DestinationValidationError{
						field:  "Pulsar",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, Materialization_DestinationValidationError{
						field:  "Pulsar",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetPulsar()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return Materialization_DestinationValidationError{
					field:  "Pulsar",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return Materialization_DestinationMultiError(errors)
	}

	return nil
}

// Materialization_DestinationMultiError is an error wrapping multiple
// validation errors returned by Materialization_Destination.ValidateAll() if
// the designated constraints aren't met.
type Materialization_DestinationMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Materialization_DestinationMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Materialization_DestinationMultiError) AllErrors() []error { return m }

// Materialization_DestinationValidationError is the validation error returned
// by Materialization_Destination.Validate if the designated constraints
// aren't met.
type Materialization_DestinationValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Materialization_DestinationValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Materialization_DestinationValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Materialization_DestinationValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Materialization_DestinationValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Materialization_DestinationValidationError) ErrorName() string {
	return "Materialization_DestinationValidationError"
}

// Error satisfies the builtin error interface
func (e Materialization_DestinationValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMaterialization_Destination.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Materialization_DestinationValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Materialization_DestinationValidationError{}
