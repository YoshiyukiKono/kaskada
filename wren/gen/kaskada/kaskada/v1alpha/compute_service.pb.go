// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0-devel
// 	protoc        (unknown)
// source: kaskada/kaskada/v1alpha/compute_service.proto

package kaskadav1alpha

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type LongQueryState int32

const (
	LongQueryState_LONG_QUERY_STATE_UNSPECIFIED LongQueryState = 0
	LongQueryState_LONG_QUERY_STATE_INITIAL     LongQueryState = 1
	LongQueryState_LONG_QUERY_STATE_RUNNING     LongQueryState = 2
	LongQueryState_LONG_QUERY_STATE_FINAL       LongQueryState = 3
)

// Enum value maps for LongQueryState.
var (
	LongQueryState_name = map[int32]string{
		0: "LONG_QUERY_STATE_UNSPECIFIED",
		1: "LONG_QUERY_STATE_INITIAL",
		2: "LONG_QUERY_STATE_RUNNING",
		3: "LONG_QUERY_STATE_FINAL",
	}
	LongQueryState_value = map[string]int32{
		"LONG_QUERY_STATE_UNSPECIFIED": 0,
		"LONG_QUERY_STATE_INITIAL":     1,
		"LONG_QUERY_STATE_RUNNING":     2,
		"LONG_QUERY_STATE_FINAL":       3,
	}
)

func (x LongQueryState) Enum() *LongQueryState {
	p := new(LongQueryState)
	*p = x
	return p
}

func (x LongQueryState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LongQueryState) Descriptor() protoreflect.EnumDescriptor {
	return file_kaskada_kaskada_v1alpha_compute_service_proto_enumTypes[0].Descriptor()
}

func (LongQueryState) Type() protoreflect.EnumType {
	return &file_kaskada_kaskada_v1alpha_compute_service_proto_enumTypes[0]
}

func (x LongQueryState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LongQueryState.Descriptor instead.
func (LongQueryState) EnumDescriptor() ([]byte, []int) {
	return file_kaskada_kaskada_v1alpha_compute_service_proto_rawDescGZIP(), []int{0}
}

type CompileRequest_ExpressionKind int32

const (
	CompileRequest_EXPRESSION_KIND_UNSPECIFIED CompileRequest_ExpressionKind = 0
	// The expression represents a complete query, and should be checked as such.
	// Complete queries must produce a struct.
	CompileRequest_EXPRESSION_KIND_COMPLETE CompileRequest_ExpressionKind = 1
	// The query represents a formula, and should be checked as such.
	// Formulas may produce primitive types.
	CompileRequest_EXPRESSION_KIND_FORMULA CompileRequest_ExpressionKind = 2
)

// Enum value maps for CompileRequest_ExpressionKind.
var (
	CompileRequest_ExpressionKind_name = map[int32]string{
		0: "EXPRESSION_KIND_UNSPECIFIED",
		1: "EXPRESSION_KIND_COMPLETE",
		2: "EXPRESSION_KIND_FORMULA",
	}
	CompileRequest_ExpressionKind_value = map[string]int32{
		"EXPRESSION_KIND_UNSPECIFIED": 0,
		"EXPRESSION_KIND_COMPLETE":    1,
		"EXPRESSION_KIND_FORMULA":     2,
	}
)

func (x CompileRequest_ExpressionKind) Enum() *CompileRequest_ExpressionKind {
	p := new(CompileRequest_ExpressionKind)
	*p = x
	return p
}

func (x CompileRequest_ExpressionKind) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CompileRequest_ExpressionKind) Descriptor() protoreflect.EnumDescriptor {
	return file_kaskada_kaskada_v1alpha_compute_service_proto_enumTypes[1].Descriptor()
}

func (CompileRequest_ExpressionKind) Type() protoreflect.EnumType {
	return &file_kaskada_kaskada_v1alpha_compute_service_proto_enumTypes[1]
}

func (x CompileRequest_ExpressionKind) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CompileRequest_ExpressionKind.Descriptor instead.
func (CompileRequest_ExpressionKind) EnumDescriptor() ([]byte, []int) {
	return file_kaskada_kaskada_v1alpha_compute_service_proto_rawDescGZIP(), []int{6, 0}
}

type FeatureSet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Named Fenl formulas which may be referenced by the `query`.
	Formulas []*Formula `protobuf:"bytes,1,rep,name=formulas,proto3" json:"formulas,omitempty"`
	// The Fenl expression corresponding to use as the result of the query.
	//
	// If the query produces a record, each of the fields will be a column in
	// the output.
	Query string `protobuf:"bytes,2,opt,name=query,proto3" json:"query,omitempty"`
}

func (x *FeatureSet) Reset() {
	*x = FeatureSet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kaskada_kaskada_v1alpha_compute_service_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FeatureSet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FeatureSet) ProtoMessage() {}

func (x *FeatureSet) ProtoReflect() protoreflect.Message {
	mi := &file_kaskada_kaskada_v1alpha_compute_service_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FeatureSet.ProtoReflect.Descriptor instead.
func (*FeatureSet) Descriptor() ([]byte, []int) {
	return file_kaskada_kaskada_v1alpha_compute_service_proto_rawDescGZIP(), []int{0}
}

func (x *FeatureSet) GetFormulas() []*Formula {
	if x != nil {
		return x.Formulas
	}
	return nil
}

func (x *FeatureSet) GetQuery() string {
	if x != nil {
		return x.Query
	}
	return ""
}

// A named Fenl formula.
type Formula struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name    string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Formula string `protobuf:"bytes,2,opt,name=formula,proto3" json:"formula,omitempty"`
	// A string describing the source location of this formula.
	// This will be used when reporting compilation errors.
	// If not set this will default to `Formula:<name>`.
	SourceLocation string `protobuf:"bytes,3,opt,name=source_location,json=sourceLocation,proto3" json:"source_location,omitempty"`
}

func (x *Formula) Reset() {
	*x = Formula{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kaskada_kaskada_v1alpha_compute_service_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Formula) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Formula) ProtoMessage() {}

func (x *Formula) ProtoReflect() protoreflect.Message {
	mi := &file_kaskada_kaskada_v1alpha_compute_service_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Formula.ProtoReflect.Descriptor instead.
func (*Formula) Descriptor() ([]byte, []int) {
	return file_kaskada_kaskada_v1alpha_compute_service_proto_rawDescGZIP(), []int{1}
}

func (x *Formula) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Formula) GetFormula() string {
	if x != nil {
		return x.Formula
	}
	return ""
}

func (x *Formula) GetSourceLocation() string {
	if x != nil {
		return x.SourceLocation
	}
	return ""
}

// A table is a name assigned to one or more data sources.
//
// All of the data in a table should have the same schema, possibly merged
// across one or more evolutions of the schema.
//
// Each row in the table is associated with a time. The table should be sorted
// by time.
//
// Each row may be associated with a subsort column, indicating ordering
// within the given time. If defined, the table should be sorted lexicographically by
// `(time, subsort)`.
type ComputeTable struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// General configuration of the table
	Config *TableConfig `protobuf:"bytes,1,opt,name=config,proto3" json:"config,omitempty"`
	// The table metadata.
	//
	// This is currently optional. If present, it will be used to determine
	// the schema of the table, as well as (in the future) reporting progress.
	// At some point it is likely to become required.
	Metadata *TableMetadata          `protobuf:"bytes,2,opt,name=metadata,proto3" json:"metadata,omitempty"`
	FileSets []*ComputeTable_FileSet `protobuf:"bytes,3,rep,name=file_sets,json=fileSets,proto3" json:"file_sets,omitempty"`
}

func (x *ComputeTable) Reset() {
	*x = ComputeTable{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kaskada_kaskada_v1alpha_compute_service_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ComputeTable) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ComputeTable) ProtoMessage() {}

func (x *ComputeTable) ProtoReflect() protoreflect.Message {
	mi := &file_kaskada_kaskada_v1alpha_compute_service_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ComputeTable.ProtoReflect.Descriptor instead.
func (*ComputeTable) Descriptor() ([]byte, []int) {
	return file_kaskada_kaskada_v1alpha_compute_service_proto_rawDescGZIP(), []int{2}
}

func (x *ComputeTable) GetConfig() *TableConfig {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *ComputeTable) GetMetadata() *TableMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *ComputeTable) GetFileSets() []*ComputeTable_FileSet {
	if x != nil {
		return x.FileSets
	}
	return nil
}

type PlanHash struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The calculated hash of the query plan.
	Hash []byte `protobuf:"bytes,1,opt,name=hash,proto3" json:"hash,omitempty"`
}

func (x *PlanHash) Reset() {
	*x = PlanHash{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kaskada_kaskada_v1alpha_compute_service_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlanHash) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlanHash) ProtoMessage() {}

func (x *PlanHash) ProtoReflect() protoreflect.Message {
	mi := &file_kaskada_kaskada_v1alpha_compute_service_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlanHash.ProtoReflect.Descriptor instead.
func (*PlanHash) Descriptor() ([]byte, []int) {
	return file_kaskada_kaskada_v1alpha_compute_service_proto_rawDescGZIP(), []int{3}
}

func (x *PlanHash) GetHash() []byte {
	if x != nil {
		return x.Hash
	}
	return nil
}

type GetCurrentSnapshotVersionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetCurrentSnapshotVersionRequest) Reset() {
	*x = GetCurrentSnapshotVersionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kaskada_kaskada_v1alpha_compute_service_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCurrentSnapshotVersionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCurrentSnapshotVersionRequest) ProtoMessage() {}

func (x *GetCurrentSnapshotVersionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kaskada_kaskada_v1alpha_compute_service_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCurrentSnapshotVersionRequest.ProtoReflect.Descriptor instead.
func (*GetCurrentSnapshotVersionRequest) Descriptor() ([]byte, []int) {
	return file_kaskada_kaskada_v1alpha_compute_service_proto_rawDescGZIP(), []int{4}
}

type GetCurrentSnapshotVersionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The current snapshot version.
	SnapshotVersion int32 `protobuf:"varint,1,opt,name=snapshot_version,json=snapshotVersion,proto3" json:"snapshot_version,omitempty"`
}

func (x *GetCurrentSnapshotVersionResponse) Reset() {
	*x = GetCurrentSnapshotVersionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kaskada_kaskada_v1alpha_compute_service_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCurrentSnapshotVersionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCurrentSnapshotVersionResponse) ProtoMessage() {}

func (x *GetCurrentSnapshotVersionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kaskada_kaskada_v1alpha_compute_service_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCurrentSnapshotVersionResponse.ProtoReflect.Descriptor instead.
func (*GetCurrentSnapshotVersionResponse) Descriptor() ([]byte, []int) {
	return file_kaskada_kaskada_v1alpha_compute_service_proto_rawDescGZIP(), []int{5}
}

func (x *GetCurrentSnapshotVersionResponse) GetSnapshotVersion() int32 {
	if x != nil {
		return x.SnapshotVersion
	}
	return 0
}

type CompileRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The tables that are available to the query.
	Tables []*ComputeTable `protobuf:"bytes,1,rep,name=tables,proto3" json:"tables,omitempty"`
	// The features to be compiled for the query.
	FeatureSet *FeatureSet `protobuf:"bytes,2,opt,name=feature_set,json=featureSet,proto3" json:"feature_set,omitempty"`
	// The slice request provided by the user.
	SliceRequest *SliceRequest `protobuf:"bytes,3,opt,name=slice_request,json=sliceRequest,proto3" json:"slice_request,omitempty"`
	// The kind of Fenl expression being compiled.
	ExpressionKind CompileRequest_ExpressionKind `protobuf:"varint,4,opt,name=expression_kind,json=expressionKind,proto3,enum=kaskada.kaskada.v1alpha.CompileRequest_ExpressionKind" json:"expression_kind,omitempty"`
	// Whether experimental features should be enabled.
	//
	// If we require multiple experiments, we may introduce a repeated field
	// enabling specific experiments by enum or name (if we want to hide
	// the set of experiments). But for now, if this flag is true, then the
	// current set of "experiments" will be enabled.
	Experimental      bool              `protobuf:"varint,5,opt,name=experimental,proto3" json:"experimental,omitempty"`
	PerEntityBehavior PerEntityBehavior `protobuf:"varint,6,opt,name=per_entity_behavior,json=perEntityBehavior,proto3,enum=kaskada.kaskada.v1alpha.PerEntityBehavior" json:"per_entity_behavior,omitempty"`
}

func (x *CompileRequest) Reset() {
	*x = CompileRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kaskada_kaskada_v1alpha_compute_service_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CompileRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompileRequest) ProtoMessage() {}

func (x *CompileRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kaskada_kaskada_v1alpha_compute_service_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompileRequest.ProtoReflect.Descriptor instead.
func (*CompileRequest) Descriptor() ([]byte, []int) {
	return file_kaskada_kaskada_v1alpha_compute_service_proto_rawDescGZIP(), []int{6}
}

func (x *CompileRequest) GetTables() []*ComputeTable {
	if x != nil {
		return x.Tables
	}
	return nil
}

func (x *CompileRequest) GetFeatureSet() *FeatureSet {
	if x != nil {
		return x.FeatureSet
	}
	return nil
}

func (x *CompileRequest) GetSliceRequest() *SliceRequest {
	if x != nil {
		return x.SliceRequest
	}
	return nil
}

func (x *CompileRequest) GetExpressionKind() CompileRequest_ExpressionKind {
	if x != nil {
		return x.ExpressionKind
	}
	return CompileRequest_EXPRESSION_KIND_UNSPECIFIED
}

func (x *CompileRequest) GetExperimental() bool {
	if x != nil {
		return x.Experimental
	}
	return false
}

func (x *CompileRequest) GetPerEntityBehavior() PerEntityBehavior {
	if x != nil {
		return x.PerEntityBehavior
	}
	return PerEntityBehavior_PER_ENTITY_BEHAVIOR_UNSPECIFIED
}

type CompileResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Names that were missing in the query request.
	//
	// These are formulas (views) and tables referenced directly or
	// indirectly by the query which were not provided in the request.
	// An indirect reference occurs when the query references a
	// provided formula which references formulas or tables.
	//
	// If this is non-empty, the FenlDiagnostics should include
	// corresponding "missing name" errors
	MissingNames []string `protobuf:"bytes,1,rep,name=missing_names,json=missingNames,proto3" json:"missing_names,omitempty"`
	// Fenl Diagnostics -- warnings and errors derived from the query.
	FenlDiagnostics *FenlDiagnostics `protobuf:"bytes,2,opt,name=fenl_diagnostics,json=fenlDiagnostics,proto3" json:"fenl_diagnostics,omitempty"`
	// The compiled compute plan.
	//
	// Will be null if the query is not executable due to errors or being
	// an incomplete query.
	Plan *ComputePlan `protobuf:"bytes,3,opt,name=plan,proto3" json:"plan,omitempty"`
	// The result type of the query.
	ResultType *DataType `protobuf:"bytes,4,opt,name=result_type,json=resultType,proto3" json:"result_type,omitempty"`
	// Top level names that are directly referenced by the query.
	//
	// These are formulas (views) and tables referenced by the query.
	//
	// This includes all free names, including those which were "missing".
	//
	// This may be empty if the query or formulas failed to parse.
	FreeNames []string `protobuf:"bytes,5,rep,name=free_names,json=freeNames,proto3" json:"free_names,omitempty"`
	// Necessary table slices.
	//
	// The same table may be sliced in multiple ways and therefore can appear
	// multiple times.
	//
	// Implementation detail: As Sparrow implements, needed tables should be returned
	// even if there is no slice plan related to it. Wren relies on this to enumerate
	// the set of prepared tables that need to be passed to query.
	TableSlices []*SlicePlan `protobuf:"bytes,6,rep,name=table_slices,json=tableSlices,proto3" json:"table_slices,omitempty"`
	// Whether incremental should be enabled for this query.
	// If false, either incremental is not enabled (currently requires experimental)
	// or the query uses operations not yet supported by incremental.
	IncrementalEnabled bool `protobuf:"varint,7,opt,name=incremental_enabled,json=incrementalEnabled,proto3" json:"incremental_enabled,omitempty"`
	// Hash of the query plan.
	PlanHash *PlanHash `protobuf:"bytes,8,opt,name=plan_hash,json=planHash,proto3" json:"plan_hash,omitempty"`
}

func (x *CompileResponse) Reset() {
	*x = CompileResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kaskada_kaskada_v1alpha_compute_service_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CompileResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompileResponse) ProtoMessage() {}

func (x *CompileResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kaskada_kaskada_v1alpha_compute_service_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompileResponse.ProtoReflect.Descriptor instead.
func (*CompileResponse) Descriptor() ([]byte, []int) {
	return file_kaskada_kaskada_v1alpha_compute_service_proto_rawDescGZIP(), []int{7}
}

func (x *CompileResponse) GetMissingNames() []string {
	if x != nil {
		return x.MissingNames
	}
	return nil
}

func (x *CompileResponse) GetFenlDiagnostics() *FenlDiagnostics {
	if x != nil {
		return x.FenlDiagnostics
	}
	return nil
}

func (x *CompileResponse) GetPlan() *ComputePlan {
	if x != nil {
		return x.Plan
	}
	return nil
}

func (x *CompileResponse) GetResultType() *DataType {
	if x != nil {
		return x.ResultType
	}
	return nil
}

func (x *CompileResponse) GetFreeNames() []string {
	if x != nil {
		return x.FreeNames
	}
	return nil
}

func (x *CompileResponse) GetTableSlices() []*SlicePlan {
	if x != nil {
		return x.TableSlices
	}
	return nil
}

func (x *CompileResponse) GetIncrementalEnabled() bool {
	if x != nil {
		return x.IncrementalEnabled
	}
	return false
}

func (x *CompileResponse) GetPlanHash() *PlanHash {
	if x != nil {
		return x.PlanHash
	}
	return nil
}

type ExecuteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The compiled compute plan.
	Plan *ComputePlan `protobuf:"bytes,1,opt,name=plan,proto3" json:"plan,omitempty"`
	// Tables that are available to the query.
	//
	// This should have file sets for the necessary tables properly configured.
	Tables []*ComputeTable `protobuf:"bytes,2,rep,name=tables,proto3" json:"tables,omitempty"`
	// Describes the destinations that results will be produced to.
	//
	// Note: Can make this a repeated field to support multiple destinations.
	OutputTo *ExecuteRequest_OutputTo `protobuf:"bytes,3,opt,name=output_to,json=outputTo,proto3" json:"output_to,omitempty"`
	Limits   *ExecuteRequest_Limits   `protobuf:"bytes,5,opt,name=limits,proto3" json:"limits,omitempty"`
	// Configuration for snapshot storage and retrieval.
	// If not set, then no snapshots will be written by the query.
	ComputeSnapshotConfig *ExecuteRequest_ComputeSnapshotConfig `protobuf:"bytes,6,opt,name=compute_snapshot_config,json=computeSnapshotConfig,proto3" json:"compute_snapshot_config,omitempty"`
	// If set, only values representing changes at or after this time are included.
	// By default (none), results will include all rows.
	//
	// When used with query type `final_results`, only the final result of any entities
	// that have changed at or after this time are included.
	// When used with query type `all results`, all results at or after this time
	// are included.
	//
	// This timestamp is determined from the user-provided timestamp or
	// the minimum event from a given data token.
	ChangedSince *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=changed_since,json=changedSince,proto3" json:"changed_since,omitempty"`
	// Only inputs prior to this time are included in the final result at this this time
	FinalResultTime *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=final_result_time,json=finalResultTime,proto3" json:"final_result_time,omitempty"`
}

func (x *ExecuteRequest) Reset() {
	*x = ExecuteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kaskada_kaskada_v1alpha_compute_service_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExecuteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecuteRequest) ProtoMessage() {}

func (x *ExecuteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kaskada_kaskada_v1alpha_compute_service_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecuteRequest.ProtoReflect.Descriptor instead.
func (*ExecuteRequest) Descriptor() ([]byte, []int) {
	return file_kaskada_kaskada_v1alpha_compute_service_proto_rawDescGZIP(), []int{8}
}

func (x *ExecuteRequest) GetPlan() *ComputePlan {
	if x != nil {
		return x.Plan
	}
	return nil
}

func (x *ExecuteRequest) GetTables() []*ComputeTable {
	if x != nil {
		return x.Tables
	}
	return nil
}

func (x *ExecuteRequest) GetOutputTo() *ExecuteRequest_OutputTo {
	if x != nil {
		return x.OutputTo
	}
	return nil
}

func (x *ExecuteRequest) GetLimits() *ExecuteRequest_Limits {
	if x != nil {
		return x.Limits
	}
	return nil
}

func (x *ExecuteRequest) GetComputeSnapshotConfig() *ExecuteRequest_ComputeSnapshotConfig {
	if x != nil {
		return x.ComputeSnapshotConfig
	}
	return nil
}

func (x *ExecuteRequest) GetChangedSince() *timestamppb.Timestamp {
	if x != nil {
		return x.ChangedSince
	}
	return nil
}

func (x *ExecuteRequest) GetFinalResultTime() *timestamppb.Timestamp {
	if x != nil {
		return x.FinalResultTime
	}
	return nil
}

type ExecuteResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	State LongQueryState `protobuf:"varint,1,opt,name=state,proto3,enum=kaskada.kaskada.v1alpha.LongQueryState" json:"state,omitempty"`
	// If true, the query is *done* (no more results should be produced)
	// but there may be some pending finalization that is not done.
	// Diagnostics such as query flight records may still be returned in
	/// future messages.
	IsQueryDone bool `protobuf:"varint,2,opt,name=is_query_done,json=isQueryDone,proto3" json:"is_query_done,omitempty"`
	// Progress information included in every message.
	Progress *ExecuteResponse_ProgressInformation `protobuf:"bytes,3,opt,name=progress,proto3" json:"progress,omitempty"`
	// Path to the flight record.
	// Currently this is sent only on the final message, after the flight
	// record has been uploaded. It may change in the future to be set
	// earlier if we stream the flight records to the destination.
	FlightRecordPath *wrapperspb.StringValue `protobuf:"bytes,5,opt,name=flight_record_path,json=flightRecordPath,proto3" json:"flight_record_path,omitempty"`
	// Path to the plan yaml.
	// If included, this will be set on one of the earlier responses indicating
	// the path within the diagnostic prefix where the plan yaml has been placed.
	PlanYamlPath *wrapperspb.StringValue `protobuf:"bytes,6,opt,name=plan_yaml_path,json=planYamlPath,proto3" json:"plan_yaml_path,omitempty"`
	// 0 or more snapshots produced during the computation.
	ComputeSnapshots []*ExecuteResponse_ComputeSnapshot `protobuf:"bytes,7,rep,name=compute_snapshots,json=computeSnapshots,proto3" json:"compute_snapshots,omitempty"`
	// Information on where results are produced to.
	Output *ExecuteResponse_Output `protobuf:"bytes,8,opt,name=output,proto3" json:"output,omitempty"`
}

func (x *ExecuteResponse) Reset() {
	*x = ExecuteResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kaskada_kaskada_v1alpha_compute_service_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExecuteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecuteResponse) ProtoMessage() {}

func (x *ExecuteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kaskada_kaskada_v1alpha_compute_service_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecuteResponse.ProtoReflect.Descriptor instead.
func (*ExecuteResponse) Descriptor() ([]byte, []int) {
	return file_kaskada_kaskada_v1alpha_compute_service_proto_rawDescGZIP(), []int{9}
}

func (x *ExecuteResponse) GetState() LongQueryState {
	if x != nil {
		return x.State
	}
	return LongQueryState_LONG_QUERY_STATE_UNSPECIFIED
}

func (x *ExecuteResponse) GetIsQueryDone() bool {
	if x != nil {
		return x.IsQueryDone
	}
	return false
}

func (x *ExecuteResponse) GetProgress() *ExecuteResponse_ProgressInformation {
	if x != nil {
		return x.Progress
	}
	return nil
}

func (x *ExecuteResponse) GetFlightRecordPath() *wrapperspb.StringValue {
	if x != nil {
		return x.FlightRecordPath
	}
	return nil
}

func (x *ExecuteResponse) GetPlanYamlPath() *wrapperspb.StringValue {
	if x != nil {
		return x.PlanYamlPath
	}
	return nil
}

func (x *ExecuteResponse) GetComputeSnapshots() []*ExecuteResponse_ComputeSnapshot {
	if x != nil {
		return x.ComputeSnapshots
	}
	return nil
}

func (x *ExecuteResponse) GetOutput() *ExecuteResponse_Output {
	if x != nil {
		return x.Output
	}
	return nil
}

type ComputeTable_FileSet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// How this FileSet is sliced.
	// Default (`None`) indicates no slicing needs to be performed.
	SlicePlan *SlicePlan `protobuf:"bytes,1,opt,name=slice_plan,json=slicePlan,proto3" json:"slice_plan,omitempty"`
	// The source(s) of information for the table.
	//
	// Note: If this is empty, the table will be assumed to be empty.
	PreparedFiles []*PreparedFile `protobuf:"bytes,2,rep,name=prepared_files,json=preparedFiles,proto3" json:"prepared_files,omitempty"`
}

func (x *ComputeTable_FileSet) Reset() {
	*x = ComputeTable_FileSet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kaskada_kaskada_v1alpha_compute_service_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ComputeTable_FileSet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ComputeTable_FileSet) ProtoMessage() {}

func (x *ComputeTable_FileSet) ProtoReflect() protoreflect.Message {
	mi := &file_kaskada_kaskada_v1alpha_compute_service_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ComputeTable_FileSet.ProtoReflect.Descriptor instead.
func (*ComputeTable_FileSet) Descriptor() ([]byte, []int) {
	return file_kaskada_kaskada_v1alpha_compute_service_proto_rawDescGZIP(), []int{2, 0}
}

func (x *ComputeTable_FileSet) GetSlicePlan() *SlicePlan {
	if x != nil {
		return x.SlicePlan
	}
	return nil
}

func (x *ComputeTable_FileSet) GetPreparedFiles() []*PreparedFile {
	if x != nil {
		return x.PreparedFiles
	}
	return nil
}

type ExecuteRequest_Limits struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Produces a preview of the data with at least this many rows.
	//
	// Default value (0) indicates all rows should be produced.
	PreviewRows int64 `protobuf:"varint,1,opt,name=preview_rows,json=previewRows,proto3" json:"preview_rows,omitempty"`
}

func (x *ExecuteRequest_Limits) Reset() {
	*x = ExecuteRequest_Limits{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kaskada_kaskada_v1alpha_compute_service_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExecuteRequest_Limits) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecuteRequest_Limits) ProtoMessage() {}

func (x *ExecuteRequest_Limits) ProtoReflect() protoreflect.Message {
	mi := &file_kaskada_kaskada_v1alpha_compute_service_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecuteRequest_Limits.ProtoReflect.Descriptor instead.
func (*ExecuteRequest_Limits) Descriptor() ([]byte, []int) {
	return file_kaskada_kaskada_v1alpha_compute_service_proto_rawDescGZIP(), []int{8, 0}
}

func (x *ExecuteRequest_Limits) GetPreviewRows() int64 {
	if x != nil {
		return x.PreviewRows
	}
	return 0
}

type ExecuteRequest_ComputeSnapshotConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// S3 URI prefix where *all* snapshots should be written.
	// This should be unique to the query hash.
	// Snapshots will be written to this prefix.
	//
	// Example: `s3://<bucket>/wren/v1alpha/computeSnapshots/<snapshotVersion>/<clientId>/<planHash>/data`.
	OutputPrefix string `protobuf:"bytes,1,opt,name=output_prefix,json=outputPrefix,proto3" json:"output_prefix,omitempty"`
	// If set, the S3 URI prefix of a snapshot to resume from.
	//
	// Example: `s3://<bucket>/wren/v1alpha/computeSnapshots/<snapshotVersion>/<clientId>/<planHash>/data/<snapshotId>`.
	ResumeFrom *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=resume_from,json=resumeFrom,proto3" json:"resume_from,omitempty"`
}

func (x *ExecuteRequest_ComputeSnapshotConfig) Reset() {
	*x = ExecuteRequest_ComputeSnapshotConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kaskada_kaskada_v1alpha_compute_service_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExecuteRequest_ComputeSnapshotConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecuteRequest_ComputeSnapshotConfig) ProtoMessage() {}

func (x *ExecuteRequest_ComputeSnapshotConfig) ProtoReflect() protoreflect.Message {
	mi := &file_kaskada_kaskada_v1alpha_compute_service_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecuteRequest_ComputeSnapshotConfig.ProtoReflect.Descriptor instead.
func (*ExecuteRequest_ComputeSnapshotConfig) Descriptor() ([]byte, []int) {
	return file_kaskada_kaskada_v1alpha_compute_service_proto_rawDescGZIP(), []int{8, 1}
}

func (x *ExecuteRequest_ComputeSnapshotConfig) GetOutputPrefix() string {
	if x != nil {
		return x.OutputPrefix
	}
	return ""
}

func (x *ExecuteRequest_ComputeSnapshotConfig) GetResumeFrom() *wrapperspb.StringValue {
	if x != nil {
		return x.ResumeFrom
	}
	return nil
}

// The destination to materialize results to.
type ExecuteRequest_OutputTo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Destination:
	//	*ExecuteRequest_OutputTo_ObjectStore
	//	*ExecuteRequest_OutputTo_Redis
	//	*ExecuteRequest_OutputTo_Pulsar
	Destination isExecuteRequest_OutputTo_Destination `protobuf_oneof:"destination"`
}

func (x *ExecuteRequest_OutputTo) Reset() {
	*x = ExecuteRequest_OutputTo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kaskada_kaskada_v1alpha_compute_service_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExecuteRequest_OutputTo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecuteRequest_OutputTo) ProtoMessage() {}

func (x *ExecuteRequest_OutputTo) ProtoReflect() protoreflect.Message {
	mi := &file_kaskada_kaskada_v1alpha_compute_service_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecuteRequest_OutputTo.ProtoReflect.Descriptor instead.
func (*ExecuteRequest_OutputTo) Descriptor() ([]byte, []int) {
	return file_kaskada_kaskada_v1alpha_compute_service_proto_rawDescGZIP(), []int{8, 2}
}

func (m *ExecuteRequest_OutputTo) GetDestination() isExecuteRequest_OutputTo_Destination {
	if m != nil {
		return m.Destination
	}
	return nil
}

func (x *ExecuteRequest_OutputTo) GetObjectStore() *ObjectStoreDestination {
	if x, ok := x.GetDestination().(*ExecuteRequest_OutputTo_ObjectStore); ok {
		return x.ObjectStore
	}
	return nil
}

func (x *ExecuteRequest_OutputTo) GetRedis() *RedisDestination {
	if x, ok := x.GetDestination().(*ExecuteRequest_OutputTo_Redis); ok {
		return x.Redis
	}
	return nil
}

func (x *ExecuteRequest_OutputTo) GetPulsar() *PulsarDestination {
	if x, ok := x.GetDestination().(*ExecuteRequest_OutputTo_Pulsar); ok {
		return x.Pulsar
	}
	return nil
}

type isExecuteRequest_OutputTo_Destination interface {
	isExecuteRequest_OutputTo_Destination()
}

type ExecuteRequest_OutputTo_ObjectStore struct {
	ObjectStore *ObjectStoreDestination `protobuf:"bytes,1,opt,name=object_store,json=objectStore,proto3,oneof"`
}

type ExecuteRequest_OutputTo_Redis struct {
	Redis *RedisDestination `protobuf:"bytes,2,opt,name=redis,proto3,oneof"`
}

type ExecuteRequest_OutputTo_Pulsar struct {
	Pulsar *PulsarDestination `protobuf:"bytes,3,opt,name=pulsar,proto3,oneof"`
}

func (*ExecuteRequest_OutputTo_ObjectStore) isExecuteRequest_OutputTo_Destination() {}

func (*ExecuteRequest_OutputTo_Redis) isExecuteRequest_OutputTo_Destination() {}

func (*ExecuteRequest_OutputTo_Pulsar) isExecuteRequest_OutputTo_Destination() {}

// Contains information on where results were produced to.
//
// This field will be empty until the query is complete.
type ExecuteResponse_Output struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Output:
	//	*ExecuteResponse_Output_Unspecified
	//	*ExecuteResponse_Output_ObjectStore
	//	*ExecuteResponse_Output_Redis
	//	*ExecuteResponse_Output_Pulsar
	Output isExecuteResponse_Output_Output `protobuf_oneof:"output"`
}

func (x *ExecuteResponse_Output) Reset() {
	*x = ExecuteResponse_Output{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kaskada_kaskada_v1alpha_compute_service_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExecuteResponse_Output) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecuteResponse_Output) ProtoMessage() {}

func (x *ExecuteResponse_Output) ProtoReflect() protoreflect.Message {
	mi := &file_kaskada_kaskada_v1alpha_compute_service_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecuteResponse_Output.ProtoReflect.Descriptor instead.
func (*ExecuteResponse_Output) Descriptor() ([]byte, []int) {
	return file_kaskada_kaskada_v1alpha_compute_service_proto_rawDescGZIP(), []int{9, 0}
}

func (m *ExecuteResponse_Output) GetOutput() isExecuteResponse_Output_Output {
	if m != nil {
		return m.Output
	}
	return nil
}

func (x *ExecuteResponse_Output) GetUnspecified() *UnspecifiedOutput {
	if x, ok := x.GetOutput().(*ExecuteResponse_Output_Unspecified); ok {
		return x.Unspecified
	}
	return nil
}

func (x *ExecuteResponse_Output) GetObjectStore() *ObjectStoreOutput {
	if x, ok := x.GetOutput().(*ExecuteResponse_Output_ObjectStore); ok {
		return x.ObjectStore
	}
	return nil
}

func (x *ExecuteResponse_Output) GetRedis() *RedisOutput {
	if x, ok := x.GetOutput().(*ExecuteResponse_Output_Redis); ok {
		return x.Redis
	}
	return nil
}

func (x *ExecuteResponse_Output) GetPulsar() *PulsarOutput {
	if x, ok := x.GetOutput().(*ExecuteResponse_Output_Pulsar); ok {
		return x.Pulsar
	}
	return nil
}

type isExecuteResponse_Output_Output interface {
	isExecuteResponse_Output_Output()
}

type ExecuteResponse_Output_Unspecified struct {
	Unspecified *UnspecifiedOutput `protobuf:"bytes,1,opt,name=unspecified,proto3,oneof"`
}

type ExecuteResponse_Output_ObjectStore struct {
	ObjectStore *ObjectStoreOutput `protobuf:"bytes,2,opt,name=object_store,json=objectStore,proto3,oneof"`
}

type ExecuteResponse_Output_Redis struct {
	Redis *RedisOutput `protobuf:"bytes,3,opt,name=redis,proto3,oneof"`
}

type ExecuteResponse_Output_Pulsar struct {
	Pulsar *PulsarOutput `protobuf:"bytes,4,opt,name=pulsar,proto3,oneof"`
}

func (*ExecuteResponse_Output_Unspecified) isExecuteResponse_Output_Output() {}

func (*ExecuteResponse_Output_ObjectStore) isExecuteResponse_Output_Output() {}

func (*ExecuteResponse_Output_Redis) isExecuteResponse_Output_Output() {}

func (*ExecuteResponse_Output_Pulsar) isExecuteResponse_Output_Output() {}

type ExecuteResponse_ProgressInformation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Total input rows to be processed by this query.
	TotalInputRows int64 `protobuf:"varint,1,opt,name=total_input_rows,json=totalInputRows,proto3" json:"total_input_rows,omitempty"`
	// Number of input rows processed by this query.
	ProcessedInputRows int64 `protobuf:"varint,2,opt,name=processed_input_rows,json=processedInputRows,proto3" json:"processed_input_rows,omitempty"`
	// Number of rows added to buffers.
	BufferedRows int64 `protobuf:"varint,3,opt,name=buffered_rows,json=bufferedRows,proto3" json:"buffered_rows,omitempty"`
	// Number of buffered rows that have been processed.
	//
	// Note: Not all buffered rows *will* be processed.
	// For example, `shift_until`` with a predicate that is never `true`.
	// This exists to provide an indication of work remaining *after*
	// processed_input_rows == total_input_rows.
	ProcessedBufferedRows int64 `protobuf:"varint,8,opt,name=processed_buffered_rows,json=processedBufferedRows,proto3" json:"processed_buffered_rows,omitempty"`
	// Minimum event time present in input.
	MinEventTime int64 `protobuf:"varint,4,opt,name=min_event_time,json=minEventTime,proto3" json:"min_event_time,omitempty"`
	// Maximum event time present in input.
	MaxEventTime int64 `protobuf:"varint,5,opt,name=max_event_time,json=maxEventTime,proto3" json:"max_event_time,omitempty"`
	// Current event time present in output.
	OutputTime int64 `protobuf:"varint,6,opt,name=output_time,json=outputTime,proto3" json:"output_time,omitempty"`
	// The number of output rows produced so far.
	ProducedOutputRows int64 `protobuf:"varint,7,opt,name=produced_output_rows,json=producedOutputRows,proto3" json:"produced_output_rows,omitempty"`
}

func (x *ExecuteResponse_ProgressInformation) Reset() {
	*x = ExecuteResponse_ProgressInformation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kaskada_kaskada_v1alpha_compute_service_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExecuteResponse_ProgressInformation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecuteResponse_ProgressInformation) ProtoMessage() {}

func (x *ExecuteResponse_ProgressInformation) ProtoReflect() protoreflect.Message {
	mi := &file_kaskada_kaskada_v1alpha_compute_service_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecuteResponse_ProgressInformation.ProtoReflect.Descriptor instead.
func (*ExecuteResponse_ProgressInformation) Descriptor() ([]byte, []int) {
	return file_kaskada_kaskada_v1alpha_compute_service_proto_rawDescGZIP(), []int{9, 1}
}

func (x *ExecuteResponse_ProgressInformation) GetTotalInputRows() int64 {
	if x != nil {
		return x.TotalInputRows
	}
	return 0
}

func (x *ExecuteResponse_ProgressInformation) GetProcessedInputRows() int64 {
	if x != nil {
		return x.ProcessedInputRows
	}
	return 0
}

func (x *ExecuteResponse_ProgressInformation) GetBufferedRows() int64 {
	if x != nil {
		return x.BufferedRows
	}
	return 0
}

func (x *ExecuteResponse_ProgressInformation) GetProcessedBufferedRows() int64 {
	if x != nil {
		return x.ProcessedBufferedRows
	}
	return 0
}

func (x *ExecuteResponse_ProgressInformation) GetMinEventTime() int64 {
	if x != nil {
		return x.MinEventTime
	}
	return 0
}

func (x *ExecuteResponse_ProgressInformation) GetMaxEventTime() int64 {
	if x != nil {
		return x.MaxEventTime
	}
	return 0
}

func (x *ExecuteResponse_ProgressInformation) GetOutputTime() int64 {
	if x != nil {
		return x.OutputTime
	}
	return 0
}

func (x *ExecuteResponse_ProgressInformation) GetProducedOutputRows() int64 {
	if x != nil {
		return x.ProducedOutputRows
	}
	return 0
}

type ExecuteResponse_ComputeSnapshot struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Full S3 URI path to the snapshot.
	// A snapshot is a set of RocksDB files
	// Example: `s3://<bucket>/<request.snapshot.prefix>/<snapshot_id>`
	Path string `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
	// The maximum event time included in the snapshot.
	MaxEventTime *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=max_event_time,json=maxEventTime,proto3" json:"max_event_time,omitempty"`
	// The plan hash the snapshot was taken for.
	PlanHash *PlanHash `protobuf:"bytes,3,opt,name=plan_hash,json=planHash,proto3" json:"plan_hash,omitempty"`
	// The snapshot version
	SnapshotVersion int32 `protobuf:"varint,4,opt,name=snapshot_version,json=snapshotVersion,proto3" json:"snapshot_version,omitempty"`
}

func (x *ExecuteResponse_ComputeSnapshot) Reset() {
	*x = ExecuteResponse_ComputeSnapshot{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kaskada_kaskada_v1alpha_compute_service_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExecuteResponse_ComputeSnapshot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecuteResponse_ComputeSnapshot) ProtoMessage() {}

func (x *ExecuteResponse_ComputeSnapshot) ProtoReflect() protoreflect.Message {
	mi := &file_kaskada_kaskada_v1alpha_compute_service_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecuteResponse_ComputeSnapshot.ProtoReflect.Descriptor instead.
func (*ExecuteResponse_ComputeSnapshot) Descriptor() ([]byte, []int) {
	return file_kaskada_kaskada_v1alpha_compute_service_proto_rawDescGZIP(), []int{9, 2}
}

func (x *ExecuteResponse_ComputeSnapshot) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *ExecuteResponse_ComputeSnapshot) GetMaxEventTime() *timestamppb.Timestamp {
	if x != nil {
		return x.MaxEventTime
	}
	return nil
}

func (x *ExecuteResponse_ComputeSnapshot) GetPlanHash() *PlanHash {
	if x != nil {
		return x.PlanHash
	}
	return nil
}

func (x *ExecuteResponse_ComputeSnapshot) GetSnapshotVersion() int32 {
	if x != nil {
		return x.SnapshotVersion
	}
	return 0
}

var File_kaskada_kaskada_v1alpha_compute_service_proto protoreflect.FileDescriptor

var file_kaskada_kaskada_v1alpha_compute_service_proto_rawDesc = []byte{
	0x0a, 0x2d, 0x6b, 0x61, 0x73, 0x6b, 0x61, 0x64, 0x61, 0x2f, 0x6b, 0x61, 0x73, 0x6b, 0x61, 0x64,
	0x61, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74,
	0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x17, 0x6b, 0x61, 0x73, 0x6b, 0x61, 0x64, 0x61, 0x2e, 0x6b, 0x61, 0x73, 0x6b, 0x61, 0x64, 0x61,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77, 0x72, 0x61, 0x70, 0x70,
	0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x24, 0x6b, 0x61, 0x73, 0x6b, 0x61,
	0x64, 0x61, 0x2f, 0x6b, 0x61, 0x73, 0x6b, 0x61, 0x64, 0x61, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x2a, 0x6b, 0x61, 0x73, 0x6b, 0x61, 0x64, 0x61, 0x2f, 0x6b, 0x61, 0x73, 0x6b, 0x61, 0x64, 0x61,
	0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2f, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2e, 0x6b, 0x61, 0x73,
	0x6b, 0x61, 0x64, 0x61, 0x2f, 0x6b, 0x61, 0x73, 0x6b, 0x61, 0x64, 0x61, 0x2f, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x2f, 0x66, 0x65, 0x6e, 0x6c, 0x5f, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f,
	0x73, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x24, 0x6b, 0x61, 0x73,
	0x6b, 0x61, 0x64, 0x61, 0x2f, 0x6b, 0x61, 0x73, 0x6b, 0x61, 0x64, 0x61, 0x2f, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x2f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x22, 0x6b, 0x61, 0x73, 0x6b, 0x61, 0x64, 0x61, 0x2f, 0x6b, 0x61, 0x73, 0x6b, 0x61,
	0x64, 0x61, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2f, 0x70, 0x6c, 0x61, 0x6e, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x24, 0x6b, 0x61, 0x73, 0x6b, 0x61, 0x64, 0x61, 0x2f, 0x6b,
	0x61, 0x73, 0x6b, 0x61, 0x64, 0x61, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2f, 0x73,
	0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x60, 0x0a, 0x0a, 0x46,
	0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x53, 0x65, 0x74, 0x12, 0x3c, 0x0a, 0x08, 0x66, 0x6f, 0x72,
	0x6d, 0x75, 0x6c, 0x61, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6b, 0x61,
	0x73, 0x6b, 0x61, 0x64, 0x61, 0x2e, 0x6b, 0x61, 0x73, 0x6b, 0x61, 0x64, 0x61, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x46, 0x6f, 0x72, 0x6d, 0x75, 0x6c, 0x61, 0x52, 0x08, 0x66,
	0x6f, 0x72, 0x6d, 0x75, 0x6c, 0x61, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x22, 0x60, 0x0a,
	0x07, 0x46, 0x6f, 0x72, 0x6d, 0x75, 0x6c, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x66, 0x6f, 0x72, 0x6d, 0x75, 0x6c, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x66,
	0x6f, 0x72, 0x6d, 0x75, 0x6c, 0x61, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0e, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22,
	0xf9, 0x02, 0x0a, 0x0c, 0x43, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65,
	0x12, 0x3c, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x24, 0x2e, 0x6b, 0x61, 0x73, 0x6b, 0x61, 0x64, 0x61, 0x2e, 0x6b, 0x61, 0x73, 0x6b, 0x61,
	0x64, 0x61, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x42,
	0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x26, 0x2e, 0x6b, 0x61, 0x73, 0x6b, 0x61, 0x64, 0x61, 0x2e, 0x6b, 0x61, 0x73, 0x6b, 0x61,
	0x64, 0x61, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x12, 0x4a, 0x0a, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x73, 0x65, 0x74, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x6b, 0x61, 0x73, 0x6b, 0x61, 0x64, 0x61, 0x2e,
	0x6b, 0x61, 0x73, 0x6b, 0x61, 0x64, 0x61, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e,
	0x43, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x46, 0x69, 0x6c,
	0x65, 0x53, 0x65, 0x74, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x53, 0x65, 0x74, 0x73, 0x1a, 0x9a,
	0x01, 0x0a, 0x07, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x65, 0x74, 0x12, 0x41, 0x0a, 0x0a, 0x73, 0x6c,
	0x69, 0x63, 0x65, 0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22,
	0x2e, 0x6b, 0x61, 0x73, 0x6b, 0x61, 0x64, 0x61, 0x2e, 0x6b, 0x61, 0x73, 0x6b, 0x61, 0x64, 0x61,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x53, 0x6c, 0x69, 0x63, 0x65, 0x50, 0x6c,
	0x61, 0x6e, 0x52, 0x09, 0x73, 0x6c, 0x69, 0x63, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x12, 0x4c, 0x0a,
	0x0e, 0x70, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x64, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6b, 0x61, 0x73, 0x6b, 0x61, 0x64, 0x61, 0x2e,
	0x6b, 0x61, 0x73, 0x6b, 0x61, 0x64, 0x61, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e,
	0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x0d, 0x70, 0x72,
	0x65, 0x70, 0x61, 0x72, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x22, 0x1e, 0x0a, 0x08, 0x50,
	0x6c, 0x61, 0x6e, 0x48, 0x61, 0x73, 0x68, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x61, 0x73, 0x68, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x68, 0x61, 0x73, 0x68, 0x22, 0x22, 0x0a, 0x20, 0x47,
	0x65, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f,
	0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22,
	0x4e, 0x0a, 0x21, 0x47, 0x65, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x53, 0x6e, 0x61,
	0x70, 0x73, 0x68, 0x6f, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74,
	0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f,
	0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22,
	0xb0, 0x04, 0x0a, 0x0e, 0x43, 0x6f, 0x6d, 0x70, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x3d, 0x0a, 0x06, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6b, 0x61, 0x73, 0x6b, 0x61, 0x64, 0x61, 0x2e, 0x6b, 0x61, 0x73,
	0x6b, 0x61, 0x64, 0x61, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x43, 0x6f, 0x6d,
	0x70, 0x75, 0x74, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x06, 0x74, 0x61, 0x62, 0x6c, 0x65,
	0x73, 0x12, 0x44, 0x0a, 0x0b, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x73, 0x65, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6b, 0x61, 0x73, 0x6b, 0x61, 0x64, 0x61,
	0x2e, 0x6b, 0x61, 0x73, 0x6b, 0x61, 0x64, 0x61, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x2e, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x53, 0x65, 0x74, 0x52, 0x0a, 0x66, 0x65, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x53, 0x65, 0x74, 0x12, 0x4a, 0x0a, 0x0d, 0x73, 0x6c, 0x69, 0x63, 0x65,
	0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25,
	0x2e, 0x6b, 0x61, 0x73, 0x6b, 0x61, 0x64, 0x61, 0x2e, 0x6b, 0x61, 0x73, 0x6b, 0x61, 0x64, 0x61,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x53, 0x6c, 0x69, 0x63, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0c, 0x73, 0x6c, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x5f, 0x0a, 0x0f, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x5f, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x36, 0x2e, 0x6b,
	0x61, 0x73, 0x6b, 0x61, 0x64, 0x61, 0x2e, 0x6b, 0x61, 0x73, 0x6b, 0x61, 0x64, 0x61, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x69, 0x6c, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x4b, 0x69, 0x6e, 0x64, 0x52, 0x0e, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x4b, 0x69, 0x6e, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65,
	0x6e, 0x74, 0x61, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x65, 0x78, 0x70, 0x65,
	0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x12, 0x5a, 0x0a, 0x13, 0x70, 0x65, 0x72, 0x5f,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x62, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2a, 0x2e, 0x6b, 0x61, 0x73, 0x6b, 0x61, 0x64, 0x61, 0x2e,
	0x6b, 0x61, 0x73, 0x6b, 0x61, 0x64, 0x61, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e,
	0x50, 0x65, 0x72, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f,
	0x72, 0x52, 0x11, 0x70, 0x65, 0x72, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x42, 0x65, 0x68, 0x61,
	0x76, 0x69, 0x6f, 0x72, 0x22, 0x6c, 0x0a, 0x0e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x4b, 0x69, 0x6e, 0x64, 0x12, 0x1f, 0x0a, 0x1b, 0x45, 0x58, 0x50, 0x52, 0x45, 0x53,
	0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43,
	0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1c, 0x0a, 0x18, 0x45, 0x58, 0x50, 0x52, 0x45,
	0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4c,
	0x45, 0x54, 0x45, 0x10, 0x01, 0x12, 0x1b, 0x0a, 0x17, 0x45, 0x58, 0x50, 0x52, 0x45, 0x53, 0x53,
	0x49, 0x4f, 0x4e, 0x5f, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x46, 0x4f, 0x52, 0x4d, 0x55, 0x4c, 0x41,
	0x10, 0x02, 0x22, 0xe0, 0x03, 0x0a, 0x0f, 0x43, 0x6f, 0x6d, 0x70, 0x69, 0x6c, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e,
	0x67, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x53, 0x0a, 0x10, 0x66,
	0x65, 0x6e, 0x6c, 0x5f, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x6b, 0x61, 0x73, 0x6b, 0x61, 0x64, 0x61, 0x2e,
	0x6b, 0x61, 0x73, 0x6b, 0x61, 0x64, 0x61, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e,
	0x46, 0x65, 0x6e, 0x6c, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x73, 0x52,
	0x0f, 0x66, 0x65, 0x6e, 0x6c, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x73,
	0x12, 0x38, 0x0a, 0x04, 0x70, 0x6c, 0x61, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24,
	0x2e, 0x6b, 0x61, 0x73, 0x6b, 0x61, 0x64, 0x61, 0x2e, 0x6b, 0x61, 0x73, 0x6b, 0x61, 0x64, 0x61,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65,
	0x50, 0x6c, 0x61, 0x6e, 0x52, 0x04, 0x70, 0x6c, 0x61, 0x6e, 0x12, 0x42, 0x0a, 0x0b, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x21, 0x2e, 0x6b, 0x61, 0x73, 0x6b, 0x61, 0x64, 0x61, 0x2e, 0x6b, 0x61, 0x73, 0x6b, 0x61, 0x64,
	0x61, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x0a, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1d,
	0x0a, 0x0a, 0x66, 0x72, 0x65, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x09, 0x66, 0x72, 0x65, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x45, 0x0a,
	0x0c, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x73, 0x6c, 0x69, 0x63, 0x65, 0x73, 0x18, 0x06, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6b, 0x61, 0x73, 0x6b, 0x61, 0x64, 0x61, 0x2e, 0x6b, 0x61,
	0x73, 0x6b, 0x61, 0x64, 0x61, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x53, 0x6c,
	0x69, 0x63, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x0b, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x6c,
	0x69, 0x63, 0x65, 0x73, 0x12, 0x2f, 0x0a, 0x13, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x61, 0x6c, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x12, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x45, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x3e, 0x0a, 0x09, 0x70, 0x6c, 0x61, 0x6e, 0x5f, 0x68, 0x61,
	0x73, 0x68, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6b, 0x61, 0x73, 0x6b, 0x61,
	0x64, 0x61, 0x2e, 0x6b, 0x61, 0x73, 0x6b, 0x61, 0x64, 0x61, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x2e, 0x50, 0x6c, 0x61, 0x6e, 0x48, 0x61, 0x73, 0x68, 0x52, 0x08, 0x70, 0x6c, 0x61,
	0x6e, 0x48, 0x61, 0x73, 0x68, 0x22, 0xcb, 0x07, 0x0a, 0x0e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x38, 0x0a, 0x04, 0x70, 0x6c, 0x61, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6b, 0x61, 0x73, 0x6b, 0x61, 0x64, 0x61,
	0x2e, 0x6b, 0x61, 0x73, 0x6b, 0x61, 0x64, 0x61, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x04, 0x70, 0x6c,
	0x61, 0x6e, 0x12, 0x3d, 0x0a, 0x06, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6b, 0x61, 0x73, 0x6b, 0x61, 0x64, 0x61, 0x2e, 0x6b, 0x61, 0x73,
	0x6b, 0x61, 0x64, 0x61, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x43, 0x6f, 0x6d,
	0x70, 0x75, 0x74, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x06, 0x74, 0x61, 0x62, 0x6c, 0x65,
	0x73, 0x12, 0x4d, 0x0a, 0x09, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x74, 0x6f, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x6b, 0x61, 0x73, 0x6b, 0x61, 0x64, 0x61, 0x2e, 0x6b,
	0x61, 0x73, 0x6b, 0x61, 0x64, 0x61, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x45,
	0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x4f, 0x75,
	0x74, 0x70, 0x75, 0x74, 0x54, 0x6f, 0x52, 0x08, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x54, 0x6f,
	0x12, 0x46, 0x0a, 0x06, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2e, 0x2e, 0x6b, 0x61, 0x73, 0x6b, 0x61, 0x64, 0x61, 0x2e, 0x6b, 0x61, 0x73, 0x6b, 0x61,
	0x64, 0x61, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x75,
	0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x73,
	0x52, 0x06, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x12, 0x75, 0x0a, 0x17, 0x63, 0x6f, 0x6d, 0x70,
	0x75, 0x74, 0x65, 0x5f, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x5f, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x6b, 0x61, 0x73, 0x6b,
	0x61, 0x64, 0x61, 0x2e, 0x6b, 0x61, 0x73, 0x6b, 0x61, 0x64, 0x61, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68,
	0x6f, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x15, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74,
	0x65, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12,
	0x3f, 0x0a, 0x0d, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x5f, 0x73, 0x69, 0x6e, 0x63, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x0c, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x53, 0x69, 0x6e, 0x63, 0x65,
	0x12, 0x46, 0x0a, 0x11, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0f, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x1a, 0x2b, 0x0a, 0x06, 0x4c, 0x69, 0x6d, 0x69,
	0x74, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x72, 0x6f,
	0x77, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x70, 0x72, 0x65, 0x76, 0x69, 0x65,
	0x77, 0x52, 0x6f, 0x77, 0x73, 0x1a, 0x7b, 0x0a, 0x15, 0x43, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65,
	0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x23,
	0x0a, 0x0d, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x50, 0x72, 0x65,
	0x66, 0x69, 0x78, 0x12, 0x3d, 0x0a, 0x0b, 0x72, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x5f, 0x66, 0x72,
	0x6f, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a, 0x72, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x46, 0x72,
	0x6f, 0x6d, 0x1a, 0xf8, 0x01, 0x0a, 0x08, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x54, 0x6f, 0x12,
	0x54, 0x0a, 0x0c, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x6b, 0x61, 0x73, 0x6b, 0x61, 0x64, 0x61, 0x2e,
	0x6b, 0x61, 0x73, 0x6b, 0x61, 0x64, 0x61, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e,
	0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x44, 0x65, 0x73, 0x74, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x0b, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x53, 0x74, 0x6f, 0x72, 0x65, 0x12, 0x41, 0x0a, 0x05, 0x72, 0x65, 0x64, 0x69, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x6b, 0x61, 0x73, 0x6b, 0x61, 0x64, 0x61, 0x2e, 0x6b,
	0x61, 0x73, 0x6b, 0x61, 0x64, 0x61, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x52,
	0x65, 0x64, 0x69, 0x73, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48,
	0x00, 0x52, 0x05, 0x72, 0x65, 0x64, 0x69, 0x73, 0x12, 0x44, 0x0a, 0x06, 0x70, 0x75, 0x6c, 0x73,
	0x61, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x6b, 0x61, 0x73, 0x6b, 0x61,
	0x64, 0x61, 0x2e, 0x6b, 0x61, 0x73, 0x6b, 0x61, 0x64, 0x61, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x2e, 0x50, 0x75, 0x6c, 0x73, 0x61, 0x72, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x06, 0x70, 0x75, 0x6c, 0x73, 0x61, 0x72, 0x42, 0x0d,
	0x0a, 0x0b, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4a, 0x04, 0x08,
	0x09, 0x10, 0x0a, 0x22, 0x8e, 0x0b, 0x0a, 0x0f, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3d, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x6b, 0x61, 0x73, 0x6b, 0x61, 0x64, 0x61,
	0x2e, 0x6b, 0x61, 0x73, 0x6b, 0x61, 0x64, 0x61, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x2e, 0x4c, 0x6f, 0x6e, 0x67, 0x51, 0x75, 0x65, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52,
	0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x22, 0x0a, 0x0d, 0x69, 0x73, 0x5f, 0x71, 0x75, 0x65,
	0x72, 0x79, 0x5f, 0x64, 0x6f, 0x6e, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69,
	0x73, 0x51, 0x75, 0x65, 0x72, 0x79, 0x44, 0x6f, 0x6e, 0x65, 0x12, 0x58, 0x0a, 0x08, 0x70, 0x72,
	0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x6b,
	0x61, 0x73, 0x6b, 0x61, 0x64, 0x61, 0x2e, 0x6b, 0x61, 0x73, 0x6b, 0x61, 0x64, 0x61, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x49,
	0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x67,
	0x72, 0x65, 0x73, 0x73, 0x12, 0x4a, 0x0a, 0x12, 0x66, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x72,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x10,
	0x66, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x50, 0x61, 0x74, 0x68,
	0x12, 0x42, 0x0a, 0x0e, 0x70, 0x6c, 0x61, 0x6e, 0x5f, 0x79, 0x61, 0x6d, 0x6c, 0x5f, 0x70, 0x61,
	0x74, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c, 0x70, 0x6c, 0x61, 0x6e, 0x59, 0x61, 0x6d, 0x6c,
	0x50, 0x61, 0x74, 0x68, 0x12, 0x65, 0x0a, 0x11, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x5f,
	0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x38, 0x2e, 0x6b, 0x61, 0x73, 0x6b, 0x61, 0x64, 0x61, 0x2e, 0x6b, 0x61, 0x73, 0x6b, 0x61, 0x64,
	0x61, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x75, 0x74,
	0x65, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x52, 0x10, 0x63, 0x6f, 0x6d, 0x70, 0x75,
	0x74, 0x65, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x73, 0x12, 0x47, 0x0a, 0x06, 0x6f,
	0x75, 0x74, 0x70, 0x75, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x6b, 0x61,
	0x73, 0x6b, 0x61, 0x64, 0x61, 0x2e, 0x6b, 0x61, 0x73, 0x6b, 0x61, 0x64, 0x61, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x52, 0x06, 0x6f, 0x75,
	0x74, 0x70, 0x75, 0x74, 0x1a, 0xb2, 0x02, 0x0a, 0x06, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x12,
	0x4e, 0x0a, 0x0b, 0x75, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x6b, 0x61, 0x73, 0x6b, 0x61, 0x64, 0x61, 0x2e, 0x6b,
	0x61, 0x73, 0x6b, 0x61, 0x64, 0x61, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x55,
	0x6e, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74,
	0x48, 0x00, 0x52, 0x0b, 0x75, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x12,
	0x4f, 0x0a, 0x0c, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x6b, 0x61, 0x73, 0x6b, 0x61, 0x64, 0x61, 0x2e,
	0x6b, 0x61, 0x73, 0x6b, 0x61, 0x64, 0x61, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e,
	0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x4f, 0x75, 0x74, 0x70, 0x75,
	0x74, 0x48, 0x00, 0x52, 0x0b, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x65,
	0x12, 0x3c, 0x0a, 0x05, 0x72, 0x65, 0x64, 0x69, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x24, 0x2e, 0x6b, 0x61, 0x73, 0x6b, 0x61, 0x64, 0x61, 0x2e, 0x6b, 0x61, 0x73, 0x6b, 0x61, 0x64,
	0x61, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x52, 0x65, 0x64, 0x69, 0x73, 0x4f,
	0x75, 0x74, 0x70, 0x75, 0x74, 0x48, 0x00, 0x52, 0x05, 0x72, 0x65, 0x64, 0x69, 0x73, 0x12, 0x3f,
	0x0a, 0x06, 0x70, 0x75, 0x6c, 0x73, 0x61, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25,
	0x2e, 0x6b, 0x61, 0x73, 0x6b, 0x61, 0x64, 0x61, 0x2e, 0x6b, 0x61, 0x73, 0x6b, 0x61, 0x64, 0x61,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x50, 0x75, 0x6c, 0x73, 0x61, 0x72, 0x4f,
	0x75, 0x74, 0x70, 0x75, 0x74, 0x48, 0x00, 0x52, 0x06, 0x70, 0x75, 0x6c, 0x73, 0x61, 0x72, 0x42,
	0x08, 0x0a, 0x06, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x1a, 0xed, 0x02, 0x0a, 0x13, 0x50, 0x72,
	0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x28, 0x0a, 0x10, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x70, 0x75, 0x74,
	0x5f, 0x72, 0x6f, 0x77, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x52, 0x6f, 0x77, 0x73, 0x12, 0x30, 0x0a, 0x14, 0x70,
	0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x64, 0x5f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x72,
	0x6f, 0x77, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x70, 0x72, 0x6f, 0x63, 0x65,
	0x73, 0x73, 0x65, 0x64, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x52, 0x6f, 0x77, 0x73, 0x12, 0x23, 0x0a,
	0x0d, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x65, 0x64, 0x5f, 0x72, 0x6f, 0x77, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x65, 0x64, 0x52, 0x6f,
	0x77, 0x73, 0x12, 0x36, 0x0a, 0x17, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x64, 0x5f,
	0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x65, 0x64, 0x5f, 0x72, 0x6f, 0x77, 0x73, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x15, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x64, 0x42, 0x75,
	0x66, 0x66, 0x65, 0x72, 0x65, 0x64, 0x52, 0x6f, 0x77, 0x73, 0x12, 0x24, 0x0a, 0x0e, 0x6d, 0x69,
	0x6e, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0c, 0x6d, 0x69, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x24, 0x0a, 0x0e, 0x6d, 0x61, 0x78, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x6d, 0x61, 0x78, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x6f, 0x75, 0x74,
	0x70, 0x75, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x70, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x65, 0x64, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x72, 0x6f, 0x77, 0x73, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x64, 0x4f,
	0x75, 0x74, 0x70, 0x75, 0x74, 0x52, 0x6f, 0x77, 0x73, 0x1a, 0xd2, 0x01, 0x0a, 0x0f, 0x43, 0x6f,
	0x6d, 0x70, 0x75, 0x74, 0x65, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x12, 0x12, 0x0a,
	0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74,
	0x68, 0x12, 0x40, 0x0a, 0x0e, 0x6d, 0x61, 0x78, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0c, 0x6d, 0x61, 0x78, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x3e, 0x0a, 0x09, 0x70, 0x6c, 0x61, 0x6e, 0x5f, 0x68, 0x61, 0x73, 0x68,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6b, 0x61, 0x73, 0x6b, 0x61, 0x64, 0x61,
	0x2e, 0x6b, 0x61, 0x73, 0x6b, 0x61, 0x64, 0x61, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x2e, 0x50, 0x6c, 0x61, 0x6e, 0x48, 0x61, 0x73, 0x68, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x6e, 0x48,
	0x61, 0x73, 0x68, 0x12, 0x29, 0x0a, 0x10, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x5f,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x73,
	0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x4a, 0x04,
	0x08, 0x04, 0x10, 0x05, 0x2a, 0x8a, 0x01, 0x0a, 0x0e, 0x4c, 0x6f, 0x6e, 0x67, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x20, 0x0a, 0x1c, 0x4c, 0x4f, 0x4e, 0x47, 0x5f,
	0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50,
	0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1c, 0x0a, 0x18, 0x4c, 0x4f, 0x4e,
	0x47, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x49, 0x4e,
	0x49, 0x54, 0x49, 0x41, 0x4c, 0x10, 0x01, 0x12, 0x1c, 0x0a, 0x18, 0x4c, 0x4f, 0x4e, 0x47, 0x5f,
	0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x52, 0x55, 0x4e, 0x4e,
	0x49, 0x4e, 0x47, 0x10, 0x02, 0x12, 0x1a, 0x0a, 0x16, 0x4c, 0x4f, 0x4e, 0x47, 0x5f, 0x51, 0x55,
	0x45, 0x52, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x46, 0x49, 0x4e, 0x41, 0x4c, 0x10,
	0x03, 0x32, 0xe3, 0x02, 0x0a, 0x0e, 0x43, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x12, 0x5c, 0x0a, 0x07, 0x43, 0x6f, 0x6d, 0x70, 0x69, 0x6c, 0x65, 0x12,
	0x27, 0x2e, 0x6b, 0x61, 0x73, 0x6b, 0x61, 0x64, 0x61, 0x2e, 0x6b, 0x61, 0x73, 0x6b, 0x61, 0x64,
	0x61, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x69, 0x6c,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x6b, 0x61, 0x73, 0x6b, 0x61,
	0x64, 0x61, 0x2e, 0x6b, 0x61, 0x73, 0x6b, 0x61, 0x64, 0x61, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x5e, 0x0a, 0x07, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x12, 0x27, 0x2e,
	0x6b, 0x61, 0x73, 0x6b, 0x61, 0x64, 0x61, 0x2e, 0x6b, 0x61, 0x73, 0x6b, 0x61, 0x64, 0x61, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x6b, 0x61, 0x73, 0x6b, 0x61, 0x64, 0x61,
	0x2e, 0x6b, 0x61, 0x73, 0x6b, 0x61, 0x64, 0x61, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x2e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x30, 0x01, 0x12, 0x92, 0x01, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x74, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x39, 0x2e, 0x6b, 0x61, 0x73, 0x6b, 0x61, 0x64, 0x61, 0x2e, 0x6b, 0x61, 0x73, 0x6b, 0x61,
	0x64, 0x61, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x74, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3a, 0x2e, 0x6b, 0x61,
	0x73, 0x6b, 0x61, 0x64, 0x61, 0x2e, 0x6b, 0x61, 0x73, 0x6b, 0x61, 0x64, 0x61, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74,
	0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0xff, 0x01, 0x0a, 0x1b, 0x63, 0x6f, 0x6d, 0x2e,
	0x6b, 0x61, 0x73, 0x6b, 0x61, 0x64, 0x61, 0x2e, 0x6b, 0x61, 0x73, 0x6b, 0x61, 0x64, 0x61, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x42, 0x13, 0x43, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x4d,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6b, 0x61, 0x73, 0x6b, 0x61,
	0x64, 0x61, 0x2f, 0x6b, 0x61, 0x73, 0x6b, 0x61, 0x64, 0x61, 0x2d, 0x61, 0x69, 0x2f, 0x77, 0x72,
	0x65, 0x6e, 0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x6b, 0x61, 0x73, 0x6b, 0x61, 0x64, 0x61, 0x2f, 0x6b,
	0x61, 0x73, 0x6b, 0x61, 0x64, 0x61, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x3b, 0x6b,
	0x61, 0x73, 0x6b, 0x61, 0x64, 0x61, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0xa2, 0x02, 0x03,
	0x4b, 0x4b, 0x58, 0xaa, 0x02, 0x17, 0x4b, 0x61, 0x73, 0x6b, 0x61, 0x64, 0x61, 0x2e, 0x4b, 0x61,
	0x73, 0x6b, 0x61, 0x64, 0x61, 0x2e, 0x56, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0xca, 0x02, 0x17,
	0x4b, 0x61, 0x73, 0x6b, 0x61, 0x64, 0x61, 0x5c, 0x4b, 0x61, 0x73, 0x6b, 0x61, 0x64, 0x61, 0x5c,
	0x56, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0xe2, 0x02, 0x23, 0x4b, 0x61, 0x73, 0x6b, 0x61, 0x64,
	0x61, 0x5c, 0x4b, 0x61, 0x73, 0x6b, 0x61, 0x64, 0x61, 0x5c, 0x56, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x19,
	0x4b, 0x61, 0x73, 0x6b, 0x61, 0x64, 0x61, 0x3a, 0x3a, 0x4b, 0x61, 0x73, 0x6b, 0x61, 0x64, 0x61,
	0x3a, 0x3a, 0x56, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_kaskada_kaskada_v1alpha_compute_service_proto_rawDescOnce sync.Once
	file_kaskada_kaskada_v1alpha_compute_service_proto_rawDescData = file_kaskada_kaskada_v1alpha_compute_service_proto_rawDesc
)

func file_kaskada_kaskada_v1alpha_compute_service_proto_rawDescGZIP() []byte {
	file_kaskada_kaskada_v1alpha_compute_service_proto_rawDescOnce.Do(func() {
		file_kaskada_kaskada_v1alpha_compute_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_kaskada_kaskada_v1alpha_compute_service_proto_rawDescData)
	})
	return file_kaskada_kaskada_v1alpha_compute_service_proto_rawDescData
}

var file_kaskada_kaskada_v1alpha_compute_service_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_kaskada_kaskada_v1alpha_compute_service_proto_msgTypes = make([]protoimpl.MessageInfo, 17)
var file_kaskada_kaskada_v1alpha_compute_service_proto_goTypes = []interface{}{
	(LongQueryState)(0),                          // 0: kaskada.kaskada.v1alpha.LongQueryState
	(CompileRequest_ExpressionKind)(0),           // 1: kaskada.kaskada.v1alpha.CompileRequest.ExpressionKind
	(*FeatureSet)(nil),                           // 2: kaskada.kaskada.v1alpha.FeatureSet
	(*Formula)(nil),                              // 3: kaskada.kaskada.v1alpha.Formula
	(*ComputeTable)(nil),                         // 4: kaskada.kaskada.v1alpha.ComputeTable
	(*PlanHash)(nil),                             // 5: kaskada.kaskada.v1alpha.PlanHash
	(*GetCurrentSnapshotVersionRequest)(nil),     // 6: kaskada.kaskada.v1alpha.GetCurrentSnapshotVersionRequest
	(*GetCurrentSnapshotVersionResponse)(nil),    // 7: kaskada.kaskada.v1alpha.GetCurrentSnapshotVersionResponse
	(*CompileRequest)(nil),                       // 8: kaskada.kaskada.v1alpha.CompileRequest
	(*CompileResponse)(nil),                      // 9: kaskada.kaskada.v1alpha.CompileResponse
	(*ExecuteRequest)(nil),                       // 10: kaskada.kaskada.v1alpha.ExecuteRequest
	(*ExecuteResponse)(nil),                      // 11: kaskada.kaskada.v1alpha.ExecuteResponse
	(*ComputeTable_FileSet)(nil),                 // 12: kaskada.kaskada.v1alpha.ComputeTable.FileSet
	(*ExecuteRequest_Limits)(nil),                // 13: kaskada.kaskada.v1alpha.ExecuteRequest.Limits
	(*ExecuteRequest_ComputeSnapshotConfig)(nil), // 14: kaskada.kaskada.v1alpha.ExecuteRequest.ComputeSnapshotConfig
	(*ExecuteRequest_OutputTo)(nil),              // 15: kaskada.kaskada.v1alpha.ExecuteRequest.OutputTo
	(*ExecuteResponse_Output)(nil),               // 16: kaskada.kaskada.v1alpha.ExecuteResponse.Output
	(*ExecuteResponse_ProgressInformation)(nil),  // 17: kaskada.kaskada.v1alpha.ExecuteResponse.ProgressInformation
	(*ExecuteResponse_ComputeSnapshot)(nil),      // 18: kaskada.kaskada.v1alpha.ExecuteResponse.ComputeSnapshot
	(*TableConfig)(nil),                          // 19: kaskada.kaskada.v1alpha.TableConfig
	(*TableMetadata)(nil),                        // 20: kaskada.kaskada.v1alpha.TableMetadata
	(*SliceRequest)(nil),                         // 21: kaskada.kaskada.v1alpha.SliceRequest
	(PerEntityBehavior)(0),                       // 22: kaskada.kaskada.v1alpha.PerEntityBehavior
	(*FenlDiagnostics)(nil),                      // 23: kaskada.kaskada.v1alpha.FenlDiagnostics
	(*ComputePlan)(nil),                          // 24: kaskada.kaskada.v1alpha.ComputePlan
	(*DataType)(nil),                             // 25: kaskada.kaskada.v1alpha.DataType
	(*SlicePlan)(nil),                            // 26: kaskada.kaskada.v1alpha.SlicePlan
	(*timestamppb.Timestamp)(nil),                // 27: google.protobuf.Timestamp
	(*wrapperspb.StringValue)(nil),               // 28: google.protobuf.StringValue
	(*PreparedFile)(nil),                         // 29: kaskada.kaskada.v1alpha.PreparedFile
	(*ObjectStoreDestination)(nil),               // 30: kaskada.kaskada.v1alpha.ObjectStoreDestination
	(*RedisDestination)(nil),                     // 31: kaskada.kaskada.v1alpha.RedisDestination
	(*PulsarDestination)(nil),                    // 32: kaskada.kaskada.v1alpha.PulsarDestination
	(*UnspecifiedOutput)(nil),                    // 33: kaskada.kaskada.v1alpha.UnspecifiedOutput
	(*ObjectStoreOutput)(nil),                    // 34: kaskada.kaskada.v1alpha.ObjectStoreOutput
	(*RedisOutput)(nil),                          // 35: kaskada.kaskada.v1alpha.RedisOutput
	(*PulsarOutput)(nil),                         // 36: kaskada.kaskada.v1alpha.PulsarOutput
}
var file_kaskada_kaskada_v1alpha_compute_service_proto_depIdxs = []int32{
	3,  // 0: kaskada.kaskada.v1alpha.FeatureSet.formulas:type_name -> kaskada.kaskada.v1alpha.Formula
	19, // 1: kaskada.kaskada.v1alpha.ComputeTable.config:type_name -> kaskada.kaskada.v1alpha.TableConfig
	20, // 2: kaskada.kaskada.v1alpha.ComputeTable.metadata:type_name -> kaskada.kaskada.v1alpha.TableMetadata
	12, // 3: kaskada.kaskada.v1alpha.ComputeTable.file_sets:type_name -> kaskada.kaskada.v1alpha.ComputeTable.FileSet
	4,  // 4: kaskada.kaskada.v1alpha.CompileRequest.tables:type_name -> kaskada.kaskada.v1alpha.ComputeTable
	2,  // 5: kaskada.kaskada.v1alpha.CompileRequest.feature_set:type_name -> kaskada.kaskada.v1alpha.FeatureSet
	21, // 6: kaskada.kaskada.v1alpha.CompileRequest.slice_request:type_name -> kaskada.kaskada.v1alpha.SliceRequest
	1,  // 7: kaskada.kaskada.v1alpha.CompileRequest.expression_kind:type_name -> kaskada.kaskada.v1alpha.CompileRequest.ExpressionKind
	22, // 8: kaskada.kaskada.v1alpha.CompileRequest.per_entity_behavior:type_name -> kaskada.kaskada.v1alpha.PerEntityBehavior
	23, // 9: kaskada.kaskada.v1alpha.CompileResponse.fenl_diagnostics:type_name -> kaskada.kaskada.v1alpha.FenlDiagnostics
	24, // 10: kaskada.kaskada.v1alpha.CompileResponse.plan:type_name -> kaskada.kaskada.v1alpha.ComputePlan
	25, // 11: kaskada.kaskada.v1alpha.CompileResponse.result_type:type_name -> kaskada.kaskada.v1alpha.DataType
	26, // 12: kaskada.kaskada.v1alpha.CompileResponse.table_slices:type_name -> kaskada.kaskada.v1alpha.SlicePlan
	5,  // 13: kaskada.kaskada.v1alpha.CompileResponse.plan_hash:type_name -> kaskada.kaskada.v1alpha.PlanHash
	24, // 14: kaskada.kaskada.v1alpha.ExecuteRequest.plan:type_name -> kaskada.kaskada.v1alpha.ComputePlan
	4,  // 15: kaskada.kaskada.v1alpha.ExecuteRequest.tables:type_name -> kaskada.kaskada.v1alpha.ComputeTable
	15, // 16: kaskada.kaskada.v1alpha.ExecuteRequest.output_to:type_name -> kaskada.kaskada.v1alpha.ExecuteRequest.OutputTo
	13, // 17: kaskada.kaskada.v1alpha.ExecuteRequest.limits:type_name -> kaskada.kaskada.v1alpha.ExecuteRequest.Limits
	14, // 18: kaskada.kaskada.v1alpha.ExecuteRequest.compute_snapshot_config:type_name -> kaskada.kaskada.v1alpha.ExecuteRequest.ComputeSnapshotConfig
	27, // 19: kaskada.kaskada.v1alpha.ExecuteRequest.changed_since:type_name -> google.protobuf.Timestamp
	27, // 20: kaskada.kaskada.v1alpha.ExecuteRequest.final_result_time:type_name -> google.protobuf.Timestamp
	0,  // 21: kaskada.kaskada.v1alpha.ExecuteResponse.state:type_name -> kaskada.kaskada.v1alpha.LongQueryState
	17, // 22: kaskada.kaskada.v1alpha.ExecuteResponse.progress:type_name -> kaskada.kaskada.v1alpha.ExecuteResponse.ProgressInformation
	28, // 23: kaskada.kaskada.v1alpha.ExecuteResponse.flight_record_path:type_name -> google.protobuf.StringValue
	28, // 24: kaskada.kaskada.v1alpha.ExecuteResponse.plan_yaml_path:type_name -> google.protobuf.StringValue
	18, // 25: kaskada.kaskada.v1alpha.ExecuteResponse.compute_snapshots:type_name -> kaskada.kaskada.v1alpha.ExecuteResponse.ComputeSnapshot
	16, // 26: kaskada.kaskada.v1alpha.ExecuteResponse.output:type_name -> kaskada.kaskada.v1alpha.ExecuteResponse.Output
	26, // 27: kaskada.kaskada.v1alpha.ComputeTable.FileSet.slice_plan:type_name -> kaskada.kaskada.v1alpha.SlicePlan
	29, // 28: kaskada.kaskada.v1alpha.ComputeTable.FileSet.prepared_files:type_name -> kaskada.kaskada.v1alpha.PreparedFile
	28, // 29: kaskada.kaskada.v1alpha.ExecuteRequest.ComputeSnapshotConfig.resume_from:type_name -> google.protobuf.StringValue
	30, // 30: kaskada.kaskada.v1alpha.ExecuteRequest.OutputTo.object_store:type_name -> kaskada.kaskada.v1alpha.ObjectStoreDestination
	31, // 31: kaskada.kaskada.v1alpha.ExecuteRequest.OutputTo.redis:type_name -> kaskada.kaskada.v1alpha.RedisDestination
	32, // 32: kaskada.kaskada.v1alpha.ExecuteRequest.OutputTo.pulsar:type_name -> kaskada.kaskada.v1alpha.PulsarDestination
	33, // 33: kaskada.kaskada.v1alpha.ExecuteResponse.Output.unspecified:type_name -> kaskada.kaskada.v1alpha.UnspecifiedOutput
	34, // 34: kaskada.kaskada.v1alpha.ExecuteResponse.Output.object_store:type_name -> kaskada.kaskada.v1alpha.ObjectStoreOutput
	35, // 35: kaskada.kaskada.v1alpha.ExecuteResponse.Output.redis:type_name -> kaskada.kaskada.v1alpha.RedisOutput
	36, // 36: kaskada.kaskada.v1alpha.ExecuteResponse.Output.pulsar:type_name -> kaskada.kaskada.v1alpha.PulsarOutput
	27, // 37: kaskada.kaskada.v1alpha.ExecuteResponse.ComputeSnapshot.max_event_time:type_name -> google.protobuf.Timestamp
	5,  // 38: kaskada.kaskada.v1alpha.ExecuteResponse.ComputeSnapshot.plan_hash:type_name -> kaskada.kaskada.v1alpha.PlanHash
	8,  // 39: kaskada.kaskada.v1alpha.ComputeService.Compile:input_type -> kaskada.kaskada.v1alpha.CompileRequest
	10, // 40: kaskada.kaskada.v1alpha.ComputeService.Execute:input_type -> kaskada.kaskada.v1alpha.ExecuteRequest
	6,  // 41: kaskada.kaskada.v1alpha.ComputeService.GetCurrentSnapshotVersion:input_type -> kaskada.kaskada.v1alpha.GetCurrentSnapshotVersionRequest
	9,  // 42: kaskada.kaskada.v1alpha.ComputeService.Compile:output_type -> kaskada.kaskada.v1alpha.CompileResponse
	11, // 43: kaskada.kaskada.v1alpha.ComputeService.Execute:output_type -> kaskada.kaskada.v1alpha.ExecuteResponse
	7,  // 44: kaskada.kaskada.v1alpha.ComputeService.GetCurrentSnapshotVersion:output_type -> kaskada.kaskada.v1alpha.GetCurrentSnapshotVersionResponse
	42, // [42:45] is the sub-list for method output_type
	39, // [39:42] is the sub-list for method input_type
	39, // [39:39] is the sub-list for extension type_name
	39, // [39:39] is the sub-list for extension extendee
	0,  // [0:39] is the sub-list for field type_name
}

func init() { file_kaskada_kaskada_v1alpha_compute_service_proto_init() }
func file_kaskada_kaskada_v1alpha_compute_service_proto_init() {
	if File_kaskada_kaskada_v1alpha_compute_service_proto != nil {
		return
	}
	file_kaskada_kaskada_v1alpha_common_proto_init()
	file_kaskada_kaskada_v1alpha_destinations_proto_init()
	file_kaskada_kaskada_v1alpha_fenl_diagnostics_proto_init()
	file_kaskada_kaskada_v1alpha_output_proto_init()
	file_kaskada_kaskada_v1alpha_plan_proto_init()
	file_kaskada_kaskada_v1alpha_schema_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_kaskada_kaskada_v1alpha_compute_service_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FeatureSet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kaskada_kaskada_v1alpha_compute_service_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Formula); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kaskada_kaskada_v1alpha_compute_service_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ComputeTable); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kaskada_kaskada_v1alpha_compute_service_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlanHash); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kaskada_kaskada_v1alpha_compute_service_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCurrentSnapshotVersionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kaskada_kaskada_v1alpha_compute_service_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCurrentSnapshotVersionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kaskada_kaskada_v1alpha_compute_service_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CompileRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kaskada_kaskada_v1alpha_compute_service_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CompileResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kaskada_kaskada_v1alpha_compute_service_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExecuteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kaskada_kaskada_v1alpha_compute_service_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExecuteResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kaskada_kaskada_v1alpha_compute_service_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ComputeTable_FileSet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kaskada_kaskada_v1alpha_compute_service_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExecuteRequest_Limits); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kaskada_kaskada_v1alpha_compute_service_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExecuteRequest_ComputeSnapshotConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kaskada_kaskada_v1alpha_compute_service_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExecuteRequest_OutputTo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kaskada_kaskada_v1alpha_compute_service_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExecuteResponse_Output); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kaskada_kaskada_v1alpha_compute_service_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExecuteResponse_ProgressInformation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kaskada_kaskada_v1alpha_compute_service_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExecuteResponse_ComputeSnapshot); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_kaskada_kaskada_v1alpha_compute_service_proto_msgTypes[13].OneofWrappers = []interface{}{
		(*ExecuteRequest_OutputTo_ObjectStore)(nil),
		(*ExecuteRequest_OutputTo_Redis)(nil),
		(*ExecuteRequest_OutputTo_Pulsar)(nil),
	}
	file_kaskada_kaskada_v1alpha_compute_service_proto_msgTypes[14].OneofWrappers = []interface{}{
		(*ExecuteResponse_Output_Unspecified)(nil),
		(*ExecuteResponse_Output_ObjectStore)(nil),
		(*ExecuteResponse_Output_Redis)(nil),
		(*ExecuteResponse_Output_Pulsar)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_kaskada_kaskada_v1alpha_compute_service_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   17,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_kaskada_kaskada_v1alpha_compute_service_proto_goTypes,
		DependencyIndexes: file_kaskada_kaskada_v1alpha_compute_service_proto_depIdxs,
		EnumInfos:         file_kaskada_kaskada_v1alpha_compute_service_proto_enumTypes,
		MessageInfos:      file_kaskada_kaskada_v1alpha_compute_service_proto_msgTypes,
	}.Build()
	File_kaskada_kaskada_v1alpha_compute_service_proto = out.File
	file_kaskada_kaskada_v1alpha_compute_service_proto_rawDesc = nil
	file_kaskada_kaskada_v1alpha_compute_service_proto_goTypes = nil
	file_kaskada_kaskada_v1alpha_compute_service_proto_depIdxs = nil
}
