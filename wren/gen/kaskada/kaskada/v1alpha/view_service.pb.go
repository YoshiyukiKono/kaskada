// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0-devel
// 	protoc        (unknown)
// source: kaskada/kaskada/v1alpha/view_service.proto

package kaskadav1alpha

import (
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type View struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The view's ID.
	//
	// This value is a unique identifier for the view within a Kaskada
	// account. The ID is generated by Kaskada, and is provided as a
	// read-only field.
	ViewId string `protobuf:"bytes,1,opt,name=view_id,json=viewId,proto3" json:"view_id,omitempty"`
	// The View's Name.
	//
	// This value must be unique within an Kaskada account as it is used to
	// identify the view in Fenl queries.
	ViewName string `protobuf:"bytes,2,opt,name=view_name,json=viewName,proto3" json:"view_name,omitempty"`
	// The View's Fenl expression.
	Expression string `protobuf:"bytes,3,opt,name=expression,proto3" json:"expression,omitempty"`
	// The result type of the view.
	ResultType *DataType `protobuf:"bytes,7,opt,name=result_type,json=resultType,proto3" json:"result_type,omitempty"`
	// The result of the analyze step during view creation
	Analysis *Analysis `protobuf:"bytes,8,opt,name=analysis,proto3" json:"analysis,omitempty"`
}

func (x *View) Reset() {
	*x = View{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kaskada_kaskada_v1alpha_view_service_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *View) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*View) ProtoMessage() {}

func (x *View) ProtoReflect() protoreflect.Message {
	mi := &file_kaskada_kaskada_v1alpha_view_service_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use View.ProtoReflect.Descriptor instead.
func (*View) Descriptor() ([]byte, []int) {
	return file_kaskada_kaskada_v1alpha_view_service_proto_rawDescGZIP(), []int{0}
}

func (x *View) GetViewId() string {
	if x != nil {
		return x.ViewId
	}
	return ""
}

func (x *View) GetViewName() string {
	if x != nil {
		return x.ViewName
	}
	return ""
}

func (x *View) GetExpression() string {
	if x != nil {
		return x.Expression
	}
	return ""
}

func (x *View) GetResultType() *DataType {
	if x != nil {
		return x.ResultType
	}
	return nil
}

func (x *View) GetAnalysis() *Analysis {
	if x != nil {
		return x.Analysis
	}
	return nil
}

type ListViewsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// View search string.
	//
	// If provided, only Views with a field containing the given string will
	// be returned.
	Search string `protobuf:"bytes,1,opt,name=search,proto3" json:"search,omitempty"`
	// The maximum number of items to return.
	PageSize int32 `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// The next_page_token value returned from a previous List request, if
	// any. Note: if this is set, the `search` and `page_size` parameters
	// are ignored, and the values set in the original request are used
	// instead.
	PageToken string `protobuf:"bytes,3,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
}

func (x *ListViewsRequest) Reset() {
	*x = ListViewsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kaskada_kaskada_v1alpha_view_service_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListViewsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListViewsRequest) ProtoMessage() {}

func (x *ListViewsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kaskada_kaskada_v1alpha_view_service_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListViewsRequest.ProtoReflect.Descriptor instead.
func (*ListViewsRequest) Descriptor() ([]byte, []int) {
	return file_kaskada_kaskada_v1alpha_view_service_proto_rawDescGZIP(), []int{1}
}

func (x *ListViewsRequest) GetSearch() string {
	if x != nil {
		return x.Search
	}
	return ""
}

func (x *ListViewsRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListViewsRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

type ListViewsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A list of Views.
	Views []*View `protobuf:"bytes,1,rep,name=views,proto3" json:"views,omitempty"`
	// Information, help, or warnings related to the request
	RequestDetails *RequestDetails `protobuf:"bytes,2,opt,name=request_details,json=requestDetails,proto3" json:"request_details,omitempty"`
	// Token to retrieve the next page of results, or empty if there are no
	// more results in the list.
	NextPageToken string `protobuf:"bytes,3,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
}

func (x *ListViewsResponse) Reset() {
	*x = ListViewsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kaskada_kaskada_v1alpha_view_service_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListViewsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListViewsResponse) ProtoMessage() {}

func (x *ListViewsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kaskada_kaskada_v1alpha_view_service_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListViewsResponse.ProtoReflect.Descriptor instead.
func (*ListViewsResponse) Descriptor() ([]byte, []int) {
	return file_kaskada_kaskada_v1alpha_view_service_proto_rawDescGZIP(), []int{2}
}

func (x *ListViewsResponse) GetViews() []*View {
	if x != nil {
		return x.Views
	}
	return nil
}

func (x *ListViewsResponse) GetRequestDetails() *RequestDetails {
	if x != nil {
		return x.RequestDetails
	}
	return nil
}

func (x *ListViewsResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

type GetViewRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of the View to get.
	ViewName string `protobuf:"bytes,1,opt,name=view_name,json=viewName,proto3" json:"view_name,omitempty"`
}

func (x *GetViewRequest) Reset() {
	*x = GetViewRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kaskada_kaskada_v1alpha_view_service_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetViewRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetViewRequest) ProtoMessage() {}

func (x *GetViewRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kaskada_kaskada_v1alpha_view_service_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetViewRequest.ProtoReflect.Descriptor instead.
func (*GetViewRequest) Descriptor() ([]byte, []int) {
	return file_kaskada_kaskada_v1alpha_view_service_proto_rawDescGZIP(), []int{3}
}

func (x *GetViewRequest) GetViewName() string {
	if x != nil {
		return x.ViewName
	}
	return ""
}

type GetViewResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The requested View.
	View *View `protobuf:"bytes,1,opt,name=view,proto3" json:"view,omitempty"`
	// Information, help, or warnings related to the request
	RequestDetails *RequestDetails `protobuf:"bytes,2,opt,name=request_details,json=requestDetails,proto3" json:"request_details,omitempty"`
}

func (x *GetViewResponse) Reset() {
	*x = GetViewResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kaskada_kaskada_v1alpha_view_service_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetViewResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetViewResponse) ProtoMessage() {}

func (x *GetViewResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kaskada_kaskada_v1alpha_view_service_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetViewResponse.ProtoReflect.Descriptor instead.
func (*GetViewResponse) Descriptor() ([]byte, []int) {
	return file_kaskada_kaskada_v1alpha_view_service_proto_rawDescGZIP(), []int{4}
}

func (x *GetViewResponse) GetView() *View {
	if x != nil {
		return x.View
	}
	return nil
}

func (x *GetViewResponse) GetRequestDetails() *RequestDetails {
	if x != nil {
		return x.RequestDetails
	}
	return nil
}

type CreateViewRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The View resource to create.
	View *View `protobuf:"bytes,1,opt,name=view,proto3" json:"view,omitempty"`
	// If this is `true`, then the view is validated and if there are no
	// errors, the resultant analysis is returned. No actual view is created.
	DryRun bool `protobuf:"varint,2,opt,name=dry_run,json=dryRun,proto3" json:"dry_run,omitempty"`
}

func (x *CreateViewRequest) Reset() {
	*x = CreateViewRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kaskada_kaskada_v1alpha_view_service_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateViewRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateViewRequest) ProtoMessage() {}

func (x *CreateViewRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kaskada_kaskada_v1alpha_view_service_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateViewRequest.ProtoReflect.Descriptor instead.
func (*CreateViewRequest) Descriptor() ([]byte, []int) {
	return file_kaskada_kaskada_v1alpha_view_service_proto_rawDescGZIP(), []int{5}
}

func (x *CreateViewRequest) GetView() *View {
	if x != nil {
		return x.View
	}
	return nil
}

func (x *CreateViewRequest) GetDryRun() bool {
	if x != nil {
		return x.DryRun
	}
	return false
}

type CreateViewResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The View resource that was created.
	// If this is empty, check `analysis` for reasons.
	View *View `protobuf:"bytes,1,opt,name=view,proto3" json:"view,omitempty"`
	// Information, help, or warnings related to the request
	RequestDetails *RequestDetails `protobuf:"bytes,2,opt,name=request_details,json=requestDetails,proto3" json:"request_details,omitempty"`
	// The result of the analyze step during view creation
	Analysis *Analysis `protobuf:"bytes,3,opt,name=analysis,proto3" json:"analysis,omitempty"`
}

func (x *CreateViewResponse) Reset() {
	*x = CreateViewResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kaskada_kaskada_v1alpha_view_service_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateViewResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateViewResponse) ProtoMessage() {}

func (x *CreateViewResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kaskada_kaskada_v1alpha_view_service_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateViewResponse.ProtoReflect.Descriptor instead.
func (*CreateViewResponse) Descriptor() ([]byte, []int) {
	return file_kaskada_kaskada_v1alpha_view_service_proto_rawDescGZIP(), []int{6}
}

func (x *CreateViewResponse) GetView() *View {
	if x != nil {
		return x.View
	}
	return nil
}

func (x *CreateViewResponse) GetRequestDetails() *RequestDetails {
	if x != nil {
		return x.RequestDetails
	}
	return nil
}

func (x *CreateViewResponse) GetAnalysis() *Analysis {
	if x != nil {
		return x.Analysis
	}
	return nil
}

type DeleteViewRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of the View to delete.
	ViewName string `protobuf:"bytes,1,opt,name=view_name,json=viewName,proto3" json:"view_name,omitempty"`
	// Force delete the view (defaults to false)
	Force bool `protobuf:"varint,2,opt,name=force,proto3" json:"force,omitempty"`
}

func (x *DeleteViewRequest) Reset() {
	*x = DeleteViewRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kaskada_kaskada_v1alpha_view_service_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteViewRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteViewRequest) ProtoMessage() {}

func (x *DeleteViewRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kaskada_kaskada_v1alpha_view_service_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteViewRequest.ProtoReflect.Descriptor instead.
func (*DeleteViewRequest) Descriptor() ([]byte, []int) {
	return file_kaskada_kaskada_v1alpha_view_service_proto_rawDescGZIP(), []int{7}
}

func (x *DeleteViewRequest) GetViewName() string {
	if x != nil {
		return x.ViewName
	}
	return ""
}

func (x *DeleteViewRequest) GetForce() bool {
	if x != nil {
		return x.Force
	}
	return false
}

type DeleteViewResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Information, help, or warnings related to the request
	RequestDetails *RequestDetails `protobuf:"bytes,1,opt,name=request_details,json=requestDetails,proto3" json:"request_details,omitempty"`
}

func (x *DeleteViewResponse) Reset() {
	*x = DeleteViewResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kaskada_kaskada_v1alpha_view_service_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteViewResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteViewResponse) ProtoMessage() {}

func (x *DeleteViewResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kaskada_kaskada_v1alpha_view_service_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteViewResponse.ProtoReflect.Descriptor instead.
func (*DeleteViewResponse) Descriptor() ([]byte, []int) {
	return file_kaskada_kaskada_v1alpha_view_service_proto_rawDescGZIP(), []int{8}
}

func (x *DeleteViewResponse) GetRequestDetails() *RequestDetails {
	if x != nil {
		return x.RequestDetails
	}
	return nil
}

var File_kaskada_kaskada_v1alpha_view_service_proto protoreflect.FileDescriptor

var file_kaskada_kaskada_v1alpha_view_service_proto_rawDesc = []byte{
	0x0a, 0x2a, 0x6b, 0x61, 0x73, 0x6b, 0x61, 0x64, 0x61, 0x2f, 0x6b, 0x61, 0x73, 0x6b, 0x61, 0x64,
	0x61, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2f, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x17, 0x6b, 0x61,
	0x73, 0x6b, 0x61, 0x64, 0x61, 0x2e, 0x6b, 0x61, 0x73, 0x6b, 0x61, 0x64, 0x61, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x62, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x24, 0x6b, 0x61, 0x73, 0x6b, 0x61, 0x64, 0x61, 0x2f, 0x6b, 0x61,
	0x73, 0x6b, 0x61, 0x64, 0x61, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2f, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x24, 0x6b, 0x61, 0x73, 0x6b,
	0x61, 0x64, 0x61, 0x2f, 0x6b, 0x61, 0x73, 0x6b, 0x61, 0x64, 0x61, 0x2f, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x17, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x80, 0x02, 0x0a, 0x04, 0x56, 0x69,
	0x65, 0x77, 0x12, 0x1c, 0x0a, 0x07, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x06, 0x76, 0x69, 0x65, 0x77, 0x49, 0x64,
	0x12, 0x24, 0x0a, 0x09, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x08, 0x76, 0x69,
	0x65, 0x77, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x27, 0x0a, 0x0a, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72,
	0x02, 0x10, 0x01, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x47, 0x0a, 0x0b, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6b, 0x61, 0x73, 0x6b, 0x61, 0x64, 0x61, 0x2e, 0x6b,
	0x61, 0x73, 0x6b, 0x61, 0x64, 0x61, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x44,
	0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x0a, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x42, 0x0a, 0x08, 0x61, 0x6e, 0x61, 0x6c,
	0x79, 0x73, 0x69, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6b, 0x61, 0x73,
	0x6b, 0x61, 0x64, 0x61, 0x2e, 0x6b, 0x61, 0x73, 0x6b, 0x61, 0x64, 0x61, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x2e, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x42, 0x03, 0xe0,
	0x41, 0x03, 0x52, 0x08, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x22, 0x72, 0x0a, 0x10,
	0x4c, 0x69, 0x73, 0x74, 0x56, 0x69, 0x65, 0x77, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x12, 0x27, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65,
	0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0a, 0xfa, 0x42, 0x07,
	0x1a, 0x05, 0x18, 0xe8, 0x07, 0x28, 0x00, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a,
	0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x22, 0xc2, 0x01, 0x0a, 0x11, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x69, 0x65, 0x77, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x05, 0x76, 0x69, 0x65, 0x77, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6b, 0x61, 0x73, 0x6b, 0x61, 0x64, 0x61, 0x2e,
	0x6b, 0x61, 0x73, 0x6b, 0x61, 0x64, 0x61, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e,
	0x56, 0x69, 0x65, 0x77, 0x52, 0x05, 0x76, 0x69, 0x65, 0x77, 0x73, 0x12, 0x50, 0x0a, 0x0f, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x6b, 0x61, 0x73, 0x6b, 0x61, 0x64, 0x61, 0x2e, 0x6b,
	0x61, 0x73, 0x6b, 0x61, 0x64, 0x61, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x0e, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x26, 0x0a,
	0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x36, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x56, 0x69, 0x65, 0x77,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x09, 0x76, 0x69, 0x65, 0x77, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72,
	0x02, 0x10, 0x01, 0x52, 0x08, 0x76, 0x69, 0x65, 0x77, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x96, 0x01,
	0x0a, 0x0f, 0x47, 0x65, 0x74, 0x56, 0x69, 0x65, 0x77, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x31, 0x0a, 0x04, 0x76, 0x69, 0x65, 0x77, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1d, 0x2e, 0x6b, 0x61, 0x73, 0x6b, 0x61, 0x64, 0x61, 0x2e, 0x6b, 0x61, 0x73, 0x6b, 0x61, 0x64,
	0x61, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x56, 0x69, 0x65, 0x77, 0x52, 0x04,
	0x76, 0x69, 0x65, 0x77, 0x12, 0x50, 0x0a, 0x0f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f,
	0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e,
	0x6b, 0x61, 0x73, 0x6b, 0x61, 0x64, 0x61, 0x2e, 0x6b, 0x61, 0x73, 0x6b, 0x61, 0x64, 0x61, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x0e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x22, 0x69, 0x0a, 0x11, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x56, 0x69, 0x65, 0x77, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3b, 0x0a, 0x04, 0x76,
	0x69, 0x65, 0x77, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6b, 0x61, 0x73, 0x6b,
	0x61, 0x64, 0x61, 0x2e, 0x6b, 0x61, 0x73, 0x6b, 0x61, 0x64, 0x61, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x2e, 0x56, 0x69, 0x65, 0x77, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x8a, 0x01, 0x02,
	0x10, 0x01, 0x52, 0x04, 0x76, 0x69, 0x65, 0x77, 0x12, 0x17, 0x0a, 0x07, 0x64, 0x72, 0x79, 0x5f,
	0x72, 0x75, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x64, 0x72, 0x79, 0x52, 0x75,
	0x6e, 0x22, 0xd8, 0x01, 0x0a, 0x12, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x56, 0x69, 0x65, 0x77,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x31, 0x0a, 0x04, 0x76, 0x69, 0x65, 0x77,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6b, 0x61, 0x73, 0x6b, 0x61, 0x64, 0x61,
	0x2e, 0x6b, 0x61, 0x73, 0x6b, 0x61, 0x64, 0x61, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x2e, 0x56, 0x69, 0x65, 0x77, 0x52, 0x04, 0x76, 0x69, 0x65, 0x77, 0x12, 0x50, 0x0a, 0x0f, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x6b, 0x61, 0x73, 0x6b, 0x61, 0x64, 0x61, 0x2e, 0x6b,
	0x61, 0x73, 0x6b, 0x61, 0x64, 0x61, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x0e, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x3d, 0x0a,
	0x08, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x21, 0x2e, 0x6b, 0x61, 0x73, 0x6b, 0x61, 0x64, 0x61, 0x2e, 0x6b, 0x61, 0x73, 0x6b, 0x61, 0x64,
	0x61, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x73,
	0x69, 0x73, 0x52, 0x08, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x22, 0x4f, 0x0a, 0x11,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x56, 0x69, 0x65, 0x77, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x24, 0x0a, 0x09, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x08, 0x76,
	0x69, 0x65, 0x77, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x6f, 0x72, 0x63, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x22, 0x66, 0x0a,
	0x12, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x56, 0x69, 0x65, 0x77, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x50, 0x0a, 0x0f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x64,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x6b,
	0x61, 0x73, 0x6b, 0x61, 0x64, 0x61, 0x2e, 0x6b, 0x61, 0x73, 0x6b, 0x61, 0x64, 0x61, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x0e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x73, 0x32, 0xa2, 0x04, 0x0a, 0x0b, 0x56, 0x69, 0x65, 0x77, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x7a, 0x0a, 0x09, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x69, 0x65,
	0x77, 0x73, 0x12, 0x29, 0x2e, 0x6b, 0x61, 0x73, 0x6b, 0x61, 0x64, 0x61, 0x2e, 0x6b, 0x61, 0x73,
	0x6b, 0x61, 0x64, 0x61, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x56, 0x69, 0x65, 0x77, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e,
	0x6b, 0x61, 0x73, 0x6b, 0x61, 0x64, 0x61, 0x2e, 0x6b, 0x61, 0x73, 0x6b, 0x61, 0x64, 0x61, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x69, 0x65, 0x77,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x16, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x10, 0x12, 0x0e, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2f, 0x76, 0x69, 0x65, 0x77,
	0x73, 0x12, 0x82, 0x01, 0x0a, 0x07, 0x47, 0x65, 0x74, 0x56, 0x69, 0x65, 0x77, 0x12, 0x27, 0x2e,
	0x6b, 0x61, 0x73, 0x6b, 0x61, 0x64, 0x61, 0x2e, 0x6b, 0x61, 0x73, 0x6b, 0x61, 0x64, 0x61, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x47, 0x65, 0x74, 0x56, 0x69, 0x65, 0x77, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x6b, 0x61, 0x73, 0x6b, 0x61, 0x64, 0x61,
	0x2e, 0x6b, 0x61, 0x73, 0x6b, 0x61, 0x64, 0x61, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x2e, 0x47, 0x65, 0x74, 0x56, 0x69, 0x65, 0x77, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x24, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1e, 0x12, 0x1c, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x2f, 0x76, 0x69, 0x65, 0x77, 0x73, 0x2f, 0x7b, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x3d, 0x2a, 0x7d, 0x12, 0x83, 0x01, 0x0a, 0x0a, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x56, 0x69, 0x65, 0x77, 0x12, 0x2a, 0x2e, 0x6b, 0x61, 0x73, 0x6b, 0x61, 0x64, 0x61, 0x2e,
	0x6b, 0x61, 0x73, 0x6b, 0x61, 0x64, 0x61, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x56, 0x69, 0x65, 0x77, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x2b, 0x2e, 0x6b, 0x61, 0x73, 0x6b, 0x61, 0x64, 0x61, 0x2e, 0x6b, 0x61, 0x73, 0x6b,
	0x61, 0x64, 0x61, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x56, 0x69, 0x65, 0x77, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1c,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x16, 0x3a, 0x04, 0x76, 0x69, 0x65, 0x77, 0x22, 0x0e, 0x2f, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2f, 0x76, 0x69, 0x65, 0x77, 0x73, 0x12, 0x8b, 0x01, 0x0a,
	0x0a, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x56, 0x69, 0x65, 0x77, 0x12, 0x2a, 0x2e, 0x6b, 0x61,
	0x73, 0x6b, 0x61, 0x64, 0x61, 0x2e, 0x6b, 0x61, 0x73, 0x6b, 0x61, 0x64, 0x61, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x56, 0x69, 0x65, 0x77,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x6b, 0x61, 0x73, 0x6b, 0x61, 0x64,
	0x61, 0x2e, 0x6b, 0x61, 0x73, 0x6b, 0x61, 0x64, 0x61, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x56, 0x69, 0x65, 0x77, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x24, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1e, 0x2a, 0x1c, 0x2f, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2f, 0x76, 0x69, 0x65, 0x77, 0x73, 0x2f, 0x7b, 0x76, 0x69,
	0x65, 0x77, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x2a, 0x7d, 0x42, 0xfc, 0x01, 0x0a, 0x1b, 0x63,
	0x6f, 0x6d, 0x2e, 0x6b, 0x61, 0x73, 0x6b, 0x61, 0x64, 0x61, 0x2e, 0x6b, 0x61, 0x73, 0x6b, 0x61,
	0x64, 0x61, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x42, 0x10, 0x56, 0x69, 0x65, 0x77,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x4d,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6b, 0x61, 0x73, 0x6b, 0x61,
	0x64, 0x61, 0x2f, 0x6b, 0x61, 0x73, 0x6b, 0x61, 0x64, 0x61, 0x2d, 0x61, 0x69, 0x2f, 0x77, 0x72,
	0x65, 0x6e, 0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x6b, 0x61, 0x73, 0x6b, 0x61, 0x64, 0x61, 0x2f, 0x6b,
	0x61, 0x73, 0x6b, 0x61, 0x64, 0x61, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x3b, 0x6b,
	0x61, 0x73, 0x6b, 0x61, 0x64, 0x61, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0xa2, 0x02, 0x03,
	0x4b, 0x4b, 0x58, 0xaa, 0x02, 0x17, 0x4b, 0x61, 0x73, 0x6b, 0x61, 0x64, 0x61, 0x2e, 0x4b, 0x61,
	0x73, 0x6b, 0x61, 0x64, 0x61, 0x2e, 0x56, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0xca, 0x02, 0x17,
	0x4b, 0x61, 0x73, 0x6b, 0x61, 0x64, 0x61, 0x5c, 0x4b, 0x61, 0x73, 0x6b, 0x61, 0x64, 0x61, 0x5c,
	0x56, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0xe2, 0x02, 0x23, 0x4b, 0x61, 0x73, 0x6b, 0x61, 0x64,
	0x61, 0x5c, 0x4b, 0x61, 0x73, 0x6b, 0x61, 0x64, 0x61, 0x5c, 0x56, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x19,
	0x4b, 0x61, 0x73, 0x6b, 0x61, 0x64, 0x61, 0x3a, 0x3a, 0x4b, 0x61, 0x73, 0x6b, 0x61, 0x64, 0x61,
	0x3a, 0x3a, 0x56, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_kaskada_kaskada_v1alpha_view_service_proto_rawDescOnce sync.Once
	file_kaskada_kaskada_v1alpha_view_service_proto_rawDescData = file_kaskada_kaskada_v1alpha_view_service_proto_rawDesc
)

func file_kaskada_kaskada_v1alpha_view_service_proto_rawDescGZIP() []byte {
	file_kaskada_kaskada_v1alpha_view_service_proto_rawDescOnce.Do(func() {
		file_kaskada_kaskada_v1alpha_view_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_kaskada_kaskada_v1alpha_view_service_proto_rawDescData)
	})
	return file_kaskada_kaskada_v1alpha_view_service_proto_rawDescData
}

var file_kaskada_kaskada_v1alpha_view_service_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_kaskada_kaskada_v1alpha_view_service_proto_goTypes = []interface{}{
	(*View)(nil),               // 0: kaskada.kaskada.v1alpha.View
	(*ListViewsRequest)(nil),   // 1: kaskada.kaskada.v1alpha.ListViewsRequest
	(*ListViewsResponse)(nil),  // 2: kaskada.kaskada.v1alpha.ListViewsResponse
	(*GetViewRequest)(nil),     // 3: kaskada.kaskada.v1alpha.GetViewRequest
	(*GetViewResponse)(nil),    // 4: kaskada.kaskada.v1alpha.GetViewResponse
	(*CreateViewRequest)(nil),  // 5: kaskada.kaskada.v1alpha.CreateViewRequest
	(*CreateViewResponse)(nil), // 6: kaskada.kaskada.v1alpha.CreateViewResponse
	(*DeleteViewRequest)(nil),  // 7: kaskada.kaskada.v1alpha.DeleteViewRequest
	(*DeleteViewResponse)(nil), // 8: kaskada.kaskada.v1alpha.DeleteViewResponse
	(*DataType)(nil),           // 9: kaskada.kaskada.v1alpha.DataType
	(*Analysis)(nil),           // 10: kaskada.kaskada.v1alpha.Analysis
	(*RequestDetails)(nil),     // 11: kaskada.kaskada.v1alpha.RequestDetails
}
var file_kaskada_kaskada_v1alpha_view_service_proto_depIdxs = []int32{
	9,  // 0: kaskada.kaskada.v1alpha.View.result_type:type_name -> kaskada.kaskada.v1alpha.DataType
	10, // 1: kaskada.kaskada.v1alpha.View.analysis:type_name -> kaskada.kaskada.v1alpha.Analysis
	0,  // 2: kaskada.kaskada.v1alpha.ListViewsResponse.views:type_name -> kaskada.kaskada.v1alpha.View
	11, // 3: kaskada.kaskada.v1alpha.ListViewsResponse.request_details:type_name -> kaskada.kaskada.v1alpha.RequestDetails
	0,  // 4: kaskada.kaskada.v1alpha.GetViewResponse.view:type_name -> kaskada.kaskada.v1alpha.View
	11, // 5: kaskada.kaskada.v1alpha.GetViewResponse.request_details:type_name -> kaskada.kaskada.v1alpha.RequestDetails
	0,  // 6: kaskada.kaskada.v1alpha.CreateViewRequest.view:type_name -> kaskada.kaskada.v1alpha.View
	0,  // 7: kaskada.kaskada.v1alpha.CreateViewResponse.view:type_name -> kaskada.kaskada.v1alpha.View
	11, // 8: kaskada.kaskada.v1alpha.CreateViewResponse.request_details:type_name -> kaskada.kaskada.v1alpha.RequestDetails
	10, // 9: kaskada.kaskada.v1alpha.CreateViewResponse.analysis:type_name -> kaskada.kaskada.v1alpha.Analysis
	11, // 10: kaskada.kaskada.v1alpha.DeleteViewResponse.request_details:type_name -> kaskada.kaskada.v1alpha.RequestDetails
	1,  // 11: kaskada.kaskada.v1alpha.ViewService.ListViews:input_type -> kaskada.kaskada.v1alpha.ListViewsRequest
	3,  // 12: kaskada.kaskada.v1alpha.ViewService.GetView:input_type -> kaskada.kaskada.v1alpha.GetViewRequest
	5,  // 13: kaskada.kaskada.v1alpha.ViewService.CreateView:input_type -> kaskada.kaskada.v1alpha.CreateViewRequest
	7,  // 14: kaskada.kaskada.v1alpha.ViewService.DeleteView:input_type -> kaskada.kaskada.v1alpha.DeleteViewRequest
	2,  // 15: kaskada.kaskada.v1alpha.ViewService.ListViews:output_type -> kaskada.kaskada.v1alpha.ListViewsResponse
	4,  // 16: kaskada.kaskada.v1alpha.ViewService.GetView:output_type -> kaskada.kaskada.v1alpha.GetViewResponse
	6,  // 17: kaskada.kaskada.v1alpha.ViewService.CreateView:output_type -> kaskada.kaskada.v1alpha.CreateViewResponse
	8,  // 18: kaskada.kaskada.v1alpha.ViewService.DeleteView:output_type -> kaskada.kaskada.v1alpha.DeleteViewResponse
	15, // [15:19] is the sub-list for method output_type
	11, // [11:15] is the sub-list for method input_type
	11, // [11:11] is the sub-list for extension type_name
	11, // [11:11] is the sub-list for extension extendee
	0,  // [0:11] is the sub-list for field type_name
}

func init() { file_kaskada_kaskada_v1alpha_view_service_proto_init() }
func file_kaskada_kaskada_v1alpha_view_service_proto_init() {
	if File_kaskada_kaskada_v1alpha_view_service_proto != nil {
		return
	}
	file_kaskada_kaskada_v1alpha_common_proto_init()
	file_kaskada_kaskada_v1alpha_schema_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_kaskada_kaskada_v1alpha_view_service_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*View); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kaskada_kaskada_v1alpha_view_service_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListViewsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kaskada_kaskada_v1alpha_view_service_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListViewsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kaskada_kaskada_v1alpha_view_service_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetViewRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kaskada_kaskada_v1alpha_view_service_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetViewResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kaskada_kaskada_v1alpha_view_service_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateViewRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kaskada_kaskada_v1alpha_view_service_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateViewResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kaskada_kaskada_v1alpha_view_service_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteViewRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kaskada_kaskada_v1alpha_view_service_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteViewResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_kaskada_kaskada_v1alpha_view_service_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_kaskada_kaskada_v1alpha_view_service_proto_goTypes,
		DependencyIndexes: file_kaskada_kaskada_v1alpha_view_service_proto_depIdxs,
		MessageInfos:      file_kaskada_kaskada_v1alpha_view_service_proto_msgTypes,
	}.Build()
	File_kaskada_kaskada_v1alpha_view_service_proto = out.File
	file_kaskada_kaskada_v1alpha_view_service_proto_rawDesc = nil
	file_kaskada_kaskada_v1alpha_view_service_proto_goTypes = nil
	file_kaskada_kaskada_v1alpha_view_service_proto_depIdxs = nil
}
