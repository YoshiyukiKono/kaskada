// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: kaskada/kaskada/v1alpha/preparation_service.proto

package kaskadav1alpha

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PreparationServiceClient is the client API for PreparationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PreparationServiceClient interface {
	// Prepares the data from source files
	PrepareData(ctx context.Context, in *PrepareDataRequest, opts ...grpc.CallOption) (*PrepareDataResponse, error)
	// Returns the current preparation ID of the preparation (currently hard coded)
	GetCurrentPrepID(ctx context.Context, in *GetCurrentPrepIDRequest, opts ...grpc.CallOption) (*GetCurrentPrepIDResponse, error)
}

type preparationServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPreparationServiceClient(cc grpc.ClientConnInterface) PreparationServiceClient {
	return &preparationServiceClient{cc}
}

func (c *preparationServiceClient) PrepareData(ctx context.Context, in *PrepareDataRequest, opts ...grpc.CallOption) (*PrepareDataResponse, error) {
	out := new(PrepareDataResponse)
	err := c.cc.Invoke(ctx, "/kaskada.kaskada.v1alpha.PreparationService/PrepareData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *preparationServiceClient) GetCurrentPrepID(ctx context.Context, in *GetCurrentPrepIDRequest, opts ...grpc.CallOption) (*GetCurrentPrepIDResponse, error) {
	out := new(GetCurrentPrepIDResponse)
	err := c.cc.Invoke(ctx, "/kaskada.kaskada.v1alpha.PreparationService/GetCurrentPrepID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PreparationServiceServer is the server API for PreparationService service.
// All implementations must embed UnimplementedPreparationServiceServer
// for forward compatibility
type PreparationServiceServer interface {
	// Prepares the data from source files
	PrepareData(context.Context, *PrepareDataRequest) (*PrepareDataResponse, error)
	// Returns the current preparation ID of the preparation (currently hard coded)
	GetCurrentPrepID(context.Context, *GetCurrentPrepIDRequest) (*GetCurrentPrepIDResponse, error)
	mustEmbedUnimplementedPreparationServiceServer()
}

// UnimplementedPreparationServiceServer must be embedded to have forward compatible implementations.
type UnimplementedPreparationServiceServer struct {
}

func (UnimplementedPreparationServiceServer) PrepareData(context.Context, *PrepareDataRequest) (*PrepareDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PrepareData not implemented")
}
func (UnimplementedPreparationServiceServer) GetCurrentPrepID(context.Context, *GetCurrentPrepIDRequest) (*GetCurrentPrepIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCurrentPrepID not implemented")
}
func (UnimplementedPreparationServiceServer) mustEmbedUnimplementedPreparationServiceServer() {}

// UnsafePreparationServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PreparationServiceServer will
// result in compilation errors.
type UnsafePreparationServiceServer interface {
	mustEmbedUnimplementedPreparationServiceServer()
}

func RegisterPreparationServiceServer(s grpc.ServiceRegistrar, srv PreparationServiceServer) {
	s.RegisterService(&PreparationService_ServiceDesc, srv)
}

func _PreparationService_PrepareData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PrepareDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PreparationServiceServer).PrepareData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kaskada.kaskada.v1alpha.PreparationService/PrepareData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PreparationServiceServer).PrepareData(ctx, req.(*PrepareDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PreparationService_GetCurrentPrepID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCurrentPrepIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PreparationServiceServer).GetCurrentPrepID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kaskada.kaskada.v1alpha.PreparationService/GetCurrentPrepID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PreparationServiceServer).GetCurrentPrepID(ctx, req.(*GetCurrentPrepIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PreparationService_ServiceDesc is the grpc.ServiceDesc for PreparationService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PreparationService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "kaskada.kaskada.v1alpha.PreparationService",
	HandlerType: (*PreparationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PrepareData",
			Handler:    _PreparationService_PrepareData_Handler,
		},
		{
			MethodName: "GetCurrentPrepID",
			Handler:    _PreparationService_GetCurrentPrepID_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "kaskada/kaskada/v1alpha/preparation_service.proto",
}
