// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: kaskada/kaskada/v1alpha/test_cases.proto

package kaskadav1alpha

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on RedactTestCase with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *RedactTestCase) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RedactTestCase with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in RedactTestCaseMultiError,
// or nil if none found.
func (m *RedactTestCase) ValidateAll() error {
	return m.validate(true)
}

func (m *RedactTestCase) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for RootSafeValue

	// no validation rules for RootSensitiveValue

	if all {
		switch v := interface{}(m.GetRootEmbeddedObject()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RedactTestCaseValidationError{
					field:  "RootEmbeddedObject",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RedactTestCaseValidationError{
					field:  "RootEmbeddedObject",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRootEmbeddedObject()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RedactTestCaseValidationError{
				field:  "RootEmbeddedObject",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetRepeatedEmbeddedObject() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, RedactTestCaseValidationError{
						field:  fmt.Sprintf("RepeatedEmbeddedObject[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, RedactTestCaseValidationError{
						field:  fmt.Sprintf("RepeatedEmbeddedObject[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RedactTestCaseValidationError{
					field:  fmt.Sprintf("RepeatedEmbeddedObject[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for MapSensitiveValues

	{
		sorted_keys := make([]string, len(m.GetMapEmbeddedObjects()))
		i := 0
		for key := range m.GetMapEmbeddedObjects() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetMapEmbeddedObjects()[key]
			_ = val

			// no validation rules for MapEmbeddedObjects[key]

			if all {
				switch v := interface{}(val).(type) {
				case interface{ ValidateAll() error }:
					if err := v.ValidateAll(); err != nil {
						errors = append(errors, RedactTestCaseValidationError{
							field:  fmt.Sprintf("MapEmbeddedObjects[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				case interface{ Validate() error }:
					if err := v.Validate(); err != nil {
						errors = append(errors, RedactTestCaseValidationError{
							field:  fmt.Sprintf("MapEmbeddedObjects[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				}
			} else if v, ok := interface{}(val).(interface{ Validate() error }); ok {
				if err := v.Validate(); err != nil {
					return RedactTestCaseValidationError{
						field:  fmt.Sprintf("MapEmbeddedObjects[%v]", key),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		}
	}

	switch m.OneOfTest.(type) {

	case *RedactTestCase_OneOfSafeValue:
		// no validation rules for OneOfSafeValue

	case *RedactTestCase_OneOfSensitiveValue:
		// no validation rules for OneOfSensitiveValue

	case *RedactTestCase_OneOfEmbeddedValue:

		if all {
			switch v := interface{}(m.GetOneOfEmbeddedValue()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, RedactTestCaseValidationError{
						field:  "OneOfEmbeddedValue",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, RedactTestCaseValidationError{
						field:  "OneOfEmbeddedValue",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetOneOfEmbeddedValue()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RedactTestCaseValidationError{
					field:  "OneOfEmbeddedValue",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return RedactTestCaseMultiError(errors)
	}

	return nil
}

// RedactTestCaseMultiError is an error wrapping multiple validation errors
// returned by RedactTestCase.ValidateAll() if the designated constraints
// aren't met.
type RedactTestCaseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RedactTestCaseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RedactTestCaseMultiError) AllErrors() []error { return m }

// RedactTestCaseValidationError is the validation error returned by
// RedactTestCase.Validate if the designated constraints aren't met.
type RedactTestCaseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RedactTestCaseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RedactTestCaseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RedactTestCaseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RedactTestCaseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RedactTestCaseValidationError) ErrorName() string { return "RedactTestCaseValidationError" }

// Error satisfies the builtin error interface
func (e RedactTestCaseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRedactTestCase.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RedactTestCaseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RedactTestCaseValidationError{}

// Validate checks the field values on RedactTestCase_EmbeddedObject with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RedactTestCase_EmbeddedObject) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RedactTestCase_EmbeddedObject with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// RedactTestCase_EmbeddedObjectMultiError, or nil if none found.
func (m *RedactTestCase_EmbeddedObject) ValidateAll() error {
	return m.validate(true)
}

func (m *RedactTestCase_EmbeddedObject) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for SafeString

	// no validation rules for SensitiveString

	if len(errors) > 0 {
		return RedactTestCase_EmbeddedObjectMultiError(errors)
	}

	return nil
}

// RedactTestCase_EmbeddedObjectMultiError is an error wrapping multiple
// validation errors returned by RedactTestCase_EmbeddedObject.ValidateAll()
// if the designated constraints aren't met.
type RedactTestCase_EmbeddedObjectMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RedactTestCase_EmbeddedObjectMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RedactTestCase_EmbeddedObjectMultiError) AllErrors() []error { return m }

// RedactTestCase_EmbeddedObjectValidationError is the validation error
// returned by RedactTestCase_EmbeddedObject.Validate if the designated
// constraints aren't met.
type RedactTestCase_EmbeddedObjectValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RedactTestCase_EmbeddedObjectValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RedactTestCase_EmbeddedObjectValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RedactTestCase_EmbeddedObjectValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RedactTestCase_EmbeddedObjectValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RedactTestCase_EmbeddedObjectValidationError) ErrorName() string {
	return "RedactTestCase_EmbeddedObjectValidationError"
}

// Error satisfies the builtin error interface
func (e RedactTestCase_EmbeddedObjectValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRedactTestCase_EmbeddedObject.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RedactTestCase_EmbeddedObjectValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RedactTestCase_EmbeddedObjectValidationError{}
