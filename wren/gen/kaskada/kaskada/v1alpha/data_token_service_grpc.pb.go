// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: kaskada/kaskada/v1alpha/data_token_service.proto

package kaskadav1alpha

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DataTokenServiceClient is the client API for DataTokenService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DataTokenServiceClient interface {
	GetDataToken(ctx context.Context, in *GetDataTokenRequest, opts ...grpc.CallOption) (*GetDataTokenResponse, error)
}

type dataTokenServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDataTokenServiceClient(cc grpc.ClientConnInterface) DataTokenServiceClient {
	return &dataTokenServiceClient{cc}
}

func (c *dataTokenServiceClient) GetDataToken(ctx context.Context, in *GetDataTokenRequest, opts ...grpc.CallOption) (*GetDataTokenResponse, error) {
	out := new(GetDataTokenResponse)
	err := c.cc.Invoke(ctx, "/kaskada.kaskada.v1alpha.DataTokenService/GetDataToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DataTokenServiceServer is the server API for DataTokenService service.
// All implementations must embed UnimplementedDataTokenServiceServer
// for forward compatibility
type DataTokenServiceServer interface {
	GetDataToken(context.Context, *GetDataTokenRequest) (*GetDataTokenResponse, error)
	mustEmbedUnimplementedDataTokenServiceServer()
}

// UnimplementedDataTokenServiceServer must be embedded to have forward compatible implementations.
type UnimplementedDataTokenServiceServer struct {
}

func (UnimplementedDataTokenServiceServer) GetDataToken(context.Context, *GetDataTokenRequest) (*GetDataTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDataToken not implemented")
}
func (UnimplementedDataTokenServiceServer) mustEmbedUnimplementedDataTokenServiceServer() {}

// UnsafeDataTokenServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DataTokenServiceServer will
// result in compilation errors.
type UnsafeDataTokenServiceServer interface {
	mustEmbedUnimplementedDataTokenServiceServer()
}

func RegisterDataTokenServiceServer(s grpc.ServiceRegistrar, srv DataTokenServiceServer) {
	s.RegisterService(&DataTokenService_ServiceDesc, srv)
}

func _DataTokenService_GetDataToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDataTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataTokenServiceServer).GetDataToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kaskada.kaskada.v1alpha.DataTokenService/GetDataToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataTokenServiceServer).GetDataToken(ctx, req.(*GetDataTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DataTokenService_ServiceDesc is the grpc.ServiceDesc for DataTokenService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DataTokenService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "kaskada.kaskada.v1alpha.DataTokenService",
	HandlerType: (*DataTokenServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetDataToken",
			Handler:    _DataTokenService_GetDataToken_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "kaskada/kaskada/v1alpha/data_token_service.proto",
}
