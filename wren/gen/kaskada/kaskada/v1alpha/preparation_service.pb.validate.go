// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: kaskada/kaskada/v1alpha/preparation_service.proto

package kaskadav1alpha

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on PrepareDataRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PrepareDataRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PrepareDataRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PrepareDataRequestMultiError, or nil if none found.
func (m *PrepareDataRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *PrepareDataRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetFilePath()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PrepareDataRequestValidationError{
					field:  "FilePath",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PrepareDataRequestValidationError{
					field:  "FilePath",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetFilePath()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PrepareDataRequestValidationError{
				field:  "FilePath",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetConfig()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PrepareDataRequestValidationError{
					field:  "Config",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PrepareDataRequestValidationError{
					field:  "Config",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetConfig()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PrepareDataRequestValidationError{
				field:  "Config",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for OutputPathPrefix

	// no validation rules for FilePrefix

	if all {
		switch v := interface{}(m.GetSlicePlan()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PrepareDataRequestValidationError{
					field:  "SlicePlan",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PrepareDataRequestValidationError{
					field:  "SlicePlan",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSlicePlan()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PrepareDataRequestValidationError{
				field:  "SlicePlan",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return PrepareDataRequestMultiError(errors)
	}

	return nil
}

// PrepareDataRequestMultiError is an error wrapping multiple validation errors
// returned by PrepareDataRequest.ValidateAll() if the designated constraints
// aren't met.
type PrepareDataRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PrepareDataRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PrepareDataRequestMultiError) AllErrors() []error { return m }

// PrepareDataRequestValidationError is the validation error returned by
// PrepareDataRequest.Validate if the designated constraints aren't met.
type PrepareDataRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PrepareDataRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PrepareDataRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PrepareDataRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PrepareDataRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PrepareDataRequestValidationError) ErrorName() string {
	return "PrepareDataRequestValidationError"
}

// Error satisfies the builtin error interface
func (e PrepareDataRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPrepareDataRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PrepareDataRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PrepareDataRequestValidationError{}

// Validate checks the field values on PrepareDataResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PrepareDataResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PrepareDataResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PrepareDataResponseMultiError, or nil if none found.
func (m *PrepareDataResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *PrepareDataResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PrepId

	for idx, item := range m.GetPreparedFiles() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, PrepareDataResponseValidationError{
						field:  fmt.Sprintf("PreparedFiles[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, PrepareDataResponseValidationError{
						field:  fmt.Sprintf("PreparedFiles[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PrepareDataResponseValidationError{
					field:  fmt.Sprintf("PreparedFiles[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return PrepareDataResponseMultiError(errors)
	}

	return nil
}

// PrepareDataResponseMultiError is an error wrapping multiple validation
// errors returned by PrepareDataResponse.ValidateAll() if the designated
// constraints aren't met.
type PrepareDataResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PrepareDataResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PrepareDataResponseMultiError) AllErrors() []error { return m }

// PrepareDataResponseValidationError is the validation error returned by
// PrepareDataResponse.Validate if the designated constraints aren't met.
type PrepareDataResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PrepareDataResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PrepareDataResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PrepareDataResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PrepareDataResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PrepareDataResponseValidationError) ErrorName() string {
	return "PrepareDataResponseValidationError"
}

// Error satisfies the builtin error interface
func (e PrepareDataResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPrepareDataResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PrepareDataResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PrepareDataResponseValidationError{}

// Validate checks the field values on GetCurrentPrepIDRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetCurrentPrepIDRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCurrentPrepIDRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetCurrentPrepIDRequestMultiError, or nil if none found.
func (m *GetCurrentPrepIDRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCurrentPrepIDRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetCurrentPrepIDRequestMultiError(errors)
	}

	return nil
}

// GetCurrentPrepIDRequestMultiError is an error wrapping multiple validation
// errors returned by GetCurrentPrepIDRequest.ValidateAll() if the designated
// constraints aren't met.
type GetCurrentPrepIDRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCurrentPrepIDRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCurrentPrepIDRequestMultiError) AllErrors() []error { return m }

// GetCurrentPrepIDRequestValidationError is the validation error returned by
// GetCurrentPrepIDRequest.Validate if the designated constraints aren't met.
type GetCurrentPrepIDRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCurrentPrepIDRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCurrentPrepIDRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCurrentPrepIDRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCurrentPrepIDRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCurrentPrepIDRequestValidationError) ErrorName() string {
	return "GetCurrentPrepIDRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetCurrentPrepIDRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCurrentPrepIDRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCurrentPrepIDRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCurrentPrepIDRequestValidationError{}

// Validate checks the field values on GetCurrentPrepIDResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetCurrentPrepIDResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCurrentPrepIDResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetCurrentPrepIDResponseMultiError, or nil if none found.
func (m *GetCurrentPrepIDResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCurrentPrepIDResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PrepId

	if len(errors) > 0 {
		return GetCurrentPrepIDResponseMultiError(errors)
	}

	return nil
}

// GetCurrentPrepIDResponseMultiError is an error wrapping multiple validation
// errors returned by GetCurrentPrepIDResponse.ValidateAll() if the designated
// constraints aren't met.
type GetCurrentPrepIDResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCurrentPrepIDResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCurrentPrepIDResponseMultiError) AllErrors() []error { return m }

// GetCurrentPrepIDResponseValidationError is the validation error returned by
// GetCurrentPrepIDResponse.Validate if the designated constraints aren't met.
type GetCurrentPrepIDResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCurrentPrepIDResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCurrentPrepIDResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCurrentPrepIDResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCurrentPrepIDResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCurrentPrepIDResponseValidationError) ErrorName() string {
	return "GetCurrentPrepIDResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetCurrentPrepIDResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCurrentPrepIDResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCurrentPrepIDResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCurrentPrepIDResponseValidationError{}
