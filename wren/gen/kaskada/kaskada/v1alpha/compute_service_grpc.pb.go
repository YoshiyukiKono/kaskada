// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: kaskada/kaskada/v1alpha/compute_service.proto

package kaskadav1alpha

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ComputeServiceClient is the client API for ComputeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ComputeServiceClient interface {
	Compile(ctx context.Context, in *CompileRequest, opts ...grpc.CallOption) (*CompileResponse, error)
	Execute(ctx context.Context, in *ExecuteRequest, opts ...grpc.CallOption) (ComputeService_ExecuteClient, error)
	// Gets the current snapshot version.
	GetCurrentSnapshotVersion(ctx context.Context, in *GetCurrentSnapshotVersionRequest, opts ...grpc.CallOption) (*GetCurrentSnapshotVersionResponse, error)
}

type computeServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewComputeServiceClient(cc grpc.ClientConnInterface) ComputeServiceClient {
	return &computeServiceClient{cc}
}

func (c *computeServiceClient) Compile(ctx context.Context, in *CompileRequest, opts ...grpc.CallOption) (*CompileResponse, error) {
	out := new(CompileResponse)
	err := c.cc.Invoke(ctx, "/kaskada.kaskada.v1alpha.ComputeService/Compile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *computeServiceClient) Execute(ctx context.Context, in *ExecuteRequest, opts ...grpc.CallOption) (ComputeService_ExecuteClient, error) {
	stream, err := c.cc.NewStream(ctx, &ComputeService_ServiceDesc.Streams[0], "/kaskada.kaskada.v1alpha.ComputeService/Execute", opts...)
	if err != nil {
		return nil, err
	}
	x := &computeServiceExecuteClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ComputeService_ExecuteClient interface {
	Recv() (*ExecuteResponse, error)
	grpc.ClientStream
}

type computeServiceExecuteClient struct {
	grpc.ClientStream
}

func (x *computeServiceExecuteClient) Recv() (*ExecuteResponse, error) {
	m := new(ExecuteResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *computeServiceClient) GetCurrentSnapshotVersion(ctx context.Context, in *GetCurrentSnapshotVersionRequest, opts ...grpc.CallOption) (*GetCurrentSnapshotVersionResponse, error) {
	out := new(GetCurrentSnapshotVersionResponse)
	err := c.cc.Invoke(ctx, "/kaskada.kaskada.v1alpha.ComputeService/GetCurrentSnapshotVersion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ComputeServiceServer is the server API for ComputeService service.
// All implementations must embed UnimplementedComputeServiceServer
// for forward compatibility
type ComputeServiceServer interface {
	Compile(context.Context, *CompileRequest) (*CompileResponse, error)
	Execute(*ExecuteRequest, ComputeService_ExecuteServer) error
	// Gets the current snapshot version.
	GetCurrentSnapshotVersion(context.Context, *GetCurrentSnapshotVersionRequest) (*GetCurrentSnapshotVersionResponse, error)
	mustEmbedUnimplementedComputeServiceServer()
}

// UnimplementedComputeServiceServer must be embedded to have forward compatible implementations.
type UnimplementedComputeServiceServer struct {
}

func (UnimplementedComputeServiceServer) Compile(context.Context, *CompileRequest) (*CompileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Compile not implemented")
}
func (UnimplementedComputeServiceServer) Execute(*ExecuteRequest, ComputeService_ExecuteServer) error {
	return status.Errorf(codes.Unimplemented, "method Execute not implemented")
}
func (UnimplementedComputeServiceServer) GetCurrentSnapshotVersion(context.Context, *GetCurrentSnapshotVersionRequest) (*GetCurrentSnapshotVersionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCurrentSnapshotVersion not implemented")
}
func (UnimplementedComputeServiceServer) mustEmbedUnimplementedComputeServiceServer() {}

// UnsafeComputeServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ComputeServiceServer will
// result in compilation errors.
type UnsafeComputeServiceServer interface {
	mustEmbedUnimplementedComputeServiceServer()
}

func RegisterComputeServiceServer(s grpc.ServiceRegistrar, srv ComputeServiceServer) {
	s.RegisterService(&ComputeService_ServiceDesc, srv)
}

func _ComputeService_Compile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CompileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ComputeServiceServer).Compile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kaskada.kaskada.v1alpha.ComputeService/Compile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ComputeServiceServer).Compile(ctx, req.(*CompileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ComputeService_Execute_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ExecuteRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ComputeServiceServer).Execute(m, &computeServiceExecuteServer{stream})
}

type ComputeService_ExecuteServer interface {
	Send(*ExecuteResponse) error
	grpc.ServerStream
}

type computeServiceExecuteServer struct {
	grpc.ServerStream
}

func (x *computeServiceExecuteServer) Send(m *ExecuteResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _ComputeService_GetCurrentSnapshotVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCurrentSnapshotVersionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ComputeServiceServer).GetCurrentSnapshotVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kaskada.kaskada.v1alpha.ComputeService/GetCurrentSnapshotVersion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ComputeServiceServer).GetCurrentSnapshotVersion(ctx, req.(*GetCurrentSnapshotVersionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ComputeService_ServiceDesc is the grpc.ServiceDesc for ComputeService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ComputeService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "kaskada.kaskada.v1alpha.ComputeService",
	HandlerType: (*ComputeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Compile",
			Handler:    _ComputeService_Compile_Handler,
		},
		{
			MethodName: "GetCurrentSnapshotVersion",
			Handler:    _ComputeService_GetCurrentSnapshotVersion_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Execute",
			Handler:       _ComputeService_Execute_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "kaskada/kaskada/v1alpha/compute_service.proto",
}
