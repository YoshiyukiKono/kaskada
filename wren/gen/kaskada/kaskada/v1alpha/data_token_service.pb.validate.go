// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: kaskada/kaskada/v1alpha/data_token_service.proto

package kaskadav1alpha

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on DataToken with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *DataToken) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DataToken with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in DataTokenMultiError, or nil
// if none found.
func (m *DataToken) ValidateAll() error {
	return m.validate(true)
}

func (m *DataToken) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for DataTokenId

	// no validation rules for TableVersions

	if all {
		switch v := interface{}(m.GetCreateTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DataTokenValidationError{
					field:  "CreateTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DataTokenValidationError{
					field:  "CreateTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreateTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DataTokenValidationError{
				field:  "CreateTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return DataTokenMultiError(errors)
	}

	return nil
}

// DataTokenMultiError is an error wrapping multiple validation errors returned
// by DataToken.ValidateAll() if the designated constraints aren't met.
type DataTokenMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DataTokenMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DataTokenMultiError) AllErrors() []error { return m }

// DataTokenValidationError is the validation error returned by
// DataToken.Validate if the designated constraints aren't met.
type DataTokenValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DataTokenValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DataTokenValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DataTokenValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DataTokenValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DataTokenValidationError) ErrorName() string { return "DataTokenValidationError" }

// Error satisfies the builtin error interface
func (e DataTokenValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDataToken.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DataTokenValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DataTokenValidationError{}

// Validate checks the field values on GetDataTokenRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetDataTokenRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetDataTokenRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetDataTokenRequestMultiError, or nil if none found.
func (m *GetDataTokenRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetDataTokenRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for DataTokenId

	if len(errors) > 0 {
		return GetDataTokenRequestMultiError(errors)
	}

	return nil
}

// GetDataTokenRequestMultiError is an error wrapping multiple validation
// errors returned by GetDataTokenRequest.ValidateAll() if the designated
// constraints aren't met.
type GetDataTokenRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetDataTokenRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetDataTokenRequestMultiError) AllErrors() []error { return m }

// GetDataTokenRequestValidationError is the validation error returned by
// GetDataTokenRequest.Validate if the designated constraints aren't met.
type GetDataTokenRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetDataTokenRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetDataTokenRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetDataTokenRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetDataTokenRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetDataTokenRequestValidationError) ErrorName() string {
	return "GetDataTokenRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetDataTokenRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetDataTokenRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetDataTokenRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetDataTokenRequestValidationError{}

// Validate checks the field values on GetDataTokenResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetDataTokenResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetDataTokenResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetDataTokenResponseMultiError, or nil if none found.
func (m *GetDataTokenResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetDataTokenResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetDataToken()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetDataTokenResponseValidationError{
					field:  "DataToken",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetDataTokenResponseValidationError{
					field:  "DataToken",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDataToken()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetDataTokenResponseValidationError{
				field:  "DataToken",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetRequestDetails()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetDataTokenResponseValidationError{
					field:  "RequestDetails",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetDataTokenResponseValidationError{
					field:  "RequestDetails",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRequestDetails()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetDataTokenResponseValidationError{
				field:  "RequestDetails",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetDataTokenResponseMultiError(errors)
	}

	return nil
}

// GetDataTokenResponseMultiError is an error wrapping multiple validation
// errors returned by GetDataTokenResponse.ValidateAll() if the designated
// constraints aren't met.
type GetDataTokenResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetDataTokenResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetDataTokenResponseMultiError) AllErrors() []error { return m }

// GetDataTokenResponseValidationError is the validation error returned by
// GetDataTokenResponse.Validate if the designated constraints aren't met.
type GetDataTokenResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetDataTokenResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetDataTokenResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetDataTokenResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetDataTokenResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetDataTokenResponseValidationError) ErrorName() string {
	return "GetDataTokenResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetDataTokenResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetDataTokenResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetDataTokenResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetDataTokenResponseValidationError{}
