// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0-devel
// 	protoc        (unknown)
// source: kaskada/kaskada/v1alpha/fenl_diagnostics.proto

package kaskadav1alpha

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Severity int32

const (
	Severity_SEVERITY_UNSPECIFIED Severity = 0
	Severity_SEVERITY_BUG         Severity = 1
	Severity_SEVERITY_ERROR       Severity = 2
	Severity_SEVERITY_WARNING     Severity = 3
	Severity_SEVERITY_NOTE        Severity = 4
	Severity_SEVERITY_HELP        Severity = 5
)

// Enum value maps for Severity.
var (
	Severity_name = map[int32]string{
		0: "SEVERITY_UNSPECIFIED",
		1: "SEVERITY_BUG",
		2: "SEVERITY_ERROR",
		3: "SEVERITY_WARNING",
		4: "SEVERITY_NOTE",
		5: "SEVERITY_HELP",
	}
	Severity_value = map[string]int32{
		"SEVERITY_UNSPECIFIED": 0,
		"SEVERITY_BUG":         1,
		"SEVERITY_ERROR":       2,
		"SEVERITY_WARNING":     3,
		"SEVERITY_NOTE":        4,
		"SEVERITY_HELP":        5,
	}
)

func (x Severity) Enum() *Severity {
	p := new(Severity)
	*p = x
	return p
}

func (x Severity) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Severity) Descriptor() protoreflect.EnumDescriptor {
	return file_kaskada_kaskada_v1alpha_fenl_diagnostics_proto_enumTypes[0].Descriptor()
}

func (Severity) Type() protoreflect.EnumType {
	return &file_kaskada_kaskada_v1alpha_fenl_diagnostics_proto_enumTypes[0]
}

func (x Severity) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Severity.Descriptor instead.
func (Severity) EnumDescriptor() ([]byte, []int) {
	return file_kaskada_kaskada_v1alpha_fenl_diagnostics_proto_rawDescGZIP(), []int{0}
}

type FenlDiagnostics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FenlDiagnostics []*FenlDiagnostic `protobuf:"bytes,1,rep,name=fenl_diagnostics,json=fenlDiagnostics,proto3" json:"fenl_diagnostics,omitempty"`
	NumErrors       int64             `protobuf:"varint,2,opt,name=num_errors,json=numErrors,proto3" json:"num_errors,omitempty"`
}

func (x *FenlDiagnostics) Reset() {
	*x = FenlDiagnostics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kaskada_kaskada_v1alpha_fenl_diagnostics_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FenlDiagnostics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FenlDiagnostics) ProtoMessage() {}

func (x *FenlDiagnostics) ProtoReflect() protoreflect.Message {
	mi := &file_kaskada_kaskada_v1alpha_fenl_diagnostics_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FenlDiagnostics.ProtoReflect.Descriptor instead.
func (*FenlDiagnostics) Descriptor() ([]byte, []int) {
	return file_kaskada_kaskada_v1alpha_fenl_diagnostics_proto_rawDescGZIP(), []int{0}
}

func (x *FenlDiagnostics) GetFenlDiagnostics() []*FenlDiagnostic {
	if x != nil {
		return x.FenlDiagnostics
	}
	return nil
}

func (x *FenlDiagnostics) GetNumErrors() int64 {
	if x != nil {
		return x.NumErrors
	}
	return 0
}

type FenlDiagnostic struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Severity Severity `protobuf:"varint,1,opt,name=severity,proto3,enum=kaskada.kaskada.v1alpha.Severity" json:"severity,omitempty"`
	// The error code associated with this diagnostic.
	// Uniquely identifies the *kind* of problem being reported.
	// Example: "E0001".
	Code string `protobuf:"bytes,2,opt,name=code,proto3" json:"code,omitempty"`
	// The message associated with the code.
	// Example: "Undefined field reference".
	Message string `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
	// The full formatted diagnostic, suitable for display purposes.
	Formatted string `protobuf:"bytes,4,opt,name=formatted,proto3" json:"formatted,omitempty"`
}

func (x *FenlDiagnostic) Reset() {
	*x = FenlDiagnostic{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kaskada_kaskada_v1alpha_fenl_diagnostics_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FenlDiagnostic) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FenlDiagnostic) ProtoMessage() {}

func (x *FenlDiagnostic) ProtoReflect() protoreflect.Message {
	mi := &file_kaskada_kaskada_v1alpha_fenl_diagnostics_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FenlDiagnostic.ProtoReflect.Descriptor instead.
func (*FenlDiagnostic) Descriptor() ([]byte, []int) {
	return file_kaskada_kaskada_v1alpha_fenl_diagnostics_proto_rawDescGZIP(), []int{1}
}

func (x *FenlDiagnostic) GetSeverity() Severity {
	if x != nil {
		return x.Severity
	}
	return Severity_SEVERITY_UNSPECIFIED
}

func (x *FenlDiagnostic) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *FenlDiagnostic) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *FenlDiagnostic) GetFormatted() string {
	if x != nil {
		return x.Formatted
	}
	return ""
}

var File_kaskada_kaskada_v1alpha_fenl_diagnostics_proto protoreflect.FileDescriptor

var file_kaskada_kaskada_v1alpha_fenl_diagnostics_proto_rawDesc = []byte{
	0x0a, 0x2e, 0x6b, 0x61, 0x73, 0x6b, 0x61, 0x64, 0x61, 0x2f, 0x6b, 0x61, 0x73, 0x6b, 0x61, 0x64,
	0x61, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2f, 0x66, 0x65, 0x6e, 0x6c, 0x5f, 0x64,
	0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x17, 0x6b, 0x61, 0x73, 0x6b, 0x61, 0x64, 0x61, 0x2e, 0x6b, 0x61, 0x73, 0x6b, 0x61, 0x64,
	0x61, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x22, 0x84, 0x01, 0x0a, 0x0f, 0x46, 0x65,
	0x6e, 0x6c, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x73, 0x12, 0x52, 0x0a,
	0x10, 0x66, 0x65, 0x6e, 0x6c, 0x5f, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x6b, 0x61, 0x73, 0x6b, 0x61, 0x64,
	0x61, 0x2e, 0x6b, 0x61, 0x73, 0x6b, 0x61, 0x64, 0x61, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x2e, 0x46, 0x65, 0x6e, 0x6c, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63,
	0x52, 0x0f, 0x66, 0x65, 0x6e, 0x6c, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63,
	0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x6e, 0x75, 0x6d, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6e, 0x75, 0x6d, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73,
	0x22, 0x9b, 0x01, 0x0a, 0x0e, 0x46, 0x65, 0x6e, 0x6c, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73,
	0x74, 0x69, 0x63, 0x12, 0x3d, 0x0a, 0x08, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x6b, 0x61, 0x73, 0x6b, 0x61, 0x64, 0x61, 0x2e,
	0x6b, 0x61, 0x73, 0x6b, 0x61, 0x64, 0x61, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e,
	0x53, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x52, 0x08, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69,
	0x74, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x12, 0x1c, 0x0a, 0x09, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x74, 0x65, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x74, 0x65, 0x64, 0x2a, 0x86,
	0x01, 0x0a, 0x08, 0x53, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x12, 0x18, 0x0a, 0x14, 0x53,
	0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46,
	0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54,
	0x59, 0x5f, 0x42, 0x55, 0x47, 0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x45, 0x56, 0x45, 0x52,
	0x49, 0x54, 0x59, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x02, 0x12, 0x14, 0x0a, 0x10, 0x53,
	0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x57, 0x41, 0x52, 0x4e, 0x49, 0x4e, 0x47, 0x10,
	0x03, 0x12, 0x11, 0x0a, 0x0d, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x4e, 0x4f,
	0x54, 0x45, 0x10, 0x04, 0x12, 0x11, 0x0a, 0x0d, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59,
	0x5f, 0x48, 0x45, 0x4c, 0x50, 0x10, 0x05, 0x42, 0x80, 0x02, 0x0a, 0x1b, 0x63, 0x6f, 0x6d, 0x2e,
	0x6b, 0x61, 0x73, 0x6b, 0x61, 0x64, 0x61, 0x2e, 0x6b, 0x61, 0x73, 0x6b, 0x61, 0x64, 0x61, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x42, 0x14, 0x46, 0x65, 0x6e, 0x6c, 0x44, 0x69, 0x61,
	0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a,
	0x4d, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6b, 0x61, 0x73, 0x6b,
	0x61, 0x64, 0x61, 0x2f, 0x6b, 0x61, 0x73, 0x6b, 0x61, 0x64, 0x61, 0x2d, 0x61, 0x69, 0x2f, 0x77,
	0x72, 0x65, 0x6e, 0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x6b, 0x61, 0x73, 0x6b, 0x61, 0x64, 0x61, 0x2f,
	0x6b, 0x61, 0x73, 0x6b, 0x61, 0x64, 0x61, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x3b,
	0x6b, 0x61, 0x73, 0x6b, 0x61, 0x64, 0x61, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0xa2, 0x02,
	0x03, 0x4b, 0x4b, 0x58, 0xaa, 0x02, 0x17, 0x4b, 0x61, 0x73, 0x6b, 0x61, 0x64, 0x61, 0x2e, 0x4b,
	0x61, 0x73, 0x6b, 0x61, 0x64, 0x61, 0x2e, 0x56, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0xca, 0x02,
	0x17, 0x4b, 0x61, 0x73, 0x6b, 0x61, 0x64, 0x61, 0x5c, 0x4b, 0x61, 0x73, 0x6b, 0x61, 0x64, 0x61,
	0x5c, 0x56, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0xe2, 0x02, 0x23, 0x4b, 0x61, 0x73, 0x6b, 0x61,
	0x64, 0x61, 0x5c, 0x4b, 0x61, 0x73, 0x6b, 0x61, 0x64, 0x61, 0x5c, 0x56, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02,
	0x19, 0x4b, 0x61, 0x73, 0x6b, 0x61, 0x64, 0x61, 0x3a, 0x3a, 0x4b, 0x61, 0x73, 0x6b, 0x61, 0x64,
	0x61, 0x3a, 0x3a, 0x56, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_kaskada_kaskada_v1alpha_fenl_diagnostics_proto_rawDescOnce sync.Once
	file_kaskada_kaskada_v1alpha_fenl_diagnostics_proto_rawDescData = file_kaskada_kaskada_v1alpha_fenl_diagnostics_proto_rawDesc
)

func file_kaskada_kaskada_v1alpha_fenl_diagnostics_proto_rawDescGZIP() []byte {
	file_kaskada_kaskada_v1alpha_fenl_diagnostics_proto_rawDescOnce.Do(func() {
		file_kaskada_kaskada_v1alpha_fenl_diagnostics_proto_rawDescData = protoimpl.X.CompressGZIP(file_kaskada_kaskada_v1alpha_fenl_diagnostics_proto_rawDescData)
	})
	return file_kaskada_kaskada_v1alpha_fenl_diagnostics_proto_rawDescData
}

var file_kaskada_kaskada_v1alpha_fenl_diagnostics_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_kaskada_kaskada_v1alpha_fenl_diagnostics_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_kaskada_kaskada_v1alpha_fenl_diagnostics_proto_goTypes = []interface{}{
	(Severity)(0),           // 0: kaskada.kaskada.v1alpha.Severity
	(*FenlDiagnostics)(nil), // 1: kaskada.kaskada.v1alpha.FenlDiagnostics
	(*FenlDiagnostic)(nil),  // 2: kaskada.kaskada.v1alpha.FenlDiagnostic
}
var file_kaskada_kaskada_v1alpha_fenl_diagnostics_proto_depIdxs = []int32{
	2, // 0: kaskada.kaskada.v1alpha.FenlDiagnostics.fenl_diagnostics:type_name -> kaskada.kaskada.v1alpha.FenlDiagnostic
	0, // 1: kaskada.kaskada.v1alpha.FenlDiagnostic.severity:type_name -> kaskada.kaskada.v1alpha.Severity
	2, // [2:2] is the sub-list for method output_type
	2, // [2:2] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_kaskada_kaskada_v1alpha_fenl_diagnostics_proto_init() }
func file_kaskada_kaskada_v1alpha_fenl_diagnostics_proto_init() {
	if File_kaskada_kaskada_v1alpha_fenl_diagnostics_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_kaskada_kaskada_v1alpha_fenl_diagnostics_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FenlDiagnostics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kaskada_kaskada_v1alpha_fenl_diagnostics_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FenlDiagnostic); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_kaskada_kaskada_v1alpha_fenl_diagnostics_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_kaskada_kaskada_v1alpha_fenl_diagnostics_proto_goTypes,
		DependencyIndexes: file_kaskada_kaskada_v1alpha_fenl_diagnostics_proto_depIdxs,
		EnumInfos:         file_kaskada_kaskada_v1alpha_fenl_diagnostics_proto_enumTypes,
		MessageInfos:      file_kaskada_kaskada_v1alpha_fenl_diagnostics_proto_msgTypes,
	}.Build()
	File_kaskada_kaskada_v1alpha_fenl_diagnostics_proto = out.File
	file_kaskada_kaskada_v1alpha_fenl_diagnostics_proto_rawDesc = nil
	file_kaskada_kaskada_v1alpha_fenl_diagnostics_proto_goTypes = nil
	file_kaskada_kaskada_v1alpha_fenl_diagnostics_proto_depIdxs = nil
}
