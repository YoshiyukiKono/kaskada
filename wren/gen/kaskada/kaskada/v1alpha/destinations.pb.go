// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0-devel
// 	protoc        (unknown)
// source: kaskada/kaskada/v1alpha/destinations.proto

package kaskadav1alpha

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ObjectStoreDestination struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FileType FileType `protobuf:"varint,1,opt,name=file_type,json=fileType,proto3,enum=kaskada.kaskada.v1alpha.FileType" json:"file_type,omitempty"`
	// The uri of where to push output to.
	//
	// examples:
	// s3://my-bucket/path/to/results/
	// file:///local/path/to/results/
	OutputPrefixUri string `protobuf:"bytes,2,opt,name=output_prefix_uri,json=outputPrefixUri,proto3" json:"output_prefix_uri,omitempty"`
}

func (x *ObjectStoreDestination) Reset() {
	*x = ObjectStoreDestination{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kaskada_kaskada_v1alpha_destinations_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ObjectStoreDestination) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ObjectStoreDestination) ProtoMessage() {}

func (x *ObjectStoreDestination) ProtoReflect() protoreflect.Message {
	mi := &file_kaskada_kaskada_v1alpha_destinations_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ObjectStoreDestination.ProtoReflect.Descriptor instead.
func (*ObjectStoreDestination) Descriptor() ([]byte, []int) {
	return file_kaskada_kaskada_v1alpha_destinations_proto_rawDescGZIP(), []int{0}
}

func (x *ObjectStoreDestination) GetFileType() FileType {
	if x != nil {
		return x.FileType
	}
	return FileType_FILE_TYPE_UNSPECIFIED
}

func (x *ObjectStoreDestination) GetOutputPrefixUri() string {
	if x != nil {
		return x.OutputPrefixUri
	}
	return ""
}

type RedisDestination struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The hostname of the Redis instance.
	HostName string `protobuf:"bytes,1,opt,name=host_name,json=hostName,proto3" json:"host_name,omitempty"`
	// The port of the Redis instance.
	Port int32 `protobuf:"varint,2,opt,name=port,proto3" json:"port,omitempty"`
	// When `true`, TLS will be used to connect to Redis.
	UseTls bool `protobuf:"varint,3,opt,name=use_tls,json=useTls,proto3" json:"use_tls,omitempty"`
	// The Redis database number 0 to 15.
	DatabaseNumber int32 `protobuf:"varint,4,opt,name=database_number,json=databaseNumber,proto3" json:"database_number,omitempty"`
	// The password to connect to the Redis instance
	Password string `protobuf:"bytes,5,opt,name=password,proto3" json:"password,omitempty"`
	// An X.509 certificate to use for authenticating the server
	// to connected clients, masters or cluster peers.
	// The string should be PEM formatted.
	TlsCert string `protobuf:"bytes,6,opt,name=tls_cert,json=tlsCert,proto3" json:"tls_cert,omitempty"`
	// An X.509 private key to use for authenticating the server
	// to connected clients, masters or cluster peers.
	// The string should be PEM formatted.
	TlsKey string `protobuf:"bytes,7,opt,name=tls_key,json=tlsKey,proto3" json:"tls_key,omitempty"`
	// A PEM encoded CA's certificate.
	TlsCaCert string `protobuf:"bytes,8,opt,name=tls_ca_cert,json=tlsCaCert,proto3" json:"tls_ca_cert,omitempty"`
	// InsecureSkipVerify controls whether a client verifies the
	// server's certificate chain and host name.
	// If this field is true, TLS accepts any certificate
	// presented by the server and any host name in that certificate.
	// In this mode, TLS is susceptible to man-in-the-middle attacks.
	// This should be used only for testing.
	InsecureSkipVerify bool `protobuf:"varint,9,opt,name=insecure_skip_verify,json=insecureSkipVerify,proto3" json:"insecure_skip_verify,omitempty"`
}

func (x *RedisDestination) Reset() {
	*x = RedisDestination{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kaskada_kaskada_v1alpha_destinations_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RedisDestination) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RedisDestination) ProtoMessage() {}

func (x *RedisDestination) ProtoReflect() protoreflect.Message {
	mi := &file_kaskada_kaskada_v1alpha_destinations_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RedisDestination.ProtoReflect.Descriptor instead.
func (*RedisDestination) Descriptor() ([]byte, []int) {
	return file_kaskada_kaskada_v1alpha_destinations_proto_rawDescGZIP(), []int{1}
}

func (x *RedisDestination) GetHostName() string {
	if x != nil {
		return x.HostName
	}
	return ""
}

func (x *RedisDestination) GetPort() int32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *RedisDestination) GetUseTls() bool {
	if x != nil {
		return x.UseTls
	}
	return false
}

func (x *RedisDestination) GetDatabaseNumber() int32 {
	if x != nil {
		return x.DatabaseNumber
	}
	return 0
}

func (x *RedisDestination) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *RedisDestination) GetTlsCert() string {
	if x != nil {
		return x.TlsCert
	}
	return ""
}

func (x *RedisDestination) GetTlsKey() string {
	if x != nil {
		return x.TlsKey
	}
	return ""
}

func (x *RedisDestination) GetTlsCaCert() string {
	if x != nil {
		return x.TlsCaCert
	}
	return ""
}

func (x *RedisDestination) GetInsecureSkipVerify() bool {
	if x != nil {
		return x.InsecureSkipVerify
	}
	return false
}

type PulsarDestination struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The topic tenant within the instance.
	//
	// Defaults to "public".
	Tenant string `protobuf:"bytes,1,opt,name=tenant,proto3" json:"tenant,omitempty"`
	// The administrative unit of topics, which acts as a grouping
	// mechanism for related topics.
	//
	// Defaults to "default".
	Namespace string `protobuf:"bytes,2,opt,name=namespace,proto3" json:"namespace,omitempty"`
	// The final part of the topic url.
	//
	// e.g. "persistent://{tenant}/{namespace}/{topic_name}"
	// Supplied by the manager, a unique identifier that
	// ties the topic to a specific materialization.
	TopicName string `protobuf:"bytes,3,opt,name=topic_name,json=topicName,proto3" json:"topic_name,omitempty"`
	// The Pulsar protocol URL for the cluster.
	//
	// Defaults to "pulsar://127.0.0.1:6650".
	BrokerServiceUrl string `protobuf:"bytes,4,opt,name=broker_service_url,json=brokerServiceUrl,proto3" json:"broker_service_url,omitempty"`
}

func (x *PulsarDestination) Reset() {
	*x = PulsarDestination{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kaskada_kaskada_v1alpha_destinations_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PulsarDestination) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PulsarDestination) ProtoMessage() {}

func (x *PulsarDestination) ProtoReflect() protoreflect.Message {
	mi := &file_kaskada_kaskada_v1alpha_destinations_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PulsarDestination.ProtoReflect.Descriptor instead.
func (*PulsarDestination) Descriptor() ([]byte, []int) {
	return file_kaskada_kaskada_v1alpha_destinations_proto_rawDescGZIP(), []int{2}
}

func (x *PulsarDestination) GetTenant() string {
	if x != nil {
		return x.Tenant
	}
	return ""
}

func (x *PulsarDestination) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *PulsarDestination) GetTopicName() string {
	if x != nil {
		return x.TopicName
	}
	return ""
}

func (x *PulsarDestination) GetBrokerServiceUrl() string {
	if x != nil {
		return x.BrokerServiceUrl
	}
	return ""
}

var File_kaskada_kaskada_v1alpha_destinations_proto protoreflect.FileDescriptor

var file_kaskada_kaskada_v1alpha_destinations_proto_rawDesc = []byte{
	0x0a, 0x2a, 0x6b, 0x61, 0x73, 0x6b, 0x61, 0x64, 0x61, 0x2f, 0x6b, 0x61, 0x73, 0x6b, 0x61, 0x64,
	0x61, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2f, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x17, 0x6b, 0x61,
	0x73, 0x6b, 0x61, 0x64, 0x61, 0x2e, 0x6b, 0x61, 0x73, 0x6b, 0x61, 0x64, 0x61, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x1a, 0x24, 0x6b, 0x61, 0x73, 0x6b, 0x61, 0x64, 0x61, 0x2f, 0x6b,
	0x61, 0x73, 0x6b, 0x61, 0x64, 0x61, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2f, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x84, 0x01, 0x0a, 0x16,
	0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x44, 0x65, 0x73, 0x74, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3e, 0x0a, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x6b, 0x61, 0x73, 0x6b,
	0x61, 0x64, 0x61, 0x2e, 0x6b, 0x61, 0x73, 0x6b, 0x61, 0x64, 0x61, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x66, 0x69,
	0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74,
	0x5f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x5f, 0x75, 0x72, 0x69, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x55,
	0x72, 0x69, 0x22, 0xa7, 0x02, 0x0a, 0x10, 0x52, 0x65, 0x64, 0x69, 0x73, 0x44, 0x65, 0x73, 0x74,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x68, 0x6f, 0x73, 0x74, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x68, 0x6f, 0x73, 0x74,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x5f,
	0x74, 0x6c, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x75, 0x73, 0x65, 0x54, 0x6c,
	0x73, 0x12, 0x27, 0x0a, 0x0f, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x6e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x64, 0x61, 0x74, 0x61,
	0x62, 0x61, 0x73, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61,
	0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61,
	0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x6c, 0x73, 0x5f, 0x63, 0x65,
	0x72, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x6c, 0x73, 0x43, 0x65, 0x72,
	0x74, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x6c, 0x73, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x74, 0x6c, 0x73, 0x4b, 0x65, 0x79, 0x12, 0x1e, 0x0a, 0x0b, 0x74, 0x6c,
	0x73, 0x5f, 0x63, 0x61, 0x5f, 0x63, 0x65, 0x72, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x74, 0x6c, 0x73, 0x43, 0x61, 0x43, 0x65, 0x72, 0x74, 0x12, 0x30, 0x0a, 0x14, 0x69, 0x6e,
	0x73, 0x65, 0x63, 0x75, 0x72, 0x65, 0x5f, 0x73, 0x6b, 0x69, 0x70, 0x5f, 0x76, 0x65, 0x72, 0x69,
	0x66, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x69, 0x6e, 0x73, 0x65, 0x63, 0x75,
	0x72, 0x65, 0x53, 0x6b, 0x69, 0x70, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x22, 0x96, 0x01, 0x0a,
	0x11, 0x50, 0x75, 0x6c, 0x73, 0x61, 0x72, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x61,
	0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e,
	0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x6f, 0x70, 0x69,
	0x63, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x6f,
	0x70, 0x69, 0x63, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x62, 0x72, 0x6f, 0x6b, 0x65,
	0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x10, 0x62, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x55, 0x72, 0x6c, 0x42, 0xfd, 0x01, 0x0a, 0x1b, 0x63, 0x6f, 0x6d, 0x2e, 0x6b, 0x61,
	0x73, 0x6b, 0x61, 0x64, 0x61, 0x2e, 0x6b, 0x61, 0x73, 0x6b, 0x61, 0x64, 0x61, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x42, 0x11, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x4d, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6b, 0x61, 0x73, 0x6b, 0x61, 0x64, 0x61, 0x2f, 0x6b,
	0x61, 0x73, 0x6b, 0x61, 0x64, 0x61, 0x2d, 0x61, 0x69, 0x2f, 0x77, 0x72, 0x65, 0x6e, 0x2f, 0x67,
	0x65, 0x6e, 0x2f, 0x6b, 0x61, 0x73, 0x6b, 0x61, 0x64, 0x61, 0x2f, 0x6b, 0x61, 0x73, 0x6b, 0x61,
	0x64, 0x61, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x3b, 0x6b, 0x61, 0x73, 0x6b, 0x61,
	0x64, 0x61, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0xa2, 0x02, 0x03, 0x4b, 0x4b, 0x58, 0xaa,
	0x02, 0x17, 0x4b, 0x61, 0x73, 0x6b, 0x61, 0x64, 0x61, 0x2e, 0x4b, 0x61, 0x73, 0x6b, 0x61, 0x64,
	0x61, 0x2e, 0x56, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0xca, 0x02, 0x17, 0x4b, 0x61, 0x73, 0x6b,
	0x61, 0x64, 0x61, 0x5c, 0x4b, 0x61, 0x73, 0x6b, 0x61, 0x64, 0x61, 0x5c, 0x56, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0xe2, 0x02, 0x23, 0x4b, 0x61, 0x73, 0x6b, 0x61, 0x64, 0x61, 0x5c, 0x4b, 0x61,
	0x73, 0x6b, 0x61, 0x64, 0x61, 0x5c, 0x56, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x5c, 0x47, 0x50,
	0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x19, 0x4b, 0x61, 0x73, 0x6b,
	0x61, 0x64, 0x61, 0x3a, 0x3a, 0x4b, 0x61, 0x73, 0x6b, 0x61, 0x64, 0x61, 0x3a, 0x3a, 0x56, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_kaskada_kaskada_v1alpha_destinations_proto_rawDescOnce sync.Once
	file_kaskada_kaskada_v1alpha_destinations_proto_rawDescData = file_kaskada_kaskada_v1alpha_destinations_proto_rawDesc
)

func file_kaskada_kaskada_v1alpha_destinations_proto_rawDescGZIP() []byte {
	file_kaskada_kaskada_v1alpha_destinations_proto_rawDescOnce.Do(func() {
		file_kaskada_kaskada_v1alpha_destinations_proto_rawDescData = protoimpl.X.CompressGZIP(file_kaskada_kaskada_v1alpha_destinations_proto_rawDescData)
	})
	return file_kaskada_kaskada_v1alpha_destinations_proto_rawDescData
}

var file_kaskada_kaskada_v1alpha_destinations_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_kaskada_kaskada_v1alpha_destinations_proto_goTypes = []interface{}{
	(*ObjectStoreDestination)(nil), // 0: kaskada.kaskada.v1alpha.ObjectStoreDestination
	(*RedisDestination)(nil),       // 1: kaskada.kaskada.v1alpha.RedisDestination
	(*PulsarDestination)(nil),      // 2: kaskada.kaskada.v1alpha.PulsarDestination
	(FileType)(0),                  // 3: kaskada.kaskada.v1alpha.FileType
}
var file_kaskada_kaskada_v1alpha_destinations_proto_depIdxs = []int32{
	3, // 0: kaskada.kaskada.v1alpha.ObjectStoreDestination.file_type:type_name -> kaskada.kaskada.v1alpha.FileType
	1, // [1:1] is the sub-list for method output_type
	1, // [1:1] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_kaskada_kaskada_v1alpha_destinations_proto_init() }
func file_kaskada_kaskada_v1alpha_destinations_proto_init() {
	if File_kaskada_kaskada_v1alpha_destinations_proto != nil {
		return
	}
	file_kaskada_kaskada_v1alpha_common_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_kaskada_kaskada_v1alpha_destinations_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ObjectStoreDestination); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kaskada_kaskada_v1alpha_destinations_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RedisDestination); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kaskada_kaskada_v1alpha_destinations_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PulsarDestination); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_kaskada_kaskada_v1alpha_destinations_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_kaskada_kaskada_v1alpha_destinations_proto_goTypes,
		DependencyIndexes: file_kaskada_kaskada_v1alpha_destinations_proto_depIdxs,
		MessageInfos:      file_kaskada_kaskada_v1alpha_destinations_proto_msgTypes,
	}.Build()
	File_kaskada_kaskada_v1alpha_destinations_proto = out.File
	file_kaskada_kaskada_v1alpha_destinations_proto_rawDesc = nil
	file_kaskada_kaskada_v1alpha_destinations_proto_goTypes = nil
	file_kaskada_kaskada_v1alpha_destinations_proto_depIdxs = nil
}
