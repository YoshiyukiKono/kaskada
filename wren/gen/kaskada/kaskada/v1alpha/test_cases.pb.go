// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0-devel
// 	protoc        (unknown)
// source: kaskada/kaskada/v1alpha/test_cases.proto

package kaskadav1alpha

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type RedactTestCase struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RootSafeValue           string                           `protobuf:"bytes,1,opt,name=root_safe_value,json=rootSafeValue,proto3" json:"root_safe_value,omitempty"`
	RootSensitiveValue      string                           `protobuf:"bytes,2,opt,name=root_sensitive_value,json=rootSensitiveValue,proto3" json:"root_sensitive_value,omitempty"`
	RepeatedSensitiveValues []string                         `protobuf:"bytes,3,rep,name=repeated_sensitive_values,json=repeatedSensitiveValues,proto3" json:"repeated_sensitive_values,omitempty"`
	RootEmbeddedObject      *RedactTestCase_EmbeddedObject   `protobuf:"bytes,4,opt,name=root_embedded_object,json=rootEmbeddedObject,proto3" json:"root_embedded_object,omitempty"`
	RepeatedEmbeddedObject  []*RedactTestCase_EmbeddedObject `protobuf:"bytes,5,rep,name=repeated_embedded_object,json=repeatedEmbeddedObject,proto3" json:"repeated_embedded_object,omitempty"`
	// Types that are assignable to OneOfTest:
	//	*RedactTestCase_OneOfSafeValue
	//	*RedactTestCase_OneOfSensitiveValue
	//	*RedactTestCase_OneOfEmbeddedValue
	OneOfTest          isRedactTestCase_OneOfTest                `protobuf_oneof:"one_of_test"`
	MapSensitiveValues map[string]string                         `protobuf:"bytes,10,rep,name=map_sensitive_values,json=mapSensitiveValues,proto3" json:"map_sensitive_values,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	MapEmbeddedObjects map[string]*RedactTestCase_EmbeddedObject `protobuf:"bytes,11,rep,name=map_embedded_objects,json=mapEmbeddedObjects,proto3" json:"map_embedded_objects,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *RedactTestCase) Reset() {
	*x = RedactTestCase{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kaskada_kaskada_v1alpha_test_cases_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RedactTestCase) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RedactTestCase) ProtoMessage() {}

func (x *RedactTestCase) ProtoReflect() protoreflect.Message {
	mi := &file_kaskada_kaskada_v1alpha_test_cases_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RedactTestCase.ProtoReflect.Descriptor instead.
func (*RedactTestCase) Descriptor() ([]byte, []int) {
	return file_kaskada_kaskada_v1alpha_test_cases_proto_rawDescGZIP(), []int{0}
}

func (x *RedactTestCase) GetRootSafeValue() string {
	if x != nil {
		return x.RootSafeValue
	}
	return ""
}

func (x *RedactTestCase) GetRootSensitiveValue() string {
	if x != nil {
		return x.RootSensitiveValue
	}
	return ""
}

func (x *RedactTestCase) GetRepeatedSensitiveValues() []string {
	if x != nil {
		return x.RepeatedSensitiveValues
	}
	return nil
}

func (x *RedactTestCase) GetRootEmbeddedObject() *RedactTestCase_EmbeddedObject {
	if x != nil {
		return x.RootEmbeddedObject
	}
	return nil
}

func (x *RedactTestCase) GetRepeatedEmbeddedObject() []*RedactTestCase_EmbeddedObject {
	if x != nil {
		return x.RepeatedEmbeddedObject
	}
	return nil
}

func (m *RedactTestCase) GetOneOfTest() isRedactTestCase_OneOfTest {
	if m != nil {
		return m.OneOfTest
	}
	return nil
}

func (x *RedactTestCase) GetOneOfSafeValue() string {
	if x, ok := x.GetOneOfTest().(*RedactTestCase_OneOfSafeValue); ok {
		return x.OneOfSafeValue
	}
	return ""
}

func (x *RedactTestCase) GetOneOfSensitiveValue() string {
	if x, ok := x.GetOneOfTest().(*RedactTestCase_OneOfSensitiveValue); ok {
		return x.OneOfSensitiveValue
	}
	return ""
}

func (x *RedactTestCase) GetOneOfEmbeddedValue() *RedactTestCase_EmbeddedObject {
	if x, ok := x.GetOneOfTest().(*RedactTestCase_OneOfEmbeddedValue); ok {
		return x.OneOfEmbeddedValue
	}
	return nil
}

func (x *RedactTestCase) GetMapSensitiveValues() map[string]string {
	if x != nil {
		return x.MapSensitiveValues
	}
	return nil
}

func (x *RedactTestCase) GetMapEmbeddedObjects() map[string]*RedactTestCase_EmbeddedObject {
	if x != nil {
		return x.MapEmbeddedObjects
	}
	return nil
}

type isRedactTestCase_OneOfTest interface {
	isRedactTestCase_OneOfTest()
}

type RedactTestCase_OneOfSafeValue struct {
	OneOfSafeValue string `protobuf:"bytes,7,opt,name=one_of_safe_value,json=oneOfSafeValue,proto3,oneof"`
}

type RedactTestCase_OneOfSensitiveValue struct {
	OneOfSensitiveValue string `protobuf:"bytes,8,opt,name=one_of_sensitive_value,json=oneOfSensitiveValue,proto3,oneof"`
}

type RedactTestCase_OneOfEmbeddedValue struct {
	OneOfEmbeddedValue *RedactTestCase_EmbeddedObject `protobuf:"bytes,9,opt,name=one_of_embedded_value,json=oneOfEmbeddedValue,proto3,oneof"`
}

func (*RedactTestCase_OneOfSafeValue) isRedactTestCase_OneOfTest() {}

func (*RedactTestCase_OneOfSensitiveValue) isRedactTestCase_OneOfTest() {}

func (*RedactTestCase_OneOfEmbeddedValue) isRedactTestCase_OneOfTest() {}

type RedactTestCase_EmbeddedObject struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SafeString      string `protobuf:"bytes,1,opt,name=safe_string,json=safeString,proto3" json:"safe_string,omitempty"`
	SensitiveString string `protobuf:"bytes,2,opt,name=sensitive_string,json=sensitiveString,proto3" json:"sensitive_string,omitempty"`
}

func (x *RedactTestCase_EmbeddedObject) Reset() {
	*x = RedactTestCase_EmbeddedObject{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kaskada_kaskada_v1alpha_test_cases_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RedactTestCase_EmbeddedObject) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RedactTestCase_EmbeddedObject) ProtoMessage() {}

func (x *RedactTestCase_EmbeddedObject) ProtoReflect() protoreflect.Message {
	mi := &file_kaskada_kaskada_v1alpha_test_cases_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RedactTestCase_EmbeddedObject.ProtoReflect.Descriptor instead.
func (*RedactTestCase_EmbeddedObject) Descriptor() ([]byte, []int) {
	return file_kaskada_kaskada_v1alpha_test_cases_proto_rawDescGZIP(), []int{0, 2}
}

func (x *RedactTestCase_EmbeddedObject) GetSafeString() string {
	if x != nil {
		return x.SafeString
	}
	return ""
}

func (x *RedactTestCase_EmbeddedObject) GetSensitiveString() string {
	if x != nil {
		return x.SensitiveString
	}
	return ""
}

var File_kaskada_kaskada_v1alpha_test_cases_proto protoreflect.FileDescriptor

var file_kaskada_kaskada_v1alpha_test_cases_proto_rawDesc = []byte{
	0x0a, 0x28, 0x6b, 0x61, 0x73, 0x6b, 0x61, 0x64, 0x61, 0x2f, 0x6b, 0x61, 0x73, 0x6b, 0x61, 0x64,
	0x61, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x63,
	0x61, 0x73, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x17, 0x6b, 0x61, 0x73, 0x6b,
	0x61, 0x64, 0x61, 0x2e, 0x6b, 0x61, 0x73, 0x6b, 0x61, 0x64, 0x61, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x1a, 0x25, 0x6b, 0x61, 0x73, 0x6b, 0x61, 0x64, 0x61, 0x2f, 0x6b, 0x61, 0x73,
	0x6b, 0x61, 0x64, 0x61, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2f, 0x6f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x90, 0x09, 0x0a, 0x0e, 0x52,
	0x65, 0x64, 0x61, 0x63, 0x74, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x12, 0x26, 0x0a,
	0x0f, 0x72, 0x6f, 0x6f, 0x74, 0x5f, 0x73, 0x61, 0x66, 0x65, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x72, 0x6f, 0x6f, 0x74, 0x53, 0x61, 0x66, 0x65,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x36, 0x0a, 0x14, 0x72, 0x6f, 0x6f, 0x74, 0x5f, 0x73, 0x65,
	0x6e, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x01, 0x52, 0x12, 0x72, 0x6f, 0x6f, 0x74, 0x53,
	0x65, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x40, 0x0a,
	0x19, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x73, 0x65, 0x6e, 0x73, 0x69, 0x74,
	0x69, 0x76, 0x65, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09,
	0x42, 0x04, 0x80, 0xb5, 0x18, 0x01, 0x52, 0x17, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x53, 0x65, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12,
	0x68, 0x0a, 0x14, 0x72, 0x6f, 0x6f, 0x74, 0x5f, 0x65, 0x6d, 0x62, 0x65, 0x64, 0x64, 0x65, 0x64,
	0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e,
	0x6b, 0x61, 0x73, 0x6b, 0x61, 0x64, 0x61, 0x2e, 0x6b, 0x61, 0x73, 0x6b, 0x61, 0x64, 0x61, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x52, 0x65, 0x64, 0x61, 0x63, 0x74, 0x54, 0x65,
	0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x2e, 0x45, 0x6d, 0x62, 0x65, 0x64, 0x64, 0x65, 0x64, 0x4f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x12, 0x72, 0x6f, 0x6f, 0x74, 0x45, 0x6d, 0x62, 0x65, 0x64,
	0x64, 0x65, 0x64, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x70, 0x0a, 0x18, 0x72, 0x65, 0x70,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x65, 0x6d, 0x62, 0x65, 0x64, 0x64, 0x65, 0x64, 0x5f, 0x6f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x6b, 0x61,
	0x73, 0x6b, 0x61, 0x64, 0x61, 0x2e, 0x6b, 0x61, 0x73, 0x6b, 0x61, 0x64, 0x61, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x52, 0x65, 0x64, 0x61, 0x63, 0x74, 0x54, 0x65, 0x73, 0x74,
	0x43, 0x61, 0x73, 0x65, 0x2e, 0x45, 0x6d, 0x62, 0x65, 0x64, 0x64, 0x65, 0x64, 0x4f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x52, 0x16, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x45, 0x6d, 0x62,
	0x65, 0x64, 0x64, 0x65, 0x64, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x2b, 0x0a, 0x11, 0x6f,
	0x6e, 0x65, 0x5f, 0x6f, 0x66, 0x5f, 0x73, 0x61, 0x66, 0x65, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0e, 0x6f, 0x6e, 0x65, 0x4f, 0x66, 0x53,
	0x61, 0x66, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x3b, 0x0a, 0x16, 0x6f, 0x6e, 0x65, 0x5f,
	0x6f, 0x66, 0x5f, 0x73, 0x65, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x01, 0x48, 0x00,
	0x52, 0x13, 0x6f, 0x6e, 0x65, 0x4f, 0x66, 0x53, 0x65, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x6b, 0x0a, 0x15, 0x6f, 0x6e, 0x65, 0x5f, 0x6f, 0x66, 0x5f,
	0x65, 0x6d, 0x62, 0x65, 0x64, 0x64, 0x65, 0x64, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x6b, 0x61, 0x73, 0x6b, 0x61, 0x64, 0x61, 0x2e, 0x6b,
	0x61, 0x73, 0x6b, 0x61, 0x64, 0x61, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x52,
	0x65, 0x64, 0x61, 0x63, 0x74, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x2e, 0x45, 0x6d,
	0x62, 0x65, 0x64, 0x64, 0x65, 0x64, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x48, 0x00, 0x52, 0x12,
	0x6f, 0x6e, 0x65, 0x4f, 0x66, 0x45, 0x6d, 0x62, 0x65, 0x64, 0x64, 0x65, 0x64, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x77, 0x0a, 0x14, 0x6d, 0x61, 0x70, 0x5f, 0x73, 0x65, 0x6e, 0x73, 0x69, 0x74,
	0x69, 0x76, 0x65, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x3f, 0x2e, 0x6b, 0x61, 0x73, 0x6b, 0x61, 0x64, 0x61, 0x2e, 0x6b, 0x61, 0x73, 0x6b, 0x61,
	0x64, 0x61, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x52, 0x65, 0x64, 0x61, 0x63,
	0x74, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x2e, 0x4d, 0x61, 0x70, 0x53, 0x65, 0x6e,
	0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x01, 0x52, 0x12, 0x6d, 0x61, 0x70, 0x53, 0x65, 0x6e, 0x73,
	0x69, 0x74, 0x69, 0x76, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x71, 0x0a, 0x14, 0x6d,
	0x61, 0x70, 0x5f, 0x65, 0x6d, 0x62, 0x65, 0x64, 0x64, 0x65, 0x64, 0x5f, 0x6f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x6b, 0x61, 0x73, 0x6b,
	0x61, 0x64, 0x61, 0x2e, 0x6b, 0x61, 0x73, 0x6b, 0x61, 0x64, 0x61, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x2e, 0x52, 0x65, 0x64, 0x61, 0x63, 0x74, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61,
	0x73, 0x65, 0x2e, 0x4d, 0x61, 0x70, 0x45, 0x6d, 0x62, 0x65, 0x64, 0x64, 0x65, 0x64, 0x4f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x12, 0x6d, 0x61, 0x70, 0x45,
	0x6d, 0x62, 0x65, 0x64, 0x64, 0x65, 0x64, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x1a, 0x45,
	0x0a, 0x17, 0x4d, 0x61, 0x70, 0x53, 0x65, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x7d, 0x0a, 0x17, 0x4d, 0x61, 0x70, 0x45, 0x6d, 0x62, 0x65,
	0x64, 0x64, 0x65, 0x64, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x4c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x36, 0x2e, 0x6b, 0x61, 0x73, 0x6b, 0x61, 0x64, 0x61, 0x2e, 0x6b, 0x61, 0x73, 0x6b,
	0x61, 0x64, 0x61, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x52, 0x65, 0x64, 0x61,
	0x63, 0x74, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x2e, 0x45, 0x6d, 0x62, 0x65, 0x64,
	0x64, 0x65, 0x64, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x1a, 0x62, 0x0a, 0x0e, 0x45, 0x6d, 0x62, 0x65, 0x64, 0x64, 0x65, 0x64,
	0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x61, 0x66, 0x65, 0x5f, 0x73,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x61, 0x66,
	0x65, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x2f, 0x0a, 0x10, 0x73, 0x65, 0x6e, 0x73, 0x69,
	0x74, 0x69, 0x76, 0x65, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x01, 0x52, 0x0f, 0x73, 0x65, 0x6e, 0x73, 0x69, 0x74, 0x69,
	0x76, 0x65, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x42, 0x0d, 0x0a, 0x0b, 0x6f, 0x6e, 0x65, 0x5f,
	0x6f, 0x66, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x4a, 0x04, 0x08, 0x06, 0x10, 0x07, 0x42, 0xfa, 0x01,
	0x0a, 0x1b, 0x63, 0x6f, 0x6d, 0x2e, 0x6b, 0x61, 0x73, 0x6b, 0x61, 0x64, 0x61, 0x2e, 0x6b, 0x61,
	0x73, 0x6b, 0x61, 0x64, 0x61, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x42, 0x0e, 0x54,
	0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a,
	0x4d, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6b, 0x61, 0x73, 0x6b,
	0x61, 0x64, 0x61, 0x2f, 0x6b, 0x61, 0x73, 0x6b, 0x61, 0x64, 0x61, 0x2d, 0x61, 0x69, 0x2f, 0x77,
	0x72, 0x65, 0x6e, 0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x6b, 0x61, 0x73, 0x6b, 0x61, 0x64, 0x61, 0x2f,
	0x6b, 0x61, 0x73, 0x6b, 0x61, 0x64, 0x61, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x3b,
	0x6b, 0x61, 0x73, 0x6b, 0x61, 0x64, 0x61, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0xa2, 0x02,
	0x03, 0x4b, 0x4b, 0x58, 0xaa, 0x02, 0x17, 0x4b, 0x61, 0x73, 0x6b, 0x61, 0x64, 0x61, 0x2e, 0x4b,
	0x61, 0x73, 0x6b, 0x61, 0x64, 0x61, 0x2e, 0x56, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0xca, 0x02,
	0x17, 0x4b, 0x61, 0x73, 0x6b, 0x61, 0x64, 0x61, 0x5c, 0x4b, 0x61, 0x73, 0x6b, 0x61, 0x64, 0x61,
	0x5c, 0x56, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0xe2, 0x02, 0x23, 0x4b, 0x61, 0x73, 0x6b, 0x61,
	0x64, 0x61, 0x5c, 0x4b, 0x61, 0x73, 0x6b, 0x61, 0x64, 0x61, 0x5c, 0x56, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02,
	0x19, 0x4b, 0x61, 0x73, 0x6b, 0x61, 0x64, 0x61, 0x3a, 0x3a, 0x4b, 0x61, 0x73, 0x6b, 0x61, 0x64,
	0x61, 0x3a, 0x3a, 0x56, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_kaskada_kaskada_v1alpha_test_cases_proto_rawDescOnce sync.Once
	file_kaskada_kaskada_v1alpha_test_cases_proto_rawDescData = file_kaskada_kaskada_v1alpha_test_cases_proto_rawDesc
)

func file_kaskada_kaskada_v1alpha_test_cases_proto_rawDescGZIP() []byte {
	file_kaskada_kaskada_v1alpha_test_cases_proto_rawDescOnce.Do(func() {
		file_kaskada_kaskada_v1alpha_test_cases_proto_rawDescData = protoimpl.X.CompressGZIP(file_kaskada_kaskada_v1alpha_test_cases_proto_rawDescData)
	})
	return file_kaskada_kaskada_v1alpha_test_cases_proto_rawDescData
}

var file_kaskada_kaskada_v1alpha_test_cases_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_kaskada_kaskada_v1alpha_test_cases_proto_goTypes = []interface{}{
	(*RedactTestCase)(nil),                // 0: kaskada.kaskada.v1alpha.RedactTestCase
	nil,                                   // 1: kaskada.kaskada.v1alpha.RedactTestCase.MapSensitiveValuesEntry
	nil,                                   // 2: kaskada.kaskada.v1alpha.RedactTestCase.MapEmbeddedObjectsEntry
	(*RedactTestCase_EmbeddedObject)(nil), // 3: kaskada.kaskada.v1alpha.RedactTestCase.EmbeddedObject
}
var file_kaskada_kaskada_v1alpha_test_cases_proto_depIdxs = []int32{
	3, // 0: kaskada.kaskada.v1alpha.RedactTestCase.root_embedded_object:type_name -> kaskada.kaskada.v1alpha.RedactTestCase.EmbeddedObject
	3, // 1: kaskada.kaskada.v1alpha.RedactTestCase.repeated_embedded_object:type_name -> kaskada.kaskada.v1alpha.RedactTestCase.EmbeddedObject
	3, // 2: kaskada.kaskada.v1alpha.RedactTestCase.one_of_embedded_value:type_name -> kaskada.kaskada.v1alpha.RedactTestCase.EmbeddedObject
	1, // 3: kaskada.kaskada.v1alpha.RedactTestCase.map_sensitive_values:type_name -> kaskada.kaskada.v1alpha.RedactTestCase.MapSensitiveValuesEntry
	2, // 4: kaskada.kaskada.v1alpha.RedactTestCase.map_embedded_objects:type_name -> kaskada.kaskada.v1alpha.RedactTestCase.MapEmbeddedObjectsEntry
	3, // 5: kaskada.kaskada.v1alpha.RedactTestCase.MapEmbeddedObjectsEntry.value:type_name -> kaskada.kaskada.v1alpha.RedactTestCase.EmbeddedObject
	6, // [6:6] is the sub-list for method output_type
	6, // [6:6] is the sub-list for method input_type
	6, // [6:6] is the sub-list for extension type_name
	6, // [6:6] is the sub-list for extension extendee
	0, // [0:6] is the sub-list for field type_name
}

func init() { file_kaskada_kaskada_v1alpha_test_cases_proto_init() }
func file_kaskada_kaskada_v1alpha_test_cases_proto_init() {
	if File_kaskada_kaskada_v1alpha_test_cases_proto != nil {
		return
	}
	file_kaskada_kaskada_v1alpha_options_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_kaskada_kaskada_v1alpha_test_cases_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RedactTestCase); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kaskada_kaskada_v1alpha_test_cases_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RedactTestCase_EmbeddedObject); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_kaskada_kaskada_v1alpha_test_cases_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*RedactTestCase_OneOfSafeValue)(nil),
		(*RedactTestCase_OneOfSensitiveValue)(nil),
		(*RedactTestCase_OneOfEmbeddedValue)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_kaskada_kaskada_v1alpha_test_cases_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_kaskada_kaskada_v1alpha_test_cases_proto_goTypes,
		DependencyIndexes: file_kaskada_kaskada_v1alpha_test_cases_proto_depIdxs,
		MessageInfos:      file_kaskada_kaskada_v1alpha_test_cases_proto_msgTypes,
	}.Build()
	File_kaskada_kaskada_v1alpha_test_cases_proto = out.File
	file_kaskada_kaskada_v1alpha_test_cases_proto_rawDesc = nil
	file_kaskada_kaskada_v1alpha_test_cases_proto_goTypes = nil
	file_kaskada_kaskada_v1alpha_test_cases_proto_depIdxs = nil
}
