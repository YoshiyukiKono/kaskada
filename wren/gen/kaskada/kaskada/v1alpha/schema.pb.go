// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0-devel
// 	protoc        (unknown)
// source: kaskada/kaskada/v1alpha/schema.proto

package kaskadav1alpha

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type DataType_PrimitiveType int32

const (
	DataType_PRIMITIVE_TYPE_UNSPECIFIED DataType_PrimitiveType = 0
	// Fenl type `null`.
	DataType_PRIMITIVE_TYPE_NULL DataType_PrimitiveType = 1
	// Fenl type `bool`.
	DataType_PRIMITIVE_TYPE_BOOL DataType_PrimitiveType = 2
	// Fenl type `i8`.
	DataType_PRIMITIVE_TYPE_I8 DataType_PrimitiveType = 3
	// Fenl type `i16`.
	DataType_PRIMITIVE_TYPE_I16 DataType_PrimitiveType = 4
	// Fenl type `i32`.
	DataType_PRIMITIVE_TYPE_I32 DataType_PrimitiveType = 5
	// Fenl type `i64`.
	DataType_PRIMITIVE_TYPE_I64 DataType_PrimitiveType = 6
	// Fenl type `u8`.
	DataType_PRIMITIVE_TYPE_U8 DataType_PrimitiveType = 7
	// Fenl type `u16`.
	DataType_PRIMITIVE_TYPE_U16 DataType_PrimitiveType = 8
	// Fenl type `u32`.
	DataType_PRIMITIVE_TYPE_U32 DataType_PrimitiveType = 9
	// Fenl type `u64`.
	DataType_PRIMITIVE_TYPE_U64 DataType_PrimitiveType = 10
	// Fenl type `f16`.
	DataType_PRIMITIVE_TYPE_F16 DataType_PrimitiveType = 11
	// Fenl type `f32`.
	DataType_PRIMITIVE_TYPE_F32 DataType_PrimitiveType = 12
	// Fenl type `f64`.
	DataType_PRIMITIVE_TYPE_F64 DataType_PrimitiveType = 13
	// Fenl type `string`.
	DataType_PRIMITIVE_TYPE_STRING DataType_PrimitiveType = 14
	// Fenl type `interval_days`.
	// A time interval represented as calendar days and milliseconds.
	DataType_PRIMITIVE_TYPE_INTERVAL_DAY_TIME DataType_PrimitiveType = 15
	// Fenl type `interval_months`.
	// A time interval represented as calendar months.
	DataType_PRIMITIVE_TYPE_INTERVAL_YEAR_MONTH DataType_PrimitiveType = 16
	// Fenl type `duration_s`.
	// Duration represented as a number of seconds.
	DataType_PRIMITIVE_TYPE_DURATION_SECOND DataType_PrimitiveType = 17
	// Fenl type `duration_ms`.
	// Duration represented as a number of milliseconds.
	DataType_PRIMITIVE_TYPE_DURATION_MILLISECOND DataType_PrimitiveType = 18
	// Fenl type `duration_us`.
	// Duration represented as a number of microseconds.
	DataType_PRIMITIVE_TYPE_DURATION_MICROSECOND DataType_PrimitiveType = 19
	// Fenl type `duration_ns`.
	// Duration represented as a number of nanoseconds.
	DataType_PRIMITIVE_TYPE_DURATION_NANOSECOND DataType_PrimitiveType = 20
	// Fenl type `timestamp_s`.
	// Timestamp represented as a number of seconds since epoch.
	DataType_PRIMITIVE_TYPE_TIMESTAMP_SECOND DataType_PrimitiveType = 21
	// Fenl type `timestamp_ms`.
	// Timestamp represented as a number of milliseconds since epoch.
	DataType_PRIMITIVE_TYPE_TIMESTAMP_MILLISECOND DataType_PrimitiveType = 22
	// Fenl type `timestamp_us`.
	// Timestamp represented as a number of microseconds since epoch.
	DataType_PRIMITIVE_TYPE_TIMESTAMP_MICROSECOND DataType_PrimitiveType = 23
	// Fenl type `timestamp_ns`.
	// Timestamp represented as a number of nanoseconds since epoch.
	DataType_PRIMITIVE_TYPE_TIMESTAMP_NANOSECOND DataType_PrimitiveType = 24
	// Fenl type `json`
	// Represents a json object in fenl
	DataType_PRIMITIVE_TYPE_JSON DataType_PrimitiveType = 25
	// Currently nsupported in fenl functions.
	DataType_PRIMITIVE_TYPE_DATE32 DataType_PrimitiveType = 26
)

// Enum value maps for DataType_PrimitiveType.
var (
	DataType_PrimitiveType_name = map[int32]string{
		0:  "PRIMITIVE_TYPE_UNSPECIFIED",
		1:  "PRIMITIVE_TYPE_NULL",
		2:  "PRIMITIVE_TYPE_BOOL",
		3:  "PRIMITIVE_TYPE_I8",
		4:  "PRIMITIVE_TYPE_I16",
		5:  "PRIMITIVE_TYPE_I32",
		6:  "PRIMITIVE_TYPE_I64",
		7:  "PRIMITIVE_TYPE_U8",
		8:  "PRIMITIVE_TYPE_U16",
		9:  "PRIMITIVE_TYPE_U32",
		10: "PRIMITIVE_TYPE_U64",
		11: "PRIMITIVE_TYPE_F16",
		12: "PRIMITIVE_TYPE_F32",
		13: "PRIMITIVE_TYPE_F64",
		14: "PRIMITIVE_TYPE_STRING",
		15: "PRIMITIVE_TYPE_INTERVAL_DAY_TIME",
		16: "PRIMITIVE_TYPE_INTERVAL_YEAR_MONTH",
		17: "PRIMITIVE_TYPE_DURATION_SECOND",
		18: "PRIMITIVE_TYPE_DURATION_MILLISECOND",
		19: "PRIMITIVE_TYPE_DURATION_MICROSECOND",
		20: "PRIMITIVE_TYPE_DURATION_NANOSECOND",
		21: "PRIMITIVE_TYPE_TIMESTAMP_SECOND",
		22: "PRIMITIVE_TYPE_TIMESTAMP_MILLISECOND",
		23: "PRIMITIVE_TYPE_TIMESTAMP_MICROSECOND",
		24: "PRIMITIVE_TYPE_TIMESTAMP_NANOSECOND",
		25: "PRIMITIVE_TYPE_JSON",
		26: "PRIMITIVE_TYPE_DATE32",
	}
	DataType_PrimitiveType_value = map[string]int32{
		"PRIMITIVE_TYPE_UNSPECIFIED":           0,
		"PRIMITIVE_TYPE_NULL":                  1,
		"PRIMITIVE_TYPE_BOOL":                  2,
		"PRIMITIVE_TYPE_I8":                    3,
		"PRIMITIVE_TYPE_I16":                   4,
		"PRIMITIVE_TYPE_I32":                   5,
		"PRIMITIVE_TYPE_I64":                   6,
		"PRIMITIVE_TYPE_U8":                    7,
		"PRIMITIVE_TYPE_U16":                   8,
		"PRIMITIVE_TYPE_U32":                   9,
		"PRIMITIVE_TYPE_U64":                   10,
		"PRIMITIVE_TYPE_F16":                   11,
		"PRIMITIVE_TYPE_F32":                   12,
		"PRIMITIVE_TYPE_F64":                   13,
		"PRIMITIVE_TYPE_STRING":                14,
		"PRIMITIVE_TYPE_INTERVAL_DAY_TIME":     15,
		"PRIMITIVE_TYPE_INTERVAL_YEAR_MONTH":   16,
		"PRIMITIVE_TYPE_DURATION_SECOND":       17,
		"PRIMITIVE_TYPE_DURATION_MILLISECOND":  18,
		"PRIMITIVE_TYPE_DURATION_MICROSECOND":  19,
		"PRIMITIVE_TYPE_DURATION_NANOSECOND":   20,
		"PRIMITIVE_TYPE_TIMESTAMP_SECOND":      21,
		"PRIMITIVE_TYPE_TIMESTAMP_MILLISECOND": 22,
		"PRIMITIVE_TYPE_TIMESTAMP_MICROSECOND": 23,
		"PRIMITIVE_TYPE_TIMESTAMP_NANOSECOND":  24,
		"PRIMITIVE_TYPE_JSON":                  25,
		"PRIMITIVE_TYPE_DATE32":                26,
	}
)

func (x DataType_PrimitiveType) Enum() *DataType_PrimitiveType {
	p := new(DataType_PrimitiveType)
	*p = x
	return p
}

func (x DataType_PrimitiveType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DataType_PrimitiveType) Descriptor() protoreflect.EnumDescriptor {
	return file_kaskada_kaskada_v1alpha_schema_proto_enumTypes[0].Descriptor()
}

func (DataType_PrimitiveType) Type() protoreflect.EnumType {
	return &file_kaskada_kaskada_v1alpha_schema_proto_enumTypes[0]
}

func (x DataType_PrimitiveType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DataType_PrimitiveType.Descriptor instead.
func (DataType_PrimitiveType) EnumDescriptor() ([]byte, []int) {
	return file_kaskada_kaskada_v1alpha_schema_proto_rawDescGZIP(), []int{0, 0}
}

// Protobuf representation of the Fenl DataType.
//
// NOTE: Some of these types (especially related to time) are subject to
// change.
type DataType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Kind:
	//	*DataType_Primitive
	//	*DataType_Struct
	//	*DataType_Window
	//	*DataType_List
	Kind isDataType_Kind `protobuf_oneof:"kind"`
}

func (x *DataType) Reset() {
	*x = DataType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kaskada_kaskada_v1alpha_schema_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataType) ProtoMessage() {}

func (x *DataType) ProtoReflect() protoreflect.Message {
	mi := &file_kaskada_kaskada_v1alpha_schema_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataType.ProtoReflect.Descriptor instead.
func (*DataType) Descriptor() ([]byte, []int) {
	return file_kaskada_kaskada_v1alpha_schema_proto_rawDescGZIP(), []int{0}
}

func (m *DataType) GetKind() isDataType_Kind {
	if m != nil {
		return m.Kind
	}
	return nil
}

func (x *DataType) GetPrimitive() DataType_PrimitiveType {
	if x, ok := x.GetKind().(*DataType_Primitive); ok {
		return x.Primitive
	}
	return DataType_PRIMITIVE_TYPE_UNSPECIFIED
}

func (x *DataType) GetStruct() *Schema {
	if x, ok := x.GetKind().(*DataType_Struct); ok {
		return x.Struct
	}
	return nil
}

func (x *DataType) GetWindow() *emptypb.Empty {
	if x, ok := x.GetKind().(*DataType_Window); ok {
		return x.Window
	}
	return nil
}

func (x *DataType) GetList() *DataType {
	if x, ok := x.GetKind().(*DataType_List); ok {
		return x.List
	}
	return nil
}

type isDataType_Kind interface {
	isDataType_Kind()
}

type DataType_Primitive struct {
	// Primitive Fenl types.
	//
	// Each primitive enum corresponds to a specific Fenl type, as noted.
	Primitive DataType_PrimitiveType `protobuf:"varint,1,opt,name=primitive,proto3,enum=kaskada.kaskada.v1alpha.DataType_PrimitiveType,oneof"`
}

type DataType_Struct struct {
	// Struct types.
	//
	// The schema contains the field and types of the struct.
	//
	// String representation is `{ field: type, field: type, ... }`.
	Struct *Schema `protobuf:"bytes,2,opt,name=struct,proto3,oneof"`
}

type DataType_Window struct {
	// Fenl type `window`.
	//
	// These cannot be output nor should they appear within a plan -- they are
	// generally compiled away as part of the implementation of aggrgeations.
	//
	// However, the `window` type may appear as the result of a view, allowing
	// the view to be used as part of aggregations.
	Window *emptypb.Empty `protobuf:"bytes,3,opt,name=window,proto3,oneof"`
}

type DataType_List struct {
	// A list of a different type.
	List *DataType `protobuf:"bytes,4,opt,name=list,proto3,oneof"`
}

func (*DataType_Primitive) isDataType_Kind() {}

func (*DataType_Struct) isDataType_Kind() {}

func (*DataType_Window) isDataType_Kind() {}

func (*DataType_List) isDataType_Kind() {}

// A schema for an Arrow Struct column or an entire RecordBatch / table.
//
// When used, should generally be converted to a SchemaRef once and then
// additional references to the corresponding Arc used.
type Schema struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Fields []*Schema_Field `protobuf:"bytes,1,rep,name=fields,proto3" json:"fields,omitempty"`
}

func (x *Schema) Reset() {
	*x = Schema{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kaskada_kaskada_v1alpha_schema_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Schema) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Schema) ProtoMessage() {}

func (x *Schema) ProtoReflect() protoreflect.Message {
	mi := &file_kaskada_kaskada_v1alpha_schema_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Schema.ProtoReflect.Descriptor instead.
func (*Schema) Descriptor() ([]byte, []int) {
	return file_kaskada_kaskada_v1alpha_schema_proto_rawDescGZIP(), []int{1}
}

func (x *Schema) GetFields() []*Schema_Field {
	if x != nil {
		return x.Fields
	}
	return nil
}

type Schema_Field struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name     string    `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	DataType *DataType `protobuf:"bytes,2,opt,name=data_type,json=dataType,proto3" json:"data_type,omitempty"`
}

func (x *Schema_Field) Reset() {
	*x = Schema_Field{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kaskada_kaskada_v1alpha_schema_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Schema_Field) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Schema_Field) ProtoMessage() {}

func (x *Schema_Field) ProtoReflect() protoreflect.Message {
	mi := &file_kaskada_kaskada_v1alpha_schema_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Schema_Field.ProtoReflect.Descriptor instead.
func (*Schema_Field) Descriptor() ([]byte, []int) {
	return file_kaskada_kaskada_v1alpha_schema_proto_rawDescGZIP(), []int{1, 0}
}

func (x *Schema_Field) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Schema_Field) GetDataType() *DataType {
	if x != nil {
		return x.DataType
	}
	return nil
}

var File_kaskada_kaskada_v1alpha_schema_proto protoreflect.FileDescriptor

var file_kaskada_kaskada_v1alpha_schema_proto_rawDesc = []byte{
	0x0a, 0x24, 0x6b, 0x61, 0x73, 0x6b, 0x61, 0x64, 0x61, 0x2f, 0x6b, 0x61, 0x73, 0x6b, 0x61, 0x64,
	0x61, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x17, 0x6b, 0x61, 0x73, 0x6b, 0x61, 0x64, 0x61, 0x2e,
	0x6b, 0x61, 0x73, 0x6b, 0x61, 0x64, 0x61, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x1a,
	0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xd0, 0x08, 0x0a,
	0x08, 0x44, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x12, 0x4f, 0x0a, 0x09, 0x70, 0x72, 0x69,
	0x6d, 0x69, 0x74, 0x69, 0x76, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2f, 0x2e, 0x6b,
	0x61, 0x73, 0x6b, 0x61, 0x64, 0x61, 0x2e, 0x6b, 0x61, 0x73, 0x6b, 0x61, 0x64, 0x61, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x2e,
	0x50, 0x72, 0x69, 0x6d, 0x69, 0x74, 0x69, 0x76, 0x65, 0x54, 0x79, 0x70, 0x65, 0x48, 0x00, 0x52,
	0x09, 0x70, 0x72, 0x69, 0x6d, 0x69, 0x74, 0x69, 0x76, 0x65, 0x12, 0x39, 0x0a, 0x06, 0x73, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6b, 0x61, 0x73,
	0x6b, 0x61, 0x64, 0x61, 0x2e, 0x6b, 0x61, 0x73, 0x6b, 0x61, 0x64, 0x61, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x48, 0x00, 0x52, 0x06, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x12, 0x30, 0x0a, 0x06, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x48, 0x00, 0x52,
	0x06, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x12, 0x37, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6b, 0x61, 0x73, 0x6b, 0x61, 0x64, 0x61, 0x2e,
	0x6b, 0x61, 0x73, 0x6b, 0x61, 0x64, 0x61, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e,
	0x44, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x48, 0x00, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74,
	0x22, 0xc4, 0x06, 0x0a, 0x0d, 0x50, 0x72, 0x69, 0x6d, 0x69, 0x74, 0x69, 0x76, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x1e, 0x0a, 0x1a, 0x50, 0x52, 0x49, 0x4d, 0x49, 0x54, 0x49, 0x56, 0x45, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44,
	0x10, 0x00, 0x12, 0x17, 0x0a, 0x13, 0x50, 0x52, 0x49, 0x4d, 0x49, 0x54, 0x49, 0x56, 0x45, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e, 0x55, 0x4c, 0x4c, 0x10, 0x01, 0x12, 0x17, 0x0a, 0x13, 0x50,
	0x52, 0x49, 0x4d, 0x49, 0x54, 0x49, 0x56, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x42, 0x4f,
	0x4f, 0x4c, 0x10, 0x02, 0x12, 0x15, 0x0a, 0x11, 0x50, 0x52, 0x49, 0x4d, 0x49, 0x54, 0x49, 0x56,
	0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x38, 0x10, 0x03, 0x12, 0x16, 0x0a, 0x12, 0x50,
	0x52, 0x49, 0x4d, 0x49, 0x54, 0x49, 0x56, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x31,
	0x36, 0x10, 0x04, 0x12, 0x16, 0x0a, 0x12, 0x50, 0x52, 0x49, 0x4d, 0x49, 0x54, 0x49, 0x56, 0x45,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x33, 0x32, 0x10, 0x05, 0x12, 0x16, 0x0a, 0x12, 0x50,
	0x52, 0x49, 0x4d, 0x49, 0x54, 0x49, 0x56, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x36,
	0x34, 0x10, 0x06, 0x12, 0x15, 0x0a, 0x11, 0x50, 0x52, 0x49, 0x4d, 0x49, 0x54, 0x49, 0x56, 0x45,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x38, 0x10, 0x07, 0x12, 0x16, 0x0a, 0x12, 0x50, 0x52,
	0x49, 0x4d, 0x49, 0x54, 0x49, 0x56, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x31, 0x36,
	0x10, 0x08, 0x12, 0x16, 0x0a, 0x12, 0x50, 0x52, 0x49, 0x4d, 0x49, 0x54, 0x49, 0x56, 0x45, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x33, 0x32, 0x10, 0x09, 0x12, 0x16, 0x0a, 0x12, 0x50, 0x52,
	0x49, 0x4d, 0x49, 0x54, 0x49, 0x56, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x36, 0x34,
	0x10, 0x0a, 0x12, 0x16, 0x0a, 0x12, 0x50, 0x52, 0x49, 0x4d, 0x49, 0x54, 0x49, 0x56, 0x45, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x46, 0x31, 0x36, 0x10, 0x0b, 0x12, 0x16, 0x0a, 0x12, 0x50, 0x52,
	0x49, 0x4d, 0x49, 0x54, 0x49, 0x56, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x46, 0x33, 0x32,
	0x10, 0x0c, 0x12, 0x16, 0x0a, 0x12, 0x50, 0x52, 0x49, 0x4d, 0x49, 0x54, 0x49, 0x56, 0x45, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x46, 0x36, 0x34, 0x10, 0x0d, 0x12, 0x19, 0x0a, 0x15, 0x50, 0x52,
	0x49, 0x4d, 0x49, 0x54, 0x49, 0x56, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x54, 0x52,
	0x49, 0x4e, 0x47, 0x10, 0x0e, 0x12, 0x24, 0x0a, 0x20, 0x50, 0x52, 0x49, 0x4d, 0x49, 0x54, 0x49,
	0x56, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x56, 0x41, 0x4c,
	0x5f, 0x44, 0x41, 0x59, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x10, 0x0f, 0x12, 0x26, 0x0a, 0x22, 0x50,
	0x52, 0x49, 0x4d, 0x49, 0x54, 0x49, 0x56, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x4e,
	0x54, 0x45, 0x52, 0x56, 0x41, 0x4c, 0x5f, 0x59, 0x45, 0x41, 0x52, 0x5f, 0x4d, 0x4f, 0x4e, 0x54,
	0x48, 0x10, 0x10, 0x12, 0x22, 0x0a, 0x1e, 0x50, 0x52, 0x49, 0x4d, 0x49, 0x54, 0x49, 0x56, 0x45,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x55, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53,
	0x45, 0x43, 0x4f, 0x4e, 0x44, 0x10, 0x11, 0x12, 0x27, 0x0a, 0x23, 0x50, 0x52, 0x49, 0x4d, 0x49,
	0x54, 0x49, 0x56, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x55, 0x52, 0x41, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x4d, 0x49, 0x4c, 0x4c, 0x49, 0x53, 0x45, 0x43, 0x4f, 0x4e, 0x44, 0x10, 0x12,
	0x12, 0x27, 0x0a, 0x23, 0x50, 0x52, 0x49, 0x4d, 0x49, 0x54, 0x49, 0x56, 0x45, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x44, 0x55, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4d, 0x49, 0x43, 0x52,
	0x4f, 0x53, 0x45, 0x43, 0x4f, 0x4e, 0x44, 0x10, 0x13, 0x12, 0x26, 0x0a, 0x22, 0x50, 0x52, 0x49,
	0x4d, 0x49, 0x54, 0x49, 0x56, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x55, 0x52, 0x41,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4e, 0x41, 0x4e, 0x4f, 0x53, 0x45, 0x43, 0x4f, 0x4e, 0x44, 0x10,
	0x14, 0x12, 0x23, 0x0a, 0x1f, 0x50, 0x52, 0x49, 0x4d, 0x49, 0x54, 0x49, 0x56, 0x45, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x53, 0x54, 0x41, 0x4d, 0x50, 0x5f, 0x53, 0x45,
	0x43, 0x4f, 0x4e, 0x44, 0x10, 0x15, 0x12, 0x28, 0x0a, 0x24, 0x50, 0x52, 0x49, 0x4d, 0x49, 0x54,
	0x49, 0x56, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x53, 0x54, 0x41,
	0x4d, 0x50, 0x5f, 0x4d, 0x49, 0x4c, 0x4c, 0x49, 0x53, 0x45, 0x43, 0x4f, 0x4e, 0x44, 0x10, 0x16,
	0x12, 0x28, 0x0a, 0x24, 0x50, 0x52, 0x49, 0x4d, 0x49, 0x54, 0x49, 0x56, 0x45, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x53, 0x54, 0x41, 0x4d, 0x50, 0x5f, 0x4d, 0x49, 0x43,
	0x52, 0x4f, 0x53, 0x45, 0x43, 0x4f, 0x4e, 0x44, 0x10, 0x17, 0x12, 0x27, 0x0a, 0x23, 0x50, 0x52,
	0x49, 0x4d, 0x49, 0x54, 0x49, 0x56, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x49, 0x4d,
	0x45, 0x53, 0x54, 0x41, 0x4d, 0x50, 0x5f, 0x4e, 0x41, 0x4e, 0x4f, 0x53, 0x45, 0x43, 0x4f, 0x4e,
	0x44, 0x10, 0x18, 0x12, 0x17, 0x0a, 0x13, 0x50, 0x52, 0x49, 0x4d, 0x49, 0x54, 0x49, 0x56, 0x45,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4a, 0x53, 0x4f, 0x4e, 0x10, 0x19, 0x12, 0x19, 0x0a, 0x15,
	0x50, 0x52, 0x49, 0x4d, 0x49, 0x54, 0x49, 0x56, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44,
	0x41, 0x54, 0x45, 0x33, 0x32, 0x10, 0x1a, 0x42, 0x06, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x22,
	0xa4, 0x01, 0x0a, 0x06, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x12, 0x3d, 0x0a, 0x06, 0x66, 0x69,
	0x65, 0x6c, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6b, 0x61, 0x73,
	0x6b, 0x61, 0x64, 0x61, 0x2e, 0x6b, 0x61, 0x73, 0x6b, 0x61, 0x64, 0x61, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x52, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x1a, 0x5b, 0x0a, 0x05, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x3e, 0x0a, 0x09, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6b, 0x61, 0x73, 0x6b,
	0x61, 0x64, 0x61, 0x2e, 0x6b, 0x61, 0x73, 0x6b, 0x61, 0x64, 0x61, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x64, 0x61,
	0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x42, 0xf7, 0x01, 0x0a, 0x1b, 0x63, 0x6f, 0x6d, 0x2e, 0x6b,
	0x61, 0x73, 0x6b, 0x61, 0x64, 0x61, 0x2e, 0x6b, 0x61, 0x73, 0x6b, 0x61, 0x64, 0x61, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x42, 0x0b, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x4d, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f,
	0x6d, 0x2f, 0x6b, 0x61, 0x73, 0x6b, 0x61, 0x64, 0x61, 0x2f, 0x6b, 0x61, 0x73, 0x6b, 0x61, 0x64,
	0x61, 0x2d, 0x61, 0x69, 0x2f, 0x77, 0x72, 0x65, 0x6e, 0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x6b, 0x61,
	0x73, 0x6b, 0x61, 0x64, 0x61, 0x2f, 0x6b, 0x61, 0x73, 0x6b, 0x61, 0x64, 0x61, 0x2f, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x3b, 0x6b, 0x61, 0x73, 0x6b, 0x61, 0x64, 0x61, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0xa2, 0x02, 0x03, 0x4b, 0x4b, 0x58, 0xaa, 0x02, 0x17, 0x4b, 0x61, 0x73,
	0x6b, 0x61, 0x64, 0x61, 0x2e, 0x4b, 0x61, 0x73, 0x6b, 0x61, 0x64, 0x61, 0x2e, 0x56, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0xca, 0x02, 0x17, 0x4b, 0x61, 0x73, 0x6b, 0x61, 0x64, 0x61, 0x5c, 0x4b,
	0x61, 0x73, 0x6b, 0x61, 0x64, 0x61, 0x5c, 0x56, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0xe2, 0x02,
	0x23, 0x4b, 0x61, 0x73, 0x6b, 0x61, 0x64, 0x61, 0x5c, 0x4b, 0x61, 0x73, 0x6b, 0x61, 0x64, 0x61,
	0x5c, 0x56, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x19, 0x4b, 0x61, 0x73, 0x6b, 0x61, 0x64, 0x61, 0x3a, 0x3a,
	0x4b, 0x61, 0x73, 0x6b, 0x61, 0x64, 0x61, 0x3a, 0x3a, 0x56, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_kaskada_kaskada_v1alpha_schema_proto_rawDescOnce sync.Once
	file_kaskada_kaskada_v1alpha_schema_proto_rawDescData = file_kaskada_kaskada_v1alpha_schema_proto_rawDesc
)

func file_kaskada_kaskada_v1alpha_schema_proto_rawDescGZIP() []byte {
	file_kaskada_kaskada_v1alpha_schema_proto_rawDescOnce.Do(func() {
		file_kaskada_kaskada_v1alpha_schema_proto_rawDescData = protoimpl.X.CompressGZIP(file_kaskada_kaskada_v1alpha_schema_proto_rawDescData)
	})
	return file_kaskada_kaskada_v1alpha_schema_proto_rawDescData
}

var file_kaskada_kaskada_v1alpha_schema_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_kaskada_kaskada_v1alpha_schema_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_kaskada_kaskada_v1alpha_schema_proto_goTypes = []interface{}{
	(DataType_PrimitiveType)(0), // 0: kaskada.kaskada.v1alpha.DataType.PrimitiveType
	(*DataType)(nil),            // 1: kaskada.kaskada.v1alpha.DataType
	(*Schema)(nil),              // 2: kaskada.kaskada.v1alpha.Schema
	(*Schema_Field)(nil),        // 3: kaskada.kaskada.v1alpha.Schema.Field
	(*emptypb.Empty)(nil),       // 4: google.protobuf.Empty
}
var file_kaskada_kaskada_v1alpha_schema_proto_depIdxs = []int32{
	0, // 0: kaskada.kaskada.v1alpha.DataType.primitive:type_name -> kaskada.kaskada.v1alpha.DataType.PrimitiveType
	2, // 1: kaskada.kaskada.v1alpha.DataType.struct:type_name -> kaskada.kaskada.v1alpha.Schema
	4, // 2: kaskada.kaskada.v1alpha.DataType.window:type_name -> google.protobuf.Empty
	1, // 3: kaskada.kaskada.v1alpha.DataType.list:type_name -> kaskada.kaskada.v1alpha.DataType
	3, // 4: kaskada.kaskada.v1alpha.Schema.fields:type_name -> kaskada.kaskada.v1alpha.Schema.Field
	1, // 5: kaskada.kaskada.v1alpha.Schema.Field.data_type:type_name -> kaskada.kaskada.v1alpha.DataType
	6, // [6:6] is the sub-list for method output_type
	6, // [6:6] is the sub-list for method input_type
	6, // [6:6] is the sub-list for extension type_name
	6, // [6:6] is the sub-list for extension extendee
	0, // [0:6] is the sub-list for field type_name
}

func init() { file_kaskada_kaskada_v1alpha_schema_proto_init() }
func file_kaskada_kaskada_v1alpha_schema_proto_init() {
	if File_kaskada_kaskada_v1alpha_schema_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_kaskada_kaskada_v1alpha_schema_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kaskada_kaskada_v1alpha_schema_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Schema); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kaskada_kaskada_v1alpha_schema_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Schema_Field); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_kaskada_kaskada_v1alpha_schema_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*DataType_Primitive)(nil),
		(*DataType_Struct)(nil),
		(*DataType_Window)(nil),
		(*DataType_List)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_kaskada_kaskada_v1alpha_schema_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_kaskada_kaskada_v1alpha_schema_proto_goTypes,
		DependencyIndexes: file_kaskada_kaskada_v1alpha_schema_proto_depIdxs,
		EnumInfos:         file_kaskada_kaskada_v1alpha_schema_proto_enumTypes,
		MessageInfos:      file_kaskada_kaskada_v1alpha_schema_proto_msgTypes,
	}.Build()
	File_kaskada_kaskada_v1alpha_schema_proto = out.File
	file_kaskada_kaskada_v1alpha_schema_proto_rawDesc = nil
	file_kaskada_kaskada_v1alpha_schema_proto_goTypes = nil
	file_kaskada_kaskada_v1alpha_schema_proto_depIdxs = nil
}
