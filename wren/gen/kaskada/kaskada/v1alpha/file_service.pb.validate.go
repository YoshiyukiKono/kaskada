// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: kaskada/kaskada/v1alpha/file_service.proto

package kaskadav1alpha

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on FileMetadata with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *FileMetadata) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FileMetadata with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in FileMetadataMultiError, or
// nil if none found.
func (m *FileMetadata) ValidateAll() error {
	return m.validate(true)
}

func (m *FileMetadata) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetSchema()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, FileMetadataValidationError{
					field:  "Schema",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, FileMetadataValidationError{
					field:  "Schema",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSchema()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return FileMetadataValidationError{
				field:  "Schema",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return FileMetadataMultiError(errors)
	}

	return nil
}

// FileMetadataMultiError is an error wrapping multiple validation errors
// returned by FileMetadata.ValidateAll() if the designated constraints aren't met.
type FileMetadataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FileMetadataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FileMetadataMultiError) AllErrors() []error { return m }

// FileMetadataValidationError is the validation error returned by
// FileMetadata.Validate if the designated constraints aren't met.
type FileMetadataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FileMetadataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FileMetadataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FileMetadataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FileMetadataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FileMetadataValidationError) ErrorName() string { return "FileMetadataValidationError" }

// Error satisfies the builtin error interface
func (e FileMetadataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFileMetadata.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FileMetadataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FileMetadataValidationError{}

// Validate checks the field values on GetMetadataRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetMetadataRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetMetadataRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetMetadataRequestMultiError, or nil if none found.
func (m *GetMetadataRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetMetadataRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetFilePaths() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetMetadataRequestValidationError{
						field:  fmt.Sprintf("FilePaths[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetMetadataRequestValidationError{
						field:  fmt.Sprintf("FilePaths[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetMetadataRequestValidationError{
					field:  fmt.Sprintf("FilePaths[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetMetadataRequestMultiError(errors)
	}

	return nil
}

// GetMetadataRequestMultiError is an error wrapping multiple validation errors
// returned by GetMetadataRequest.ValidateAll() if the designated constraints
// aren't met.
type GetMetadataRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetMetadataRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetMetadataRequestMultiError) AllErrors() []error { return m }

// GetMetadataRequestValidationError is the validation error returned by
// GetMetadataRequest.Validate if the designated constraints aren't met.
type GetMetadataRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetMetadataRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetMetadataRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetMetadataRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetMetadataRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetMetadataRequestValidationError) ErrorName() string {
	return "GetMetadataRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetMetadataRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetMetadataRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetMetadataRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetMetadataRequestValidationError{}

// Validate checks the field values on GetMetadataResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetMetadataResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetMetadataResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetMetadataResponseMultiError, or nil if none found.
func (m *GetMetadataResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetMetadataResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetFileMetadatas() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetMetadataResponseValidationError{
						field:  fmt.Sprintf("FileMetadatas[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetMetadataResponseValidationError{
						field:  fmt.Sprintf("FileMetadatas[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetMetadataResponseValidationError{
					field:  fmt.Sprintf("FileMetadatas[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetMetadataResponseMultiError(errors)
	}

	return nil
}

// GetMetadataResponseMultiError is an error wrapping multiple validation
// errors returned by GetMetadataResponse.ValidateAll() if the designated
// constraints aren't met.
type GetMetadataResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetMetadataResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetMetadataResponseMultiError) AllErrors() []error { return m }

// GetMetadataResponseValidationError is the validation error returned by
// GetMetadataResponse.Validate if the designated constraints aren't met.
type GetMetadataResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetMetadataResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetMetadataResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetMetadataResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetMetadataResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetMetadataResponseValidationError) ErrorName() string {
	return "GetMetadataResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetMetadataResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetMetadataResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetMetadataResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetMetadataResponseValidationError{}

// Validate checks the field values on MergeMetadataRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *MergeMetadataRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MergeMetadataRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MergeMetadataRequestMultiError, or nil if none found.
func (m *MergeMetadataRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *MergeMetadataRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetTableMetadata()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, MergeMetadataRequestValidationError{
					field:  "TableMetadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, MergeMetadataRequestValidationError{
					field:  "TableMetadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTableMetadata()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MergeMetadataRequestValidationError{
				field:  "TableMetadata",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetNewFileMetadata() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, MergeMetadataRequestValidationError{
						field:  fmt.Sprintf("NewFileMetadata[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, MergeMetadataRequestValidationError{
						field:  fmt.Sprintf("NewFileMetadata[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return MergeMetadataRequestValidationError{
					field:  fmt.Sprintf("NewFileMetadata[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return MergeMetadataRequestMultiError(errors)
	}

	return nil
}

// MergeMetadataRequestMultiError is an error wrapping multiple validation
// errors returned by MergeMetadataRequest.ValidateAll() if the designated
// constraints aren't met.
type MergeMetadataRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MergeMetadataRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MergeMetadataRequestMultiError) AllErrors() []error { return m }

// MergeMetadataRequestValidationError is the validation error returned by
// MergeMetadataRequest.Validate if the designated constraints aren't met.
type MergeMetadataRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MergeMetadataRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MergeMetadataRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MergeMetadataRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MergeMetadataRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MergeMetadataRequestValidationError) ErrorName() string {
	return "MergeMetadataRequestValidationError"
}

// Error satisfies the builtin error interface
func (e MergeMetadataRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMergeMetadataRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MergeMetadataRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MergeMetadataRequestValidationError{}

// Validate checks the field values on MergeMetadataResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *MergeMetadataResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MergeMetadataResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MergeMetadataResponseMultiError, or nil if none found.
func (m *MergeMetadataResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *MergeMetadataResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetMergedTableMetadata()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, MergeMetadataResponseValidationError{
					field:  "MergedTableMetadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, MergeMetadataResponseValidationError{
					field:  "MergedTableMetadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMergedTableMetadata()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MergeMetadataResponseValidationError{
				field:  "MergedTableMetadata",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetNewFileResults() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, MergeMetadataResponseValidationError{
						field:  fmt.Sprintf("NewFileResults[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, MergeMetadataResponseValidationError{
						field:  fmt.Sprintf("NewFileResults[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return MergeMetadataResponseValidationError{
					field:  fmt.Sprintf("NewFileResults[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return MergeMetadataResponseMultiError(errors)
	}

	return nil
}

// MergeMetadataResponseMultiError is an error wrapping multiple validation
// errors returned by MergeMetadataResponse.ValidateAll() if the designated
// constraints aren't met.
type MergeMetadataResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MergeMetadataResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MergeMetadataResponseMultiError) AllErrors() []error { return m }

// MergeMetadataResponseValidationError is the validation error returned by
// MergeMetadataResponse.Validate if the designated constraints aren't met.
type MergeMetadataResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MergeMetadataResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MergeMetadataResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MergeMetadataResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MergeMetadataResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MergeMetadataResponseValidationError) ErrorName() string {
	return "MergeMetadataResponseValidationError"
}

// Error satisfies the builtin error interface
func (e MergeMetadataResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMergeMetadataResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MergeMetadataResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MergeMetadataResponseValidationError{}

// Validate checks the field values on MergeMetadataResponse_FileMergeResult
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *MergeMetadataResponse_FileMergeResult) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MergeMetadataResponse_FileMergeResult
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// MergeMetadataResponse_FileMergeResultMultiError, or nil if none found.
func (m *MergeMetadataResponse_FileMergeResult) ValidateAll() error {
	return m.validate(true)
}

func (m *MergeMetadataResponse_FileMergeResult) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Compatible

	if len(errors) > 0 {
		return MergeMetadataResponse_FileMergeResultMultiError(errors)
	}

	return nil
}

// MergeMetadataResponse_FileMergeResultMultiError is an error wrapping
// multiple validation errors returned by
// MergeMetadataResponse_FileMergeResult.ValidateAll() if the designated
// constraints aren't met.
type MergeMetadataResponse_FileMergeResultMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MergeMetadataResponse_FileMergeResultMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MergeMetadataResponse_FileMergeResultMultiError) AllErrors() []error { return m }

// MergeMetadataResponse_FileMergeResultValidationError is the validation error
// returned by MergeMetadataResponse_FileMergeResult.Validate if the
// designated constraints aren't met.
type MergeMetadataResponse_FileMergeResultValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MergeMetadataResponse_FileMergeResultValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MergeMetadataResponse_FileMergeResultValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MergeMetadataResponse_FileMergeResultValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MergeMetadataResponse_FileMergeResultValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MergeMetadataResponse_FileMergeResultValidationError) ErrorName() string {
	return "MergeMetadataResponse_FileMergeResultValidationError"
}

// Error satisfies the builtin error interface
func (e MergeMetadataResponse_FileMergeResultValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMergeMetadataResponse_FileMergeResult.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MergeMetadataResponse_FileMergeResultValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MergeMetadataResponse_FileMergeResultValidationError{}
