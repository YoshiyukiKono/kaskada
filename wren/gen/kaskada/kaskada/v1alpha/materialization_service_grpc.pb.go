// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: kaskada/kaskada/v1alpha/materialization_service.proto

package kaskadav1alpha

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MaterializationServiceClient is the client API for MaterializationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MaterializationServiceClient interface {
	// Lists materializations.
	//
	// The response includes all Materializations defined for the Kaskada
	// account. If a search string is provided, only Materializations
	// matching the search string are returned.
	ListMaterializations(ctx context.Context, in *ListMaterializationsRequest, opts ...grpc.CallOption) (*ListMaterializationsResponse, error)
	// Gets a materialization.
	GetMaterialization(ctx context.Context, in *GetMaterializationRequest, opts ...grpc.CallOption) (*GetMaterializationResponse, error)
	// Creates a materialization.
	CreateMaterialization(ctx context.Context, in *CreateMaterializationRequest, opts ...grpc.CallOption) (*CreateMaterializationResponse, error)
	// Deletes a materialization and any events loaded into it.
	DeleteMaterialization(ctx context.Context, in *DeleteMaterializationRequest, opts ...grpc.CallOption) (*DeleteMaterializationResponse, error)
}

type materializationServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMaterializationServiceClient(cc grpc.ClientConnInterface) MaterializationServiceClient {
	return &materializationServiceClient{cc}
}

func (c *materializationServiceClient) ListMaterializations(ctx context.Context, in *ListMaterializationsRequest, opts ...grpc.CallOption) (*ListMaterializationsResponse, error) {
	out := new(ListMaterializationsResponse)
	err := c.cc.Invoke(ctx, "/kaskada.kaskada.v1alpha.MaterializationService/ListMaterializations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *materializationServiceClient) GetMaterialization(ctx context.Context, in *GetMaterializationRequest, opts ...grpc.CallOption) (*GetMaterializationResponse, error) {
	out := new(GetMaterializationResponse)
	err := c.cc.Invoke(ctx, "/kaskada.kaskada.v1alpha.MaterializationService/GetMaterialization", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *materializationServiceClient) CreateMaterialization(ctx context.Context, in *CreateMaterializationRequest, opts ...grpc.CallOption) (*CreateMaterializationResponse, error) {
	out := new(CreateMaterializationResponse)
	err := c.cc.Invoke(ctx, "/kaskada.kaskada.v1alpha.MaterializationService/CreateMaterialization", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *materializationServiceClient) DeleteMaterialization(ctx context.Context, in *DeleteMaterializationRequest, opts ...grpc.CallOption) (*DeleteMaterializationResponse, error) {
	out := new(DeleteMaterializationResponse)
	err := c.cc.Invoke(ctx, "/kaskada.kaskada.v1alpha.MaterializationService/DeleteMaterialization", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MaterializationServiceServer is the server API for MaterializationService service.
// All implementations must embed UnimplementedMaterializationServiceServer
// for forward compatibility
type MaterializationServiceServer interface {
	// Lists materializations.
	//
	// The response includes all Materializations defined for the Kaskada
	// account. If a search string is provided, only Materializations
	// matching the search string are returned.
	ListMaterializations(context.Context, *ListMaterializationsRequest) (*ListMaterializationsResponse, error)
	// Gets a materialization.
	GetMaterialization(context.Context, *GetMaterializationRequest) (*GetMaterializationResponse, error)
	// Creates a materialization.
	CreateMaterialization(context.Context, *CreateMaterializationRequest) (*CreateMaterializationResponse, error)
	// Deletes a materialization and any events loaded into it.
	DeleteMaterialization(context.Context, *DeleteMaterializationRequest) (*DeleteMaterializationResponse, error)
	mustEmbedUnimplementedMaterializationServiceServer()
}

// UnimplementedMaterializationServiceServer must be embedded to have forward compatible implementations.
type UnimplementedMaterializationServiceServer struct {
}

func (UnimplementedMaterializationServiceServer) ListMaterializations(context.Context, *ListMaterializationsRequest) (*ListMaterializationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListMaterializations not implemented")
}
func (UnimplementedMaterializationServiceServer) GetMaterialization(context.Context, *GetMaterializationRequest) (*GetMaterializationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMaterialization not implemented")
}
func (UnimplementedMaterializationServiceServer) CreateMaterialization(context.Context, *CreateMaterializationRequest) (*CreateMaterializationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMaterialization not implemented")
}
func (UnimplementedMaterializationServiceServer) DeleteMaterialization(context.Context, *DeleteMaterializationRequest) (*DeleteMaterializationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMaterialization not implemented")
}
func (UnimplementedMaterializationServiceServer) mustEmbedUnimplementedMaterializationServiceServer() {
}

// UnsafeMaterializationServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MaterializationServiceServer will
// result in compilation errors.
type UnsafeMaterializationServiceServer interface {
	mustEmbedUnimplementedMaterializationServiceServer()
}

func RegisterMaterializationServiceServer(s grpc.ServiceRegistrar, srv MaterializationServiceServer) {
	s.RegisterService(&MaterializationService_ServiceDesc, srv)
}

func _MaterializationService_ListMaterializations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListMaterializationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MaterializationServiceServer).ListMaterializations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kaskada.kaskada.v1alpha.MaterializationService/ListMaterializations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MaterializationServiceServer).ListMaterializations(ctx, req.(*ListMaterializationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MaterializationService_GetMaterialization_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMaterializationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MaterializationServiceServer).GetMaterialization(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kaskada.kaskada.v1alpha.MaterializationService/GetMaterialization",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MaterializationServiceServer).GetMaterialization(ctx, req.(*GetMaterializationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MaterializationService_CreateMaterialization_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateMaterializationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MaterializationServiceServer).CreateMaterialization(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kaskada.kaskada.v1alpha.MaterializationService/CreateMaterialization",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MaterializationServiceServer).CreateMaterialization(ctx, req.(*CreateMaterializationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MaterializationService_DeleteMaterialization_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteMaterializationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MaterializationServiceServer).DeleteMaterialization(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kaskada.kaskada.v1alpha.MaterializationService/DeleteMaterialization",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MaterializationServiceServer).DeleteMaterialization(ctx, req.(*DeleteMaterializationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MaterializationService_ServiceDesc is the grpc.ServiceDesc for MaterializationService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MaterializationService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "kaskada.kaskada.v1alpha.MaterializationService",
	HandlerType: (*MaterializationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListMaterializations",
			Handler:    _MaterializationService_ListMaterializations_Handler,
		},
		{
			MethodName: "GetMaterialization",
			Handler:    _MaterializationService_GetMaterialization_Handler,
		},
		{
			MethodName: "CreateMaterialization",
			Handler:    _MaterializationService_CreateMaterialization_Handler,
		},
		{
			MethodName: "DeleteMaterialization",
			Handler:    _MaterializationService_DeleteMaterialization_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "kaskada/kaskada/v1alpha/materialization_service.proto",
}
