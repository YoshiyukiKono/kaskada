// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: kaskada/kaskada/v1alpha/query_service.proto

package kaskadav1alpha

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// QueryServiceClient is the client API for QueryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type QueryServiceClient interface {
	// Creates a Query.
	CreateQuery(ctx context.Context, in *CreateQueryRequest, opts ...grpc.CallOption) (QueryService_CreateQueryClient, error)
	// Gets a Query.
	GetQuery(ctx context.Context, in *GetQueryRequest, opts ...grpc.CallOption) (*GetQueryResponse, error)
	// Lists queries.
	//
	// The response includes all Queries defined for the Kaskada account.
	// If a search string is provided, only Queries matching the search string
	// are returned.
	ListQueries(ctx context.Context, in *ListQueriesRequest, opts ...grpc.CallOption) (*ListQueriesResponse, error)
}

type queryServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewQueryServiceClient(cc grpc.ClientConnInterface) QueryServiceClient {
	return &queryServiceClient{cc}
}

func (c *queryServiceClient) CreateQuery(ctx context.Context, in *CreateQueryRequest, opts ...grpc.CallOption) (QueryService_CreateQueryClient, error) {
	stream, err := c.cc.NewStream(ctx, &QueryService_ServiceDesc.Streams[0], "/kaskada.kaskada.v1alpha.QueryService/CreateQuery", opts...)
	if err != nil {
		return nil, err
	}
	x := &queryServiceCreateQueryClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type QueryService_CreateQueryClient interface {
	Recv() (*CreateQueryResponse, error)
	grpc.ClientStream
}

type queryServiceCreateQueryClient struct {
	grpc.ClientStream
}

func (x *queryServiceCreateQueryClient) Recv() (*CreateQueryResponse, error) {
	m := new(CreateQueryResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *queryServiceClient) GetQuery(ctx context.Context, in *GetQueryRequest, opts ...grpc.CallOption) (*GetQueryResponse, error) {
	out := new(GetQueryResponse)
	err := c.cc.Invoke(ctx, "/kaskada.kaskada.v1alpha.QueryService/GetQuery", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryServiceClient) ListQueries(ctx context.Context, in *ListQueriesRequest, opts ...grpc.CallOption) (*ListQueriesResponse, error) {
	out := new(ListQueriesResponse)
	err := c.cc.Invoke(ctx, "/kaskada.kaskada.v1alpha.QueryService/ListQueries", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServiceServer is the server API for QueryService service.
// All implementations must embed UnimplementedQueryServiceServer
// for forward compatibility
type QueryServiceServer interface {
	// Creates a Query.
	CreateQuery(*CreateQueryRequest, QueryService_CreateQueryServer) error
	// Gets a Query.
	GetQuery(context.Context, *GetQueryRequest) (*GetQueryResponse, error)
	// Lists queries.
	//
	// The response includes all Queries defined for the Kaskada account.
	// If a search string is provided, only Queries matching the search string
	// are returned.
	ListQueries(context.Context, *ListQueriesRequest) (*ListQueriesResponse, error)
	mustEmbedUnimplementedQueryServiceServer()
}

// UnimplementedQueryServiceServer must be embedded to have forward compatible implementations.
type UnimplementedQueryServiceServer struct {
}

func (UnimplementedQueryServiceServer) CreateQuery(*CreateQueryRequest, QueryService_CreateQueryServer) error {
	return status.Errorf(codes.Unimplemented, "method CreateQuery not implemented")
}
func (UnimplementedQueryServiceServer) GetQuery(context.Context, *GetQueryRequest) (*GetQueryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetQuery not implemented")
}
func (UnimplementedQueryServiceServer) ListQueries(context.Context, *ListQueriesRequest) (*ListQueriesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListQueries not implemented")
}
func (UnimplementedQueryServiceServer) mustEmbedUnimplementedQueryServiceServer() {}

// UnsafeQueryServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to QueryServiceServer will
// result in compilation errors.
type UnsafeQueryServiceServer interface {
	mustEmbedUnimplementedQueryServiceServer()
}

func RegisterQueryServiceServer(s grpc.ServiceRegistrar, srv QueryServiceServer) {
	s.RegisterService(&QueryService_ServiceDesc, srv)
}

func _QueryService_CreateQuery_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(CreateQueryRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(QueryServiceServer).CreateQuery(m, &queryServiceCreateQueryServer{stream})
}

type QueryService_CreateQueryServer interface {
	Send(*CreateQueryResponse) error
	grpc.ServerStream
}

type queryServiceCreateQueryServer struct {
	grpc.ServerStream
}

func (x *queryServiceCreateQueryServer) Send(m *CreateQueryResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _QueryService_GetQuery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetQueryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).GetQuery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kaskada.kaskada.v1alpha.QueryService/GetQuery",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).GetQuery(ctx, req.(*GetQueryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryService_ListQueries_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListQueriesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).ListQueries(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kaskada.kaskada.v1alpha.QueryService/ListQueries",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).ListQueries(ctx, req.(*ListQueriesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// QueryService_ServiceDesc is the grpc.ServiceDesc for QueryService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var QueryService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "kaskada.kaskada.v1alpha.QueryService",
	HandlerType: (*QueryServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetQuery",
			Handler:    _QueryService_GetQuery_Handler,
		},
		{
			MethodName: "ListQueries",
			Handler:    _QueryService_ListQueries_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "CreateQuery",
			Handler:       _QueryService_CreateQuery_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "kaskada/kaskada/v1alpha/query_service.proto",
}
