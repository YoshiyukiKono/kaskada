// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0-devel
// 	protoc        (unknown)
// source: kaskada/kaskada/v1alpha/preparation_service.proto

package kaskadav1alpha

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type PrepareDataRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The source of information for the prepare data
	//
	// Note: Version 1 - Allow only 1 file
	FilePath *FilePath `protobuf:"bytes,1,opt,name=file_path,json=filePath,proto3" json:"file_path,omitempty"`
	// General configuration of the table
	Config *TableConfig `protobuf:"bytes,2,opt,name=config,proto3" json:"config,omitempty"`
	// Prefix path for the output file(s).
	OutputPathPrefix string `protobuf:"bytes,3,opt,name=output_path_prefix,json=outputPathPrefix,proto3" json:"output_path_prefix,omitempty"`
	// Prefix for each output file(s).
	//
	// The full local path of the file will be <prefix_output_path>/<file_prefix>-#.parquet
	// TODO: Seems like we could merge the `output_path_prefix` and `file_prefix`.
	FilePrefix string `protobuf:"bytes,4,opt,name=file_prefix,json=filePrefix,proto3" json:"file_prefix,omitempty"`
	// The slicing plan provided from the analysis
	//
	// If no slice plan is provided, then the full file is prepared.
	SlicePlan *SlicePlan `protobuf:"bytes,5,opt,name=slice_plan,json=slicePlan,proto3" json:"slice_plan,omitempty"`
}

func (x *PrepareDataRequest) Reset() {
	*x = PrepareDataRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kaskada_kaskada_v1alpha_preparation_service_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PrepareDataRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PrepareDataRequest) ProtoMessage() {}

func (x *PrepareDataRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kaskada_kaskada_v1alpha_preparation_service_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PrepareDataRequest.ProtoReflect.Descriptor instead.
func (*PrepareDataRequest) Descriptor() ([]byte, []int) {
	return file_kaskada_kaskada_v1alpha_preparation_service_proto_rawDescGZIP(), []int{0}
}

func (x *PrepareDataRequest) GetFilePath() *FilePath {
	if x != nil {
		return x.FilePath
	}
	return nil
}

func (x *PrepareDataRequest) GetConfig() *TableConfig {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *PrepareDataRequest) GetOutputPathPrefix() string {
	if x != nil {
		return x.OutputPathPrefix
	}
	return ""
}

func (x *PrepareDataRequest) GetFilePrefix() string {
	if x != nil {
		return x.FilePrefix
	}
	return ""
}

func (x *PrepareDataRequest) GetSlicePlan() *SlicePlan {
	if x != nil {
		return x.SlicePlan
	}
	return nil
}

type PrepareDataResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The preparation ID of the prepare data response
	//
	// Note: As more data preparation states are added, the preparation ID allows us to keep track and re-process as needed.
	PrepId int32 `protobuf:"varint,1,opt,name=prep_id,json=prepId,proto3" json:"prep_id,omitempty"`
	// The prepared files after processing
	//
	// A single source file may produce multiple prepared files.
	PreparedFiles []*PreparedFile `protobuf:"bytes,2,rep,name=prepared_files,json=preparedFiles,proto3" json:"prepared_files,omitempty"`
}

func (x *PrepareDataResponse) Reset() {
	*x = PrepareDataResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kaskada_kaskada_v1alpha_preparation_service_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PrepareDataResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PrepareDataResponse) ProtoMessage() {}

func (x *PrepareDataResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kaskada_kaskada_v1alpha_preparation_service_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PrepareDataResponse.ProtoReflect.Descriptor instead.
func (*PrepareDataResponse) Descriptor() ([]byte, []int) {
	return file_kaskada_kaskada_v1alpha_preparation_service_proto_rawDescGZIP(), []int{1}
}

func (x *PrepareDataResponse) GetPrepId() int32 {
	if x != nil {
		return x.PrepId
	}
	return 0
}

func (x *PrepareDataResponse) GetPreparedFiles() []*PreparedFile {
	if x != nil {
		return x.PreparedFiles
	}
	return nil
}

type GetCurrentPrepIDRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetCurrentPrepIDRequest) Reset() {
	*x = GetCurrentPrepIDRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kaskada_kaskada_v1alpha_preparation_service_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCurrentPrepIDRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCurrentPrepIDRequest) ProtoMessage() {}

func (x *GetCurrentPrepIDRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kaskada_kaskada_v1alpha_preparation_service_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCurrentPrepIDRequest.ProtoReflect.Descriptor instead.
func (*GetCurrentPrepIDRequest) Descriptor() ([]byte, []int) {
	return file_kaskada_kaskada_v1alpha_preparation_service_proto_rawDescGZIP(), []int{2}
}

type GetCurrentPrepIDResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The current preparation ID of the data preparation
	PrepId int32 `protobuf:"varint,1,opt,name=prep_id,json=prepId,proto3" json:"prep_id,omitempty"`
}

func (x *GetCurrentPrepIDResponse) Reset() {
	*x = GetCurrentPrepIDResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kaskada_kaskada_v1alpha_preparation_service_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCurrentPrepIDResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCurrentPrepIDResponse) ProtoMessage() {}

func (x *GetCurrentPrepIDResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kaskada_kaskada_v1alpha_preparation_service_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCurrentPrepIDResponse.ProtoReflect.Descriptor instead.
func (*GetCurrentPrepIDResponse) Descriptor() ([]byte, []int) {
	return file_kaskada_kaskada_v1alpha_preparation_service_proto_rawDescGZIP(), []int{3}
}

func (x *GetCurrentPrepIDResponse) GetPrepId() int32 {
	if x != nil {
		return x.PrepId
	}
	return 0
}

var File_kaskada_kaskada_v1alpha_preparation_service_proto protoreflect.FileDescriptor

var file_kaskada_kaskada_v1alpha_preparation_service_proto_rawDesc = []byte{
	0x0a, 0x31, 0x6b, 0x61, 0x73, 0x6b, 0x61, 0x64, 0x61, 0x2f, 0x6b, 0x61, 0x73, 0x6b, 0x61, 0x64,
	0x61, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2f, 0x70, 0x72, 0x65, 0x70, 0x61, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x17, 0x6b, 0x61, 0x73, 0x6b, 0x61, 0x64, 0x61, 0x2e, 0x6b, 0x61, 0x73,
	0x6b, 0x61, 0x64, 0x61, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x1a, 0x24, 0x6b, 0x61,
	0x73, 0x6b, 0x61, 0x64, 0x61, 0x2f, 0x6b, 0x61, 0x73, 0x6b, 0x61, 0x64, 0x61, 0x2f, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0xa4, 0x02, 0x0a, 0x12, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x44, 0x61,
	0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3e, 0x0a, 0x09, 0x66, 0x69, 0x6c,
	0x65, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6b,
	0x61, 0x73, 0x6b, 0x61, 0x64, 0x61, 0x2e, 0x6b, 0x61, 0x73, 0x6b, 0x61, 0x64, 0x61, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x68, 0x52,
	0x08, 0x66, 0x69, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x68, 0x12, 0x3c, 0x0a, 0x06, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6b, 0x61, 0x73, 0x6b,
	0x61, 0x64, 0x61, 0x2e, 0x6b, 0x61, 0x73, 0x6b, 0x61, 0x64, 0x61, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52,
	0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x2c, 0x0a, 0x12, 0x6f, 0x75, 0x74, 0x70, 0x75,
	0x74, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x10, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x50, 0x61, 0x74, 0x68, 0x50,
	0x72, 0x65, 0x66, 0x69, 0x78, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x70, 0x72,
	0x65, 0x66, 0x69, 0x78, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x66, 0x69, 0x6c, 0x65,
	0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x12, 0x41, 0x0a, 0x0a, 0x73, 0x6c, 0x69, 0x63, 0x65, 0x5f,
	0x70, 0x6c, 0x61, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6b, 0x61, 0x73,
	0x6b, 0x61, 0x64, 0x61, 0x2e, 0x6b, 0x61, 0x73, 0x6b, 0x61, 0x64, 0x61, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x2e, 0x53, 0x6c, 0x69, 0x63, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x09,
	0x73, 0x6c, 0x69, 0x63, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x22, 0x7c, 0x0a, 0x13, 0x50, 0x72, 0x65,
	0x70, 0x61, 0x72, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x17, 0x0a, 0x07, 0x70, 0x72, 0x65, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x06, 0x70, 0x72, 0x65, 0x70, 0x49, 0x64, 0x12, 0x4c, 0x0a, 0x0e, 0x70, 0x72, 0x65,
	0x70, 0x61, 0x72, 0x65, 0x64, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x25, 0x2e, 0x6b, 0x61, 0x73, 0x6b, 0x61, 0x64, 0x61, 0x2e, 0x6b, 0x61, 0x73, 0x6b,
	0x61, 0x64, 0x61, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x50, 0x72, 0x65, 0x70,
	0x61, 0x72, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x0d, 0x70, 0x72, 0x65, 0x70, 0x61, 0x72,
	0x65, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x22, 0x19, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x43, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x65, 0x70, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x22, 0x33, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74,
	0x50, 0x72, 0x65, 0x70, 0x49, 0x44, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x17,
	0x0a, 0x07, 0x70, 0x72, 0x65, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x06, 0x70, 0x72, 0x65, 0x70, 0x49, 0x64, 0x32, 0xf7, 0x01, 0x0a, 0x12, 0x50, 0x72, 0x65, 0x70,
	0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x68,
	0x0a, 0x0b, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x2b, 0x2e,
	0x6b, 0x61, 0x73, 0x6b, 0x61, 0x64, 0x61, 0x2e, 0x6b, 0x61, 0x73, 0x6b, 0x61, 0x64, 0x61, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x44,
	0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x6b, 0x61, 0x73,
	0x6b, 0x61, 0x64, 0x61, 0x2e, 0x6b, 0x61, 0x73, 0x6b, 0x61, 0x64, 0x61, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x2e, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x44, 0x61, 0x74, 0x61,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x77, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x43,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x65, 0x70, 0x49, 0x44, 0x12, 0x30, 0x2e, 0x6b,
	0x61, 0x73, 0x6b, 0x61, 0x64, 0x61, 0x2e, 0x6b, 0x61, 0x73, 0x6b, 0x61, 0x64, 0x61, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x74, 0x50, 0x72, 0x65, 0x70, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31,
	0x2e, 0x6b, 0x61, 0x73, 0x6b, 0x61, 0x64, 0x61, 0x2e, 0x6b, 0x61, 0x73, 0x6b, 0x61, 0x64, 0x61,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x74, 0x50, 0x72, 0x65, 0x70, 0x49, 0x44, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x42, 0x83, 0x02, 0x0a, 0x1b, 0x63, 0x6f, 0x6d, 0x2e, 0x6b, 0x61, 0x73, 0x6b, 0x61, 0x64,
	0x61, 0x2e, 0x6b, 0x61, 0x73, 0x6b, 0x61, 0x64, 0x61, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x42, 0x17, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x4d, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6b, 0x61, 0x73, 0x6b, 0x61, 0x64, 0x61,
	0x2f, 0x6b, 0x61, 0x73, 0x6b, 0x61, 0x64, 0x61, 0x2d, 0x61, 0x69, 0x2f, 0x77, 0x72, 0x65, 0x6e,
	0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x6b, 0x61, 0x73, 0x6b, 0x61, 0x64, 0x61, 0x2f, 0x6b, 0x61, 0x73,
	0x6b, 0x61, 0x64, 0x61, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x3b, 0x6b, 0x61, 0x73,
	0x6b, 0x61, 0x64, 0x61, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0xa2, 0x02, 0x03, 0x4b, 0x4b,
	0x58, 0xaa, 0x02, 0x17, 0x4b, 0x61, 0x73, 0x6b, 0x61, 0x64, 0x61, 0x2e, 0x4b, 0x61, 0x73, 0x6b,
	0x61, 0x64, 0x61, 0x2e, 0x56, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0xca, 0x02, 0x17, 0x4b, 0x61,
	0x73, 0x6b, 0x61, 0x64, 0x61, 0x5c, 0x4b, 0x61, 0x73, 0x6b, 0x61, 0x64, 0x61, 0x5c, 0x56, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0xe2, 0x02, 0x23, 0x4b, 0x61, 0x73, 0x6b, 0x61, 0x64, 0x61, 0x5c,
	0x4b, 0x61, 0x73, 0x6b, 0x61, 0x64, 0x61, 0x5c, 0x56, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x5c,
	0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x19, 0x4b, 0x61,
	0x73, 0x6b, 0x61, 0x64, 0x61, 0x3a, 0x3a, 0x4b, 0x61, 0x73, 0x6b, 0x61, 0x64, 0x61, 0x3a, 0x3a,
	0x56, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_kaskada_kaskada_v1alpha_preparation_service_proto_rawDescOnce sync.Once
	file_kaskada_kaskada_v1alpha_preparation_service_proto_rawDescData = file_kaskada_kaskada_v1alpha_preparation_service_proto_rawDesc
)

func file_kaskada_kaskada_v1alpha_preparation_service_proto_rawDescGZIP() []byte {
	file_kaskada_kaskada_v1alpha_preparation_service_proto_rawDescOnce.Do(func() {
		file_kaskada_kaskada_v1alpha_preparation_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_kaskada_kaskada_v1alpha_preparation_service_proto_rawDescData)
	})
	return file_kaskada_kaskada_v1alpha_preparation_service_proto_rawDescData
}

var file_kaskada_kaskada_v1alpha_preparation_service_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_kaskada_kaskada_v1alpha_preparation_service_proto_goTypes = []interface{}{
	(*PrepareDataRequest)(nil),       // 0: kaskada.kaskada.v1alpha.PrepareDataRequest
	(*PrepareDataResponse)(nil),      // 1: kaskada.kaskada.v1alpha.PrepareDataResponse
	(*GetCurrentPrepIDRequest)(nil),  // 2: kaskada.kaskada.v1alpha.GetCurrentPrepIDRequest
	(*GetCurrentPrepIDResponse)(nil), // 3: kaskada.kaskada.v1alpha.GetCurrentPrepIDResponse
	(*FilePath)(nil),                 // 4: kaskada.kaskada.v1alpha.FilePath
	(*TableConfig)(nil),              // 5: kaskada.kaskada.v1alpha.TableConfig
	(*SlicePlan)(nil),                // 6: kaskada.kaskada.v1alpha.SlicePlan
	(*PreparedFile)(nil),             // 7: kaskada.kaskada.v1alpha.PreparedFile
}
var file_kaskada_kaskada_v1alpha_preparation_service_proto_depIdxs = []int32{
	4, // 0: kaskada.kaskada.v1alpha.PrepareDataRequest.file_path:type_name -> kaskada.kaskada.v1alpha.FilePath
	5, // 1: kaskada.kaskada.v1alpha.PrepareDataRequest.config:type_name -> kaskada.kaskada.v1alpha.TableConfig
	6, // 2: kaskada.kaskada.v1alpha.PrepareDataRequest.slice_plan:type_name -> kaskada.kaskada.v1alpha.SlicePlan
	7, // 3: kaskada.kaskada.v1alpha.PrepareDataResponse.prepared_files:type_name -> kaskada.kaskada.v1alpha.PreparedFile
	0, // 4: kaskada.kaskada.v1alpha.PreparationService.PrepareData:input_type -> kaskada.kaskada.v1alpha.PrepareDataRequest
	2, // 5: kaskada.kaskada.v1alpha.PreparationService.GetCurrentPrepID:input_type -> kaskada.kaskada.v1alpha.GetCurrentPrepIDRequest
	1, // 6: kaskada.kaskada.v1alpha.PreparationService.PrepareData:output_type -> kaskada.kaskada.v1alpha.PrepareDataResponse
	3, // 7: kaskada.kaskada.v1alpha.PreparationService.GetCurrentPrepID:output_type -> kaskada.kaskada.v1alpha.GetCurrentPrepIDResponse
	6, // [6:8] is the sub-list for method output_type
	4, // [4:6] is the sub-list for method input_type
	4, // [4:4] is the sub-list for extension type_name
	4, // [4:4] is the sub-list for extension extendee
	0, // [0:4] is the sub-list for field type_name
}

func init() { file_kaskada_kaskada_v1alpha_preparation_service_proto_init() }
func file_kaskada_kaskada_v1alpha_preparation_service_proto_init() {
	if File_kaskada_kaskada_v1alpha_preparation_service_proto != nil {
		return
	}
	file_kaskada_kaskada_v1alpha_common_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_kaskada_kaskada_v1alpha_preparation_service_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PrepareDataRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kaskada_kaskada_v1alpha_preparation_service_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PrepareDataResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kaskada_kaskada_v1alpha_preparation_service_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCurrentPrepIDRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kaskada_kaskada_v1alpha_preparation_service_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCurrentPrepIDResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_kaskada_kaskada_v1alpha_preparation_service_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_kaskada_kaskada_v1alpha_preparation_service_proto_goTypes,
		DependencyIndexes: file_kaskada_kaskada_v1alpha_preparation_service_proto_depIdxs,
		MessageInfos:      file_kaskada_kaskada_v1alpha_preparation_service_proto_msgTypes,
	}.Build()
	File_kaskada_kaskada_v1alpha_preparation_service_proto = out.File
	file_kaskada_kaskada_v1alpha_preparation_service_proto_rawDesc = nil
	file_kaskada_kaskada_v1alpha_preparation_service_proto_goTypes = nil
	file_kaskada_kaskada_v1alpha_preparation_service_proto_depIdxs = nil
}
