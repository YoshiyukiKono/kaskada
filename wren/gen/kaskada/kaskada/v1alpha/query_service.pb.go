// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0-devel
// 	protoc        (unknown)
// source: kaskada/kaskada/v1alpha/query_service.proto

package kaskadav1alpha

import (
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Query_ResultBehavior int32

const (
	// Unspecified - Invalid Value
	Query_RESULT_BEHAVIOR_UNSPECIFIED Query_ResultBehavior = 0
	// All results are returned
	Query_RESULT_BEHAVIOR_ALL_RESULTS Query_ResultBehavior = 1
	// Only the most recent event for each entity will be returned
	Query_RESULT_BEHAVIOR_FINAL_RESULTS Query_ResultBehavior = 2
	// Only the most recent event (inclusive limit) for each entity will be returned
	Query_RESULT_BEHAVIOR_FINAL_RESULTS_AT_TIME Query_ResultBehavior = 3
)

// Enum value maps for Query_ResultBehavior.
var (
	Query_ResultBehavior_name = map[int32]string{
		0: "RESULT_BEHAVIOR_UNSPECIFIED",
		1: "RESULT_BEHAVIOR_ALL_RESULTS",
		2: "RESULT_BEHAVIOR_FINAL_RESULTS",
		3: "RESULT_BEHAVIOR_FINAL_RESULTS_AT_TIME",
	}
	Query_ResultBehavior_value = map[string]int32{
		"RESULT_BEHAVIOR_UNSPECIFIED":           0,
		"RESULT_BEHAVIOR_ALL_RESULTS":           1,
		"RESULT_BEHAVIOR_FINAL_RESULTS":         2,
		"RESULT_BEHAVIOR_FINAL_RESULTS_AT_TIME": 3,
	}
)

func (x Query_ResultBehavior) Enum() *Query_ResultBehavior {
	p := new(Query_ResultBehavior)
	*p = x
	return p
}

func (x Query_ResultBehavior) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Query_ResultBehavior) Descriptor() protoreflect.EnumDescriptor {
	return file_kaskada_kaskada_v1alpha_query_service_proto_enumTypes[0].Descriptor()
}

func (Query_ResultBehavior) Type() protoreflect.EnumType {
	return &file_kaskada_kaskada_v1alpha_query_service_proto_enumTypes[0]
}

func (x Query_ResultBehavior) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Query_ResultBehavior.Descriptor instead.
func (Query_ResultBehavior) EnumDescriptor() ([]byte, []int) {
	return file_kaskada_kaskada_v1alpha_query_service_proto_rawDescGZIP(), []int{0, 0}
}

type CreateQueryResponse_State int32

const (
	CreateQueryResponse_STATE_UNSPECIFIED CreateQueryResponse_State = 0
	CreateQueryResponse_STATE_ANALYSIS    CreateQueryResponse_State = 1
	CreateQueryResponse_STATE_PREPARING   CreateQueryResponse_State = 2
	CreateQueryResponse_STATE_COMPUTING   CreateQueryResponse_State = 3
	CreateQueryResponse_STATE_SUCCESS     CreateQueryResponse_State = 4
	CreateQueryResponse_STATE_FAILURE     CreateQueryResponse_State = 5
)

// Enum value maps for CreateQueryResponse_State.
var (
	CreateQueryResponse_State_name = map[int32]string{
		0: "STATE_UNSPECIFIED",
		1: "STATE_ANALYSIS",
		2: "STATE_PREPARING",
		3: "STATE_COMPUTING",
		4: "STATE_SUCCESS",
		5: "STATE_FAILURE",
	}
	CreateQueryResponse_State_value = map[string]int32{
		"STATE_UNSPECIFIED": 0,
		"STATE_ANALYSIS":    1,
		"STATE_PREPARING":   2,
		"STATE_COMPUTING":   3,
		"STATE_SUCCESS":     4,
		"STATE_FAILURE":     5,
	}
)

func (x CreateQueryResponse_State) Enum() *CreateQueryResponse_State {
	p := new(CreateQueryResponse_State)
	*p = x
	return p
}

func (x CreateQueryResponse_State) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CreateQueryResponse_State) Descriptor() protoreflect.EnumDescriptor {
	return file_kaskada_kaskada_v1alpha_query_service_proto_enumTypes[1].Descriptor()
}

func (CreateQueryResponse_State) Type() protoreflect.EnumType {
	return &file_kaskada_kaskada_v1alpha_query_service_proto_enumTypes[1]
}

func (x CreateQueryResponse_State) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CreateQueryResponse_State.Descriptor instead.
func (CreateQueryResponse_State) EnumDescriptor() ([]byte, []int) {
	return file_kaskada_kaskada_v1alpha_query_service_proto_rawDescGZIP(), []int{3, 0}
}

type Query struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The query's ID.
	//
	// This value is a unique identifier for the query within a Kaskada
	// account. The ID is generated by Kaskada, and is provided as a
	// read-only field.
	QueryId string `protobuf:"bytes,1,opt,name=query_id,json=queryId,proto3" json:"query_id,omitempty"`
	// A Fenl expression to compute.
	Expression string `protobuf:"bytes,2,opt,name=expression,proto3" json:"expression,omitempty"`
	// Configures how the query results should be returned.
	//
	// Types that are assignable to ResponseAs:
	//	*Query_AsFiles
	//	*Query_RedisAI_
	//	*Query_Pulsar_
	ResponseAs isQuery_ResponseAs `protobuf_oneof:"response_as"`
	// Optional. A token to run queries against. Enables repeatable queries.
	//
	// For new queries:
	// Null - Uses the latest data token
	// StringValue String - UUID of data token to use for query
	//
	// For existing queries:
	// Null - Uses the data token associated with the query resource
	// StringValue null - Uses the latest data token
	// StringValue String - UUID of data token to use for query
	DataTokenId *wrapperspb.StringValue `protobuf:"bytes,3,opt,name=data_token_id,json=dataTokenId,proto3" json:"data_token_id,omitempty"`
	// The views utilized in the query
	//
	// TODO: More thorough docs.
	Views []*View `protobuf:"bytes,4,rep,name=views,proto3" json:"views,omitempty"`
	// Determines how results are returned.
	//
	// Note that for response_as -> RedisBulkResponse or RedisAI, this
	// setting is ignored, and `RESULT_BEHAVIOR_FINAL_RESULTS` is always
	// used.
	ResultBehavior Query_ResultBehavior `protobuf:"varint,5,opt,name=result_behavior,json=resultBehavior,proto3,enum=kaskada.kaskada.v1alpha.Query_ResultBehavior" json:"result_behavior,omitempty"`
	// Configure limits on the output set.
	Limits *Query_Limits `protobuf:"bytes,6,opt,name=limits,proto3" json:"limits,omitempty"`
	// How to slice the input data for the query
	Slice *SliceRequest `protobuf:"bytes,7,opt,name=slice,proto3" json:"slice,omitempty"`
	// Time bound (inclusive) after which results will be output.
	//
	// All results will include rows for changes (events and ticks) after this time (inclusive).
	// Final results will include a final result for any entity that would be included in the changed results."
	ChangedSinceTime *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=changed_since_time,json=changedSinceTime,proto3" json:"changed_since_time,omitempty"`
	// Time bound (inclusive) which final results will include.
	FinalResultTime *timestamppb.Timestamp `protobuf:"bytes,9,opt,name=final_result_time,json=finalResultTime,proto3" json:"final_result_time,omitempty"`
	// The time the query resource was created
	CreateTime *timestamppb.Timestamp `protobuf:"bytes,10,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
}

func (x *Query) Reset() {
	*x = Query{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kaskada_kaskada_v1alpha_query_service_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Query) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Query) ProtoMessage() {}

func (x *Query) ProtoReflect() protoreflect.Message {
	mi := &file_kaskada_kaskada_v1alpha_query_service_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Query.ProtoReflect.Descriptor instead.
func (*Query) Descriptor() ([]byte, []int) {
	return file_kaskada_kaskada_v1alpha_query_service_proto_rawDescGZIP(), []int{0}
}

func (x *Query) GetQueryId() string {
	if x != nil {
		return x.QueryId
	}
	return ""
}

func (x *Query) GetExpression() string {
	if x != nil {
		return x.Expression
	}
	return ""
}

func (m *Query) GetResponseAs() isQuery_ResponseAs {
	if m != nil {
		return m.ResponseAs
	}
	return nil
}

func (x *Query) GetAsFiles() *AsFiles {
	if x, ok := x.GetResponseAs().(*Query_AsFiles); ok {
		return x.AsFiles
	}
	return nil
}

func (x *Query) GetRedisAI() *Query_RedisAI {
	if x, ok := x.GetResponseAs().(*Query_RedisAI_); ok {
		return x.RedisAI
	}
	return nil
}

func (x *Query) GetPulsar() *Query_Pulsar {
	if x, ok := x.GetResponseAs().(*Query_Pulsar_); ok {
		return x.Pulsar
	}
	return nil
}

func (x *Query) GetDataTokenId() *wrapperspb.StringValue {
	if x != nil {
		return x.DataTokenId
	}
	return nil
}

func (x *Query) GetViews() []*View {
	if x != nil {
		return x.Views
	}
	return nil
}

func (x *Query) GetResultBehavior() Query_ResultBehavior {
	if x != nil {
		return x.ResultBehavior
	}
	return Query_RESULT_BEHAVIOR_UNSPECIFIED
}

func (x *Query) GetLimits() *Query_Limits {
	if x != nil {
		return x.Limits
	}
	return nil
}

func (x *Query) GetSlice() *SliceRequest {
	if x != nil {
		return x.Slice
	}
	return nil
}

func (x *Query) GetChangedSinceTime() *timestamppb.Timestamp {
	if x != nil {
		return x.ChangedSinceTime
	}
	return nil
}

func (x *Query) GetFinalResultTime() *timestamppb.Timestamp {
	if x != nil {
		return x.FinalResultTime
	}
	return nil
}

func (x *Query) GetCreateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

type isQuery_ResponseAs interface {
	isQuery_ResponseAs()
}

type Query_AsFiles struct {
	// Returns results as files.
	AsFiles *AsFiles `protobuf:"bytes,101,opt,name=as_files,json=asFiles,proto3,oneof"`
}

type Query_RedisAI_ struct {
	// Writes the results directly to a RedisAI instance.
	//
	// Uses a series of AI.TENSORSET operations
	//
	// The query expression's type must be a record.
	// The record type must include a field named 'key'.
	// The value of the 'key' field is used as the AI.TENSORSET key.
	// All other fields must be numeric.
	//
	// See https://redis.io/topics/protocol
	RedisAI *Query_RedisAI `protobuf:"bytes,102,opt,name=redis_a_i,json=redisAI,proto3,oneof"`
}

type Query_Pulsar_ struct {
	// Writes results directly to a Pulsar topic.
	Pulsar *Query_Pulsar `protobuf:"bytes,103,opt,name=pulsar,proto3,oneof"`
}

func (*Query_AsFiles) isQuery_ResponseAs() {}

func (*Query_RedisAI_) isQuery_ResponseAs() {}

func (*Query_Pulsar_) isQuery_ResponseAs() {}

type QueryOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// If this is `true`, then the query is validated and if there are no
	// errors, the resultant schema is returned. No actual computation of
	// results is performed.
	DryRun bool `protobuf:"varint,1,opt,name=dry_run,json=dryRun,proto3" json:"dry_run,omitempty"`
	// If this is `true`, then experimental features are allowed.  Data
	// returned when using this flag is not guaranteed to be correct.
	ExperimentalFeatures bool `protobuf:"varint,2,opt,name=experimental_features,json=experimentalFeatures,proto3" json:"experimental_features,omitempty"`
	// If this is `true`, then metrics information will be returned with
	// every response.  This is usefull to see how the query request is
	// progressing.  If `false`, metrics are only returned in the final
	// response.
	StreamMetrics bool `protobuf:"varint,3,opt,name=stream_metrics,json=streamMetrics,proto3" json:"stream_metrics,omitempty"`
	// If this is `true`, then file-based results will be pre-signed
	// before being returned.
	//
	// The files can be read with HTTP, and will be available for a
	// fixed amount of time (TTL).
	//
	// For example: When running the engine with S3 as the backing
	// store, and working locally, set this to true to return
	// results as HTTP URLs instead of S3 URIs.  The returned URLs
	// can be used to download the results file without additional
	// authenticaiton to S3.
	PresignResults bool `protobuf:"varint,4,opt,name=presign_results,json=presignResults,proto3" json:"presign_results,omitempty"`
}

func (x *QueryOptions) Reset() {
	*x = QueryOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kaskada_kaskada_v1alpha_query_service_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryOptions) ProtoMessage() {}

func (x *QueryOptions) ProtoReflect() protoreflect.Message {
	mi := &file_kaskada_kaskada_v1alpha_query_service_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryOptions.ProtoReflect.Descriptor instead.
func (*QueryOptions) Descriptor() ([]byte, []int) {
	return file_kaskada_kaskada_v1alpha_query_service_proto_rawDescGZIP(), []int{1}
}

func (x *QueryOptions) GetDryRun() bool {
	if x != nil {
		return x.DryRun
	}
	return false
}

func (x *QueryOptions) GetExperimentalFeatures() bool {
	if x != nil {
		return x.ExperimentalFeatures
	}
	return false
}

func (x *QueryOptions) GetStreamMetrics() bool {
	if x != nil {
		return x.StreamMetrics
	}
	return false
}

func (x *QueryOptions) GetPresignResults() bool {
	if x != nil {
		return x.PresignResults
	}
	return false
}

type CreateQueryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The query resource
	Query *Query `protobuf:"bytes,1,opt,name=query,proto3" json:"query,omitempty"`
	// Options for the query
	QueryOptions *QueryOptions `protobuf:"bytes,2,opt,name=query_options,json=queryOptions,proto3" json:"query_options,omitempty"`
}

func (x *CreateQueryRequest) Reset() {
	*x = CreateQueryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kaskada_kaskada_v1alpha_query_service_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateQueryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateQueryRequest) ProtoMessage() {}

func (x *CreateQueryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kaskada_kaskada_v1alpha_query_service_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateQueryRequest.ProtoReflect.Descriptor instead.
func (*CreateQueryRequest) Descriptor() ([]byte, []int) {
	return file_kaskada_kaskada_v1alpha_query_service_proto_rawDescGZIP(), []int{2}
}

func (x *CreateQueryRequest) GetQuery() *Query {
	if x != nil {
		return x.Query
	}
	return nil
}

func (x *CreateQueryRequest) GetQueryOptions() *QueryOptions {
	if x != nil {
		return x.QueryOptions
	}
	return nil
}

type CreateQueryResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	State CreateQueryResponse_State `protobuf:"varint,1,opt,name=state,proto3,enum=kaskada.kaskada.v1alpha.CreateQueryResponse_State" json:"state,omitempty"`
	// Config information returned when the state is STATE_ANALYSIS
	Config *CreateQueryResponse_Config `protobuf:"bytes,2,opt,name=config,proto3" json:"config,omitempty"`
	// Analysis information returned when the state is STATE_ANALYSIS
	Analysis *CreateQueryResponse_Analysis `protobuf:"bytes,3,opt,name=analysis,proto3" json:"analysis,omitempty"`
	// Diagnostic information about the query, can be returned in any response
	FenlDiagnostics *FenlDiagnostics `protobuf:"bytes,4,opt,name=fenl_diagnostics,json=fenlDiagnostics,proto3" json:"fenl_diagnostics,omitempty"`
	// Metrics about the query passed in every response if `stream_metrics`
	// was set `true`.  Otherwise returned in the final response only.
	Metrics *CreateQueryResponse_Metrics `protobuf:"bytes,5,opt,name=metrics,proto3" json:"metrics,omitempty"`
	// Information, help, or warnings related to the request
	RequestDetails *RequestDetails `protobuf:"bytes,6,opt,name=request_details,json=requestDetails,proto3" json:"request_details,omitempty"`
	// The query resource ID
	QueryId string `protobuf:"bytes,7,opt,name=query_id,json=queryId,proto3" json:"query_id,omitempty"`
	// Results of the query execution.  if this is empty (and `dry_run`
	//  was not set `true`), check `fenl_diagnostics` for reasons
	//
	// Results may be returned at any point in the response stream
	// each result represents a different subset of the results. All
	// results in any messge in the response stream should be
	// collected and used to represent the complete output.
	//
	// Types that are assignable to Results:
	//	*CreateQueryResponse_FileResults
	//	*CreateQueryResponse_RedisAI_
	//	*CreateQueryResponse_Pulsar_
	Results isCreateQueryResponse_Results `protobuf_oneof:"results"`
}

func (x *CreateQueryResponse) Reset() {
	*x = CreateQueryResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kaskada_kaskada_v1alpha_query_service_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateQueryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateQueryResponse) ProtoMessage() {}

func (x *CreateQueryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kaskada_kaskada_v1alpha_query_service_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateQueryResponse.ProtoReflect.Descriptor instead.
func (*CreateQueryResponse) Descriptor() ([]byte, []int) {
	return file_kaskada_kaskada_v1alpha_query_service_proto_rawDescGZIP(), []int{3}
}

func (x *CreateQueryResponse) GetState() CreateQueryResponse_State {
	if x != nil {
		return x.State
	}
	return CreateQueryResponse_STATE_UNSPECIFIED
}

func (x *CreateQueryResponse) GetConfig() *CreateQueryResponse_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *CreateQueryResponse) GetAnalysis() *CreateQueryResponse_Analysis {
	if x != nil {
		return x.Analysis
	}
	return nil
}

func (x *CreateQueryResponse) GetFenlDiagnostics() *FenlDiagnostics {
	if x != nil {
		return x.FenlDiagnostics
	}
	return nil
}

func (x *CreateQueryResponse) GetMetrics() *CreateQueryResponse_Metrics {
	if x != nil {
		return x.Metrics
	}
	return nil
}

func (x *CreateQueryResponse) GetRequestDetails() *RequestDetails {
	if x != nil {
		return x.RequestDetails
	}
	return nil
}

func (x *CreateQueryResponse) GetQueryId() string {
	if x != nil {
		return x.QueryId
	}
	return ""
}

func (m *CreateQueryResponse) GetResults() isCreateQueryResponse_Results {
	if m != nil {
		return m.Results
	}
	return nil
}

func (x *CreateQueryResponse) GetFileResults() *FileResults {
	if x, ok := x.GetResults().(*CreateQueryResponse_FileResults); ok {
		return x.FileResults
	}
	return nil
}

func (x *CreateQueryResponse) GetRedisAI() *CreateQueryResponse_RedisAI {
	if x, ok := x.GetResults().(*CreateQueryResponse_RedisAI_); ok {
		return x.RedisAI
	}
	return nil
}

func (x *CreateQueryResponse) GetPulsar() *CreateQueryResponse_Pulsar {
	if x, ok := x.GetResults().(*CreateQueryResponse_Pulsar_); ok {
		return x.Pulsar
	}
	return nil
}

type isCreateQueryResponse_Results interface {
	isCreateQueryResponse_Results()
}

type CreateQueryResponse_FileResults struct {
	// Files containing the query results.
	//
	// Returned when "AsFiles" is provided as the response_as
	// format.
	FileResults *FileResults `protobuf:"bytes,101,opt,name=file_results,json=fileResults,proto3,oneof"`
}

type CreateQueryResponse_RedisAI_ struct {
	RedisAI *CreateQueryResponse_RedisAI `protobuf:"bytes,102,opt,name=redis_a_i,json=redisAI,proto3,oneof"`
}

type CreateQueryResponse_Pulsar_ struct {
	Pulsar *CreateQueryResponse_Pulsar `protobuf:"bytes,103,opt,name=pulsar,proto3,oneof"`
}

func (*CreateQueryResponse_FileResults) isCreateQueryResponse_Results() {}

func (*CreateQueryResponse_RedisAI_) isCreateQueryResponse_Results() {}

func (*CreateQueryResponse_Pulsar_) isCreateQueryResponse_Results() {}

type GetQueryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The ID of the Query to get.
	QueryId string `protobuf:"bytes,1,opt,name=query_id,json=queryId,proto3" json:"query_id,omitempty"`
}

func (x *GetQueryRequest) Reset() {
	*x = GetQueryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kaskada_kaskada_v1alpha_query_service_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetQueryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetQueryRequest) ProtoMessage() {}

func (x *GetQueryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kaskada_kaskada_v1alpha_query_service_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetQueryRequest.ProtoReflect.Descriptor instead.
func (*GetQueryRequest) Descriptor() ([]byte, []int) {
	return file_kaskada_kaskada_v1alpha_query_service_proto_rawDescGZIP(), []int{4}
}

func (x *GetQueryRequest) GetQueryId() string {
	if x != nil {
		return x.QueryId
	}
	return ""
}

type GetQueryResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The requested Query.
	Query *Query `protobuf:"bytes,1,opt,name=query,proto3" json:"query,omitempty"`
}

func (x *GetQueryResponse) Reset() {
	*x = GetQueryResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kaskada_kaskada_v1alpha_query_service_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetQueryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetQueryResponse) ProtoMessage() {}

func (x *GetQueryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kaskada_kaskada_v1alpha_query_service_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetQueryResponse.ProtoReflect.Descriptor instead.
func (*GetQueryResponse) Descriptor() ([]byte, []int) {
	return file_kaskada_kaskada_v1alpha_query_service_proto_rawDescGZIP(), []int{5}
}

func (x *GetQueryResponse) GetQuery() *Query {
	if x != nil {
		return x.Query
	}
	return nil
}

type ListQueriesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Query search string.
	//
	// If provided, only queries cointaining the given string will
	// be returned.
	Search string `protobuf:"bytes,1,opt,name=search,proto3" json:"search,omitempty"`
	// The maximum number of items to return.
	PageSize int32 `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// The next_page_token value returned from a previous List request, if
	// any. Note: if this is set, the `search` and `page_size` parameters
	// are ignored, and the values set in the original request are used
	// instead.
	PageToken string `protobuf:"bytes,3,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
}

func (x *ListQueriesRequest) Reset() {
	*x = ListQueriesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kaskada_kaskada_v1alpha_query_service_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListQueriesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListQueriesRequest) ProtoMessage() {}

func (x *ListQueriesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kaskada_kaskada_v1alpha_query_service_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListQueriesRequest.ProtoReflect.Descriptor instead.
func (*ListQueriesRequest) Descriptor() ([]byte, []int) {
	return file_kaskada_kaskada_v1alpha_query_service_proto_rawDescGZIP(), []int{6}
}

func (x *ListQueriesRequest) GetSearch() string {
	if x != nil {
		return x.Search
	}
	return ""
}

func (x *ListQueriesRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListQueriesRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

type ListQueriesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A list of queries.
	Queries []*Query `protobuf:"bytes,1,rep,name=queries,proto3" json:"queries,omitempty"`
	// Token to retrieve the next page of results, or empty if there are no
	// more results in the list.
	NextPageToken string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	// Information, help, or warnings related to the request
	RequestDetails *RequestDetails `protobuf:"bytes,3,opt,name=request_details,json=requestDetails,proto3" json:"request_details,omitempty"`
}

func (x *ListQueriesResponse) Reset() {
	*x = ListQueriesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kaskada_kaskada_v1alpha_query_service_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListQueriesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListQueriesResponse) ProtoMessage() {}

func (x *ListQueriesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kaskada_kaskada_v1alpha_query_service_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListQueriesResponse.ProtoReflect.Descriptor instead.
func (*ListQueriesResponse) Descriptor() ([]byte, []int) {
	return file_kaskada_kaskada_v1alpha_query_service_proto_rawDescGZIP(), []int{7}
}

func (x *ListQueriesResponse) GetQueries() []*Query {
	if x != nil {
		return x.Queries
	}
	return nil
}

func (x *ListQueriesResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

func (x *ListQueriesResponse) GetRequestDetails() *RequestDetails {
	if x != nil {
		return x.RequestDetails
	}
	return nil
}

type Query_Limits struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Produces a preview of the data with at least this many rows.
	PreviewRows int64 `protobuf:"varint,1,opt,name=preview_rows,json=previewRows,proto3" json:"preview_rows,omitempty"`
}

func (x *Query_Limits) Reset() {
	*x = Query_Limits{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kaskada_kaskada_v1alpha_query_service_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Query_Limits) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Query_Limits) ProtoMessage() {}

func (x *Query_Limits) ProtoReflect() protoreflect.Message {
	mi := &file_kaskada_kaskada_v1alpha_query_service_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Query_Limits.ProtoReflect.Descriptor instead.
func (*Query_Limits) Descriptor() ([]byte, []int) {
	return file_kaskada_kaskada_v1alpha_query_service_proto_rawDescGZIP(), []int{0, 0}
}

func (x *Query_Limits) GetPreviewRows() int64 {
	if x != nil {
		return x.PreviewRows
	}
	return 0
}

type Query_RedisBulkResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The tensor shape to output values.
	//
	// Exactly one dimension's value must be zero - this dimension's
	// cardinality is determined by the number of output values. The
	// number of output values must be a multiple of the product of
	// the nonzero dimensions.
	//
	// Example:
	//    [0] - Column vector:           [1,2,3,4,5,6]
	//    [1, 0] - Single row vector:    [[1,2,3,4,5,6]]
	//    [2, 0] - tuple vectors:        [[1,2], [3,4], [5,6]]
	//    [0, 2] - two row vectors:      [[1,2,3], [4,5,6]]
	Shape []int32 `protobuf:"varint,1,rep,packed,name=shape,proto3" json:"shape,omitempty"`
}

func (x *Query_RedisBulkResponse) Reset() {
	*x = Query_RedisBulkResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kaskada_kaskada_v1alpha_query_service_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Query_RedisBulkResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Query_RedisBulkResponse) ProtoMessage() {}

func (x *Query_RedisBulkResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kaskada_kaskada_v1alpha_query_service_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Query_RedisBulkResponse.ProtoReflect.Descriptor instead.
func (*Query_RedisBulkResponse) Descriptor() ([]byte, []int) {
	return file_kaskada_kaskada_v1alpha_query_service_proto_rawDescGZIP(), []int{0, 1}
}

func (x *Query_RedisBulkResponse) GetShape() []int32 {
	if x != nil {
		return x.Shape
	}
	return nil
}

type Query_RedisAI struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The RedisAI database number to write to
	Db int32 `protobuf:"varint,1,opt,name=db,proto3" json:"db,omitempty"`
	// The RedisAI instance hostname
	Host string `protobuf:"bytes,2,opt,name=host,proto3" json:"host,omitempty"`
	// The RedisAI instance port
	Port int32 `protobuf:"varint,3,opt,name=port,proto3" json:"port,omitempty"`
}

func (x *Query_RedisAI) Reset() {
	*x = Query_RedisAI{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kaskada_kaskada_v1alpha_query_service_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Query_RedisAI) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Query_RedisAI) ProtoMessage() {}

func (x *Query_RedisAI) ProtoReflect() protoreflect.Message {
	mi := &file_kaskada_kaskada_v1alpha_query_service_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Query_RedisAI.ProtoReflect.Descriptor instead.
func (*Query_RedisAI) Descriptor() ([]byte, []int) {
	return file_kaskada_kaskada_v1alpha_query_service_proto_rawDescGZIP(), []int{0, 2}
}

func (x *Query_RedisAI) GetDb() int32 {
	if x != nil {
		return x.Db
	}
	return 0
}

func (x *Query_RedisAI) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *Query_RedisAI) GetPort() int32 {
	if x != nil {
		return x.Port
	}
	return 0
}

type Query_Pulsar struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tenant    string `protobuf:"bytes,1,opt,name=tenant,proto3" json:"tenant,omitempty"`
	Namespace string `protobuf:"bytes,2,opt,name=namespace,proto3" json:"namespace,omitempty"`
}

func (x *Query_Pulsar) Reset() {
	*x = Query_Pulsar{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kaskada_kaskada_v1alpha_query_service_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Query_Pulsar) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Query_Pulsar) ProtoMessage() {}

func (x *Query_Pulsar) ProtoReflect() protoreflect.Message {
	mi := &file_kaskada_kaskada_v1alpha_query_service_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Query_Pulsar.ProtoReflect.Descriptor instead.
func (*Query_Pulsar) Descriptor() ([]byte, []int) {
	return file_kaskada_kaskada_v1alpha_query_service_proto_rawDescGZIP(), []int{0, 3}
}

func (x *Query_Pulsar) GetTenant() string {
	if x != nil {
		return x.Tenant
	}
	return ""
}

func (x *Query_Pulsar) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

type CreateQueryResponse_Analysis struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The executable state of the query. If false,
	// check `fenl_diagnostics` for reasons
	CanExecute bool `protobuf:"varint,1,opt,name=can_execute,json=canExecute,proto3" json:"can_execute,omitempty"`
	// The schema of the query.  If this is empty, check
	// `fenl_diagnostics` for reasons.
	Schema *Schema `protobuf:"bytes,2,opt,name=schema,proto3" json:"schema,omitempty"`
}

func (x *CreateQueryResponse_Analysis) Reset() {
	*x = CreateQueryResponse_Analysis{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kaskada_kaskada_v1alpha_query_service_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateQueryResponse_Analysis) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateQueryResponse_Analysis) ProtoMessage() {}

func (x *CreateQueryResponse_Analysis) ProtoReflect() protoreflect.Message {
	mi := &file_kaskada_kaskada_v1alpha_query_service_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateQueryResponse_Analysis.ProtoReflect.Descriptor instead.
func (*CreateQueryResponse_Analysis) Descriptor() ([]byte, []int) {
	return file_kaskada_kaskada_v1alpha_query_service_proto_rawDescGZIP(), []int{3, 0}
}

func (x *CreateQueryResponse_Analysis) GetCanExecute() bool {
	if x != nil {
		return x.CanExecute
	}
	return false
}

func (x *CreateQueryResponse_Analysis) GetSchema() *Schema {
	if x != nil {
		return x.Schema
	}
	return nil
}

type CreateQueryResponse_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The data token the query was run against.  To enable repeatable
	// queries, pass this id on future requests
	DataTokenId string `protobuf:"bytes,1,opt,name=data_token_id,json=dataTokenId,proto3" json:"data_token_id,omitempty"`
	// How the input data was sliced for this query
	SliceRequest *SliceRequest `protobuf:"bytes,2,opt,name=slice_request,json=sliceRequest,proto3" json:"slice_request,omitempty"`
}

func (x *CreateQueryResponse_Config) Reset() {
	*x = CreateQueryResponse_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kaskada_kaskada_v1alpha_query_service_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateQueryResponse_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateQueryResponse_Config) ProtoMessage() {}

func (x *CreateQueryResponse_Config) ProtoReflect() protoreflect.Message {
	mi := &file_kaskada_kaskada_v1alpha_query_service_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateQueryResponse_Config.ProtoReflect.Descriptor instead.
func (*CreateQueryResponse_Config) Descriptor() ([]byte, []int) {
	return file_kaskada_kaskada_v1alpha_query_service_proto_rawDescGZIP(), []int{3, 1}
}

func (x *CreateQueryResponse_Config) GetDataTokenId() string {
	if x != nil {
		return x.DataTokenId
	}
	return ""
}

func (x *CreateQueryResponse_Config) GetSliceRequest() *SliceRequest {
	if x != nil {
		return x.SliceRequest
	}
	return nil
}

type CreateQueryResponse_Metrics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Time spent preparing input
	TimePreparing *durationpb.Duration `protobuf:"bytes,1,opt,name=time_preparing,json=timePreparing,proto3" json:"time_preparing,omitempty"`
	// Time spent computing results
	TimeComputing *durationpb.Duration `protobuf:"bytes,2,opt,name=time_computing,json=timeComputing,proto3" json:"time_computing,omitempty"`
	// The number of output files produced.
	OutputFiles int64 `protobuf:"varint,3,opt,name=output_files,json=outputFiles,proto3" json:"output_files,omitempty"`
	// Total input rows to be processed by this query.
	TotalInputRows int64 `protobuf:"varint,4,opt,name=total_input_rows,json=totalInputRows,proto3" json:"total_input_rows,omitempty"`
	// Number of input rows processed by this query.
	ProcessedInputRows int64 `protobuf:"varint,5,opt,name=processed_input_rows,json=processedInputRows,proto3" json:"processed_input_rows,omitempty"`
	// The number of output rows produced so far.
	ProducedOutputRows int64 `protobuf:"varint,6,opt,name=produced_output_rows,json=producedOutputRows,proto3" json:"produced_output_rows,omitempty"`
}

func (x *CreateQueryResponse_Metrics) Reset() {
	*x = CreateQueryResponse_Metrics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kaskada_kaskada_v1alpha_query_service_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateQueryResponse_Metrics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateQueryResponse_Metrics) ProtoMessage() {}

func (x *CreateQueryResponse_Metrics) ProtoReflect() protoreflect.Message {
	mi := &file_kaskada_kaskada_v1alpha_query_service_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateQueryResponse_Metrics.ProtoReflect.Descriptor instead.
func (*CreateQueryResponse_Metrics) Descriptor() ([]byte, []int) {
	return file_kaskada_kaskada_v1alpha_query_service_proto_rawDescGZIP(), []int{3, 2}
}

func (x *CreateQueryResponse_Metrics) GetTimePreparing() *durationpb.Duration {
	if x != nil {
		return x.TimePreparing
	}
	return nil
}

func (x *CreateQueryResponse_Metrics) GetTimeComputing() *durationpb.Duration {
	if x != nil {
		return x.TimeComputing
	}
	return nil
}

func (x *CreateQueryResponse_Metrics) GetOutputFiles() int64 {
	if x != nil {
		return x.OutputFiles
	}
	return 0
}

func (x *CreateQueryResponse_Metrics) GetTotalInputRows() int64 {
	if x != nil {
		return x.TotalInputRows
	}
	return 0
}

func (x *CreateQueryResponse_Metrics) GetProcessedInputRows() int64 {
	if x != nil {
		return x.ProcessedInputRows
	}
	return 0
}

func (x *CreateQueryResponse_Metrics) GetProducedOutputRows() int64 {
	if x != nil {
		return x.ProducedOutputRows
	}
	return 0
}

type CreateQueryResponse_RedisAI struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CreateQueryResponse_RedisAI) Reset() {
	*x = CreateQueryResponse_RedisAI{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kaskada_kaskada_v1alpha_query_service_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateQueryResponse_RedisAI) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateQueryResponse_RedisAI) ProtoMessage() {}

func (x *CreateQueryResponse_RedisAI) ProtoReflect() protoreflect.Message {
	mi := &file_kaskada_kaskada_v1alpha_query_service_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateQueryResponse_RedisAI.ProtoReflect.Descriptor instead.
func (*CreateQueryResponse_RedisAI) Descriptor() ([]byte, []int) {
	return file_kaskada_kaskada_v1alpha_query_service_proto_rawDescGZIP(), []int{3, 3}
}

type CreateQueryResponse_Pulsar struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The topic name.
	//
	// e.g. '{persistent|non-persistent}://tenant/namespace/topic'
	TopicUrl string `protobuf:"bytes,1,opt,name=topic_url,json=topicUrl,proto3" json:"topic_url,omitempty"`
}

func (x *CreateQueryResponse_Pulsar) Reset() {
	*x = CreateQueryResponse_Pulsar{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kaskada_kaskada_v1alpha_query_service_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateQueryResponse_Pulsar) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateQueryResponse_Pulsar) ProtoMessage() {}

func (x *CreateQueryResponse_Pulsar) ProtoReflect() protoreflect.Message {
	mi := &file_kaskada_kaskada_v1alpha_query_service_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateQueryResponse_Pulsar.ProtoReflect.Descriptor instead.
func (*CreateQueryResponse_Pulsar) Descriptor() ([]byte, []int) {
	return file_kaskada_kaskada_v1alpha_query_service_proto_rawDescGZIP(), []int{3, 4}
}

func (x *CreateQueryResponse_Pulsar) GetTopicUrl() string {
	if x != nil {
		return x.TopicUrl
	}
	return ""
}

var File_kaskada_kaskada_v1alpha_query_service_proto protoreflect.FileDescriptor

var file_kaskada_kaskada_v1alpha_query_service_proto_rawDesc = []byte{
	0x0a, 0x2b, 0x6b, 0x61, 0x73, 0x6b, 0x61, 0x64, 0x61, 0x2f, 0x6b, 0x61, 0x73, 0x6b, 0x61, 0x64,
	0x61, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x17, 0x6b,
	0x61, 0x73, 0x6b, 0x61, 0x64, 0x61, 0x2e, 0x6b, 0x61, 0x73, 0x6b, 0x61, 0x64, 0x61, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x62, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x24, 0x6b, 0x61, 0x73, 0x6b, 0x61, 0x64, 0x61, 0x2f,
	0x6b, 0x61, 0x73, 0x6b, 0x61, 0x64, 0x61, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2f,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2e, 0x6b, 0x61,
	0x73, 0x6b, 0x61, 0x64, 0x61, 0x2f, 0x6b, 0x61, 0x73, 0x6b, 0x61, 0x64, 0x61, 0x2f, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x2f, 0x66, 0x65, 0x6e, 0x6c, 0x5f, 0x64, 0x69, 0x61, 0x67, 0x6e,
	0x6f, 0x73, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x24, 0x6b, 0x61,
	0x73, 0x6b, 0x61, 0x64, 0x61, 0x2f, 0x6b, 0x61, 0x73, 0x6b, 0x61, 0x64, 0x61, 0x2f, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x2a, 0x6b, 0x61, 0x73, 0x6b, 0x61, 0x64, 0x61, 0x2f, 0x6b, 0x61, 0x73, 0x6b,
	0x61, 0x64, 0x61, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2f, 0x76, 0x69, 0x65, 0x77,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xed, 0x09, 0x0a, 0x05, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x12, 0x1e, 0x0a, 0x08, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x07, 0x71, 0x75, 0x65, 0x72, 0x79, 0x49,
	0x64, 0x12, 0x27, 0x0a, 0x0a, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0a,
	0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x3d, 0x0a, 0x08, 0x61, 0x73,
	0x5f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x18, 0x65, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6b,
	0x61, 0x73, 0x6b, 0x61, 0x64, 0x61, 0x2e, 0x6b, 0x61, 0x73, 0x6b, 0x61, 0x64, 0x61, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x41, 0x73, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x48, 0x00,
	0x52, 0x07, 0x61, 0x73, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x12, 0x44, 0x0a, 0x09, 0x72, 0x65, 0x64,
	0x69, 0x73, 0x5f, 0x61, 0x5f, 0x69, 0x18, 0x66, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x6b,
	0x61, 0x73, 0x6b, 0x61, 0x64, 0x61, 0x2e, 0x6b, 0x61, 0x73, 0x6b, 0x61, 0x64, 0x61, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x52, 0x65, 0x64,
	0x69, 0x73, 0x41, 0x49, 0x48, 0x00, 0x52, 0x07, 0x72, 0x65, 0x64, 0x69, 0x73, 0x41, 0x49, 0x12,
	0x3f, 0x0a, 0x06, 0x70, 0x75, 0x6c, 0x73, 0x61, 0x72, 0x18, 0x67, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x25, 0x2e, 0x6b, 0x61, 0x73, 0x6b, 0x61, 0x64, 0x61, 0x2e, 0x6b, 0x61, 0x73, 0x6b, 0x61, 0x64,
	0x61, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x2e,
	0x50, 0x75, 0x6c, 0x73, 0x61, 0x72, 0x48, 0x00, 0x52, 0x06, 0x70, 0x75, 0x6c, 0x73, 0x61, 0x72,
	0x12, 0x40, 0x0a, 0x0d, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x64, 0x61, 0x74, 0x61, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x49, 0x64, 0x12, 0x38, 0x0a, 0x05, 0x76, 0x69, 0x65, 0x77, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1d, 0x2e, 0x6b, 0x61, 0x73, 0x6b, 0x61, 0x64, 0x61, 0x2e, 0x6b, 0x61, 0x73, 0x6b,
	0x61, 0x64, 0x61, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x56, 0x69, 0x65, 0x77,
	0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x05, 0x76, 0x69, 0x65, 0x77, 0x73, 0x12, 0x56, 0x0a, 0x0f,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x62, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2d, 0x2e, 0x6b, 0x61, 0x73, 0x6b, 0x61, 0x64, 0x61, 0x2e,
	0x6b, 0x61, 0x73, 0x6b, 0x61, 0x64, 0x61, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x42, 0x65, 0x68, 0x61,
	0x76, 0x69, 0x6f, 0x72, 0x52, 0x0e, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x42, 0x65, 0x68, 0x61,
	0x76, 0x69, 0x6f, 0x72, 0x12, 0x3d, 0x0a, 0x06, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6b, 0x61, 0x73, 0x6b, 0x61, 0x64, 0x61, 0x2e, 0x6b,
	0x61, 0x73, 0x6b, 0x61, 0x64, 0x61, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x2e, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x52, 0x06, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x73, 0x12, 0x3b, 0x0a, 0x05, 0x73, 0x6c, 0x69, 0x63, 0x65, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6b, 0x61, 0x73, 0x6b, 0x61, 0x64, 0x61, 0x2e, 0x6b, 0x61, 0x73,
	0x6b, 0x61, 0x64, 0x61, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x53, 0x6c, 0x69,
	0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x05, 0x73, 0x6c, 0x69, 0x63, 0x65,
	0x12, 0x48, 0x0a, 0x12, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x5f, 0x73, 0x69, 0x6e, 0x63,
	0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x10, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x64, 0x53, 0x69, 0x6e, 0x63, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x46, 0x0a, 0x11, 0x66, 0x69,
	0x6e, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x0f, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x40, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x1a, 0x2b, 0x0a, 0x06, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x12, 0x21,
	0x0a, 0x0c, 0x70, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x72, 0x6f, 0x77, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x70, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x52, 0x6f, 0x77,
	0x73, 0x1a, 0x29, 0x0a, 0x11, 0x52, 0x65, 0x64, 0x69, 0x73, 0x42, 0x75, 0x6c, 0x6b, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x68, 0x61, 0x70, 0x65, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x05, 0x52, 0x05, 0x73, 0x68, 0x61, 0x70, 0x65, 0x1a, 0x62, 0x0a, 0x07,
	0x52, 0x65, 0x64, 0x69, 0x73, 0x41, 0x49, 0x12, 0x19, 0x0a, 0x02, 0x64, 0x62, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x42, 0x09, 0xfa, 0x42, 0x06, 0x1a, 0x04, 0x18, 0x0f, 0x28, 0x00, 0x52, 0x02,
	0x64, 0x62, 0x12, 0x1b, 0x0a, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x12,
	0x1f, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0b, 0xfa,
	0x42, 0x08, 0x1a, 0x06, 0x18, 0xff, 0xff, 0x03, 0x20, 0x00, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74,
	0x1a, 0x3e, 0x0a, 0x06, 0x50, 0x75, 0x6c, 0x73, 0x61, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x65,
	0x6e, 0x61, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x65, 0x6e, 0x61,
	0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x22, 0xa0, 0x01, 0x0a, 0x0e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x42, 0x65, 0x68, 0x61, 0x76,
	0x69, 0x6f, 0x72, 0x12, 0x1f, 0x0a, 0x1b, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f, 0x42, 0x45,
	0x48, 0x41, 0x56, 0x49, 0x4f, 0x52, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49,
	0x45, 0x44, 0x10, 0x00, 0x12, 0x1f, 0x0a, 0x1b, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f, 0x42,
	0x45, 0x48, 0x41, 0x56, 0x49, 0x4f, 0x52, 0x5f, 0x41, 0x4c, 0x4c, 0x5f, 0x52, 0x45, 0x53, 0x55,
	0x4c, 0x54, 0x53, 0x10, 0x01, 0x12, 0x21, 0x0a, 0x1d, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f,
	0x42, 0x45, 0x48, 0x41, 0x56, 0x49, 0x4f, 0x52, 0x5f, 0x46, 0x49, 0x4e, 0x41, 0x4c, 0x5f, 0x52,
	0x45, 0x53, 0x55, 0x4c, 0x54, 0x53, 0x10, 0x02, 0x12, 0x29, 0x0a, 0x25, 0x52, 0x45, 0x53, 0x55,
	0x4c, 0x54, 0x5f, 0x42, 0x45, 0x48, 0x41, 0x56, 0x49, 0x4f, 0x52, 0x5f, 0x46, 0x49, 0x4e, 0x41,
	0x4c, 0x5f, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x53, 0x5f, 0x41, 0x54, 0x5f, 0x54, 0x49, 0x4d,
	0x45, 0x10, 0x03, 0x42, 0x12, 0x0a, 0x0b, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f,
	0x61, 0x73, 0x12, 0x03, 0xf8, 0x42, 0x01, 0x22, 0xac, 0x01, 0x0a, 0x0c, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x64, 0x72, 0x79, 0x5f,
	0x72, 0x75, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x64, 0x72, 0x79, 0x52, 0x75,
	0x6e, 0x12, 0x33, 0x0a, 0x15, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x61,
	0x6c, 0x5f, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x14, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x46, 0x65,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d,
	0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12, 0x27, 0x0a,
	0x0f, 0x70, 0x72, 0x65, 0x73, 0x69, 0x67, 0x6e, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x70, 0x72, 0x65, 0x73, 0x69, 0x67, 0x6e, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x22, 0x96, 0x01, 0x0a, 0x12, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x34, 0x0a,
	0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6b,
	0x61, 0x73, 0x6b, 0x61, 0x64, 0x61, 0x2e, 0x6b, 0x61, 0x73, 0x6b, 0x61, 0x64, 0x61, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x05, 0x71, 0x75,
	0x65, 0x72, 0x79, 0x12, 0x4a, 0x0a, 0x0d, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x6f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6b, 0x61, 0x73,
	0x6b, 0x61, 0x64, 0x61, 0x2e, 0x6b, 0x61, 0x73, 0x6b, 0x61, 0x64, 0x61, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x52, 0x0c, 0x71, 0x75, 0x65, 0x72, 0x79, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22,
	0xe2, 0x0b, 0x0a, 0x13, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x48, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x32, 0x2e, 0x6b, 0x61, 0x73, 0x6b, 0x61, 0x64, 0x61,
	0x2e, 0x6b, 0x61, 0x73, 0x6b, 0x61, 0x64, 0x61, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x12, 0x4b, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x33, 0x2e, 0x6b, 0x61, 0x73, 0x6b, 0x61, 0x64, 0x61, 0x2e, 0x6b, 0x61, 0x73, 0x6b,
	0x61, 0x64, 0x61, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x51,
	0x0a, 0x08, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x35, 0x2e, 0x6b, 0x61, 0x73, 0x6b, 0x61, 0x64, 0x61, 0x2e, 0x6b, 0x61, 0x73, 0x6b, 0x61,
	0x64, 0x61, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x41,
	0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x52, 0x08, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69,
	0x73, 0x12, 0x53, 0x0a, 0x10, 0x66, 0x65, 0x6e, 0x6c, 0x5f, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f,
	0x73, 0x74, 0x69, 0x63, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x6b, 0x61,
	0x73, 0x6b, 0x61, 0x64, 0x61, 0x2e, 0x6b, 0x61, 0x73, 0x6b, 0x61, 0x64, 0x61, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x46, 0x65, 0x6e, 0x6c, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f,
	0x73, 0x74, 0x69, 0x63, 0x73, 0x52, 0x0f, 0x66, 0x65, 0x6e, 0x6c, 0x44, 0x69, 0x61, 0x67, 0x6e,
	0x6f, 0x73, 0x74, 0x69, 0x63, 0x73, 0x12, 0x4e, 0x0a, 0x07, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x6b, 0x61, 0x73, 0x6b, 0x61, 0x64,
	0x61, 0x2e, 0x6b, 0x61, 0x73, 0x6b, 0x61, 0x64, 0x61, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x07, 0x6d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12, 0x50, 0x0a, 0x0f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x27, 0x2e, 0x6b, 0x61, 0x73, 0x6b, 0x61, 0x64, 0x61, 0x2e, 0x6b, 0x61, 0x73, 0x6b, 0x61, 0x64,
	0x61, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x0e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x71, 0x75, 0x65, 0x72,
	0x79, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x71, 0x75, 0x65, 0x72,
	0x79, 0x49, 0x64, 0x12, 0x49, 0x0a, 0x0c, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x73, 0x18, 0x65, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6b, 0x61, 0x73, 0x6b,
	0x61, 0x64, 0x61, 0x2e, 0x6b, 0x61, 0x73, 0x6b, 0x61, 0x64, 0x61, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x48,
	0x00, 0x52, 0x0b, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x52,
	0x0a, 0x09, 0x72, 0x65, 0x64, 0x69, 0x73, 0x5f, 0x61, 0x5f, 0x69, 0x18, 0x66, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x34, 0x2e, 0x6b, 0x61, 0x73, 0x6b, 0x61, 0x64, 0x61, 0x2e, 0x6b, 0x61, 0x73, 0x6b,
	0x61, 0x64, 0x61, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e,
	0x52, 0x65, 0x64, 0x69, 0x73, 0x41, 0x49, 0x48, 0x00, 0x52, 0x07, 0x72, 0x65, 0x64, 0x69, 0x73,
	0x41, 0x49, 0x12, 0x4d, 0x0a, 0x06, 0x70, 0x75, 0x6c, 0x73, 0x61, 0x72, 0x18, 0x67, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x33, 0x2e, 0x6b, 0x61, 0x73, 0x6b, 0x61, 0x64, 0x61, 0x2e, 0x6b, 0x61, 0x73,
	0x6b, 0x61, 0x64, 0x61, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x2e, 0x50, 0x75, 0x6c, 0x73, 0x61, 0x72, 0x48, 0x00, 0x52, 0x06, 0x70, 0x75, 0x6c, 0x73, 0x61,
	0x72, 0x1a, 0x64, 0x0a, 0x08, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x12, 0x1f, 0x0a,
	0x0b, 0x63, 0x61, 0x6e, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0a, 0x63, 0x61, 0x6e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x12, 0x37,
	0x0a, 0x06, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f,
	0x2e, 0x6b, 0x61, 0x73, 0x6b, 0x61, 0x64, 0x61, 0x2e, 0x6b, 0x61, 0x73, 0x6b, 0x61, 0x64, 0x61,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x52,
	0x06, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x1a, 0x78, 0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x12, 0x22, 0x0a, 0x0d, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x61, 0x74, 0x61, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x49, 0x64, 0x12, 0x4a, 0x0a, 0x0d, 0x73, 0x6c, 0x69, 0x63, 0x65, 0x5f, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6b,
	0x61, 0x73, 0x6b, 0x61, 0x64, 0x61, 0x2e, 0x6b, 0x61, 0x73, 0x6b, 0x61, 0x64, 0x61, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x53, 0x6c, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x52, 0x0c, 0x73, 0x6c, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0xbe, 0x02, 0x0a, 0x07, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12, 0x40, 0x0a,
	0x0e, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x70, 0x72, 0x65, 0x70, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x0d, 0x74, 0x69, 0x6d, 0x65, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x12,
	0x40, 0x0a, 0x0e, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x69, 0x6e,
	0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x0d, 0x74, 0x69, 0x6d, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x69, 0x6e,
	0x67, 0x12, 0x21, 0x0a, 0x0c, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x66, 0x69, 0x6c, 0x65,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x46,
	0x69, 0x6c, 0x65, 0x73, 0x12, 0x28, 0x0a, 0x10, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x69, 0x6e,
	0x70, 0x75, 0x74, 0x5f, 0x72, 0x6f, 0x77, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x52, 0x6f, 0x77, 0x73, 0x12, 0x30,
	0x0a, 0x14, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x64, 0x5f, 0x69, 0x6e, 0x70, 0x75,
	0x74, 0x5f, 0x72, 0x6f, 0x77, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x70, 0x72,
	0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x64, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x52, 0x6f, 0x77, 0x73,
	0x12, 0x30, 0x0a, 0x14, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x64, 0x5f, 0x6f, 0x75, 0x74,
	0x70, 0x75, 0x74, 0x5f, 0x72, 0x6f, 0x77, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x64, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x52, 0x6f,
	0x77, 0x73, 0x1a, 0x09, 0x0a, 0x07, 0x52, 0x65, 0x64, 0x69, 0x73, 0x41, 0x49, 0x1a, 0x25, 0x0a,
	0x06, 0x50, 0x75, 0x6c, 0x73, 0x61, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x6f, 0x70, 0x69, 0x63,
	0x5f, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x6f, 0x70, 0x69,
	0x63, 0x55, 0x72, 0x6c, 0x22, 0x82, 0x01, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x15,
	0x0a, 0x11, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46,
	0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x41,
	0x4e, 0x41, 0x4c, 0x59, 0x53, 0x49, 0x53, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x53, 0x54, 0x41,
	0x54, 0x45, 0x5f, 0x50, 0x52, 0x45, 0x50, 0x41, 0x52, 0x49, 0x4e, 0x47, 0x10, 0x02, 0x12, 0x13,
	0x0a, 0x0f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x55, 0x54, 0x49, 0x4e,
	0x47, 0x10, 0x03, 0x12, 0x11, 0x0a, 0x0d, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x53, 0x55, 0x43,
	0x43, 0x45, 0x53, 0x53, 0x10, 0x04, 0x12, 0x11, 0x0a, 0x0d, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f,
	0x46, 0x41, 0x49, 0x4c, 0x55, 0x52, 0x45, 0x10, 0x05, 0x42, 0x09, 0x0a, 0x07, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x73, 0x22, 0x35, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x22, 0x0a, 0x08, 0x71, 0x75, 0x65, 0x72, 0x79,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02,
	0x10, 0x01, 0x52, 0x07, 0x71, 0x75, 0x65, 0x72, 0x79, 0x49, 0x64, 0x22, 0x4d, 0x0a, 0x10, 0x47,
	0x65, 0x74, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x39, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x6b, 0x61, 0x73, 0x6b, 0x61, 0x64, 0x61, 0x2e, 0x6b, 0x61, 0x73, 0x6b, 0x61, 0x64, 0x61,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x42, 0x03,
	0xe0, 0x41, 0x03, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x22, 0x74, 0x0a, 0x12, 0x4c, 0x69,
	0x73, 0x74, 0x51, 0x75, 0x65, 0x72, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x12, 0x27, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65,
	0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0a, 0xfa, 0x42, 0x07,
	0x1a, 0x05, 0x18, 0xe8, 0x07, 0x28, 0x00, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a,
	0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x22, 0xc9, 0x01, 0x0a, 0x13, 0x4c, 0x69, 0x73, 0x74, 0x51, 0x75, 0x65, 0x72, 0x69, 0x65, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x38, 0x0a, 0x07, 0x71, 0x75, 0x65, 0x72,
	0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6b, 0x61, 0x73, 0x6b,
	0x61, 0x64, 0x61, 0x2e, 0x6b, 0x61, 0x73, 0x6b, 0x61, 0x64, 0x61, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x07, 0x71, 0x75, 0x65, 0x72, 0x69,
	0x65, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x65, 0x78,
	0x74, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x50, 0x0a, 0x0f, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x6b, 0x61, 0x73, 0x6b, 0x61, 0x64, 0x61, 0x2e, 0x6b, 0x61,
	0x73, 0x6b, 0x61, 0x64, 0x61, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x0e, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x32, 0xaa, 0x03, 0x0a,
	0x0c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x8b, 0x01,
	0x0a, 0x0b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x2b, 0x2e,
	0x6b, 0x61, 0x73, 0x6b, 0x61, 0x64, 0x61, 0x2e, 0x6b, 0x61, 0x73, 0x6b, 0x61, 0x64, 0x61, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x6b, 0x61, 0x73,
	0x6b, 0x61, 0x64, 0x61, 0x2e, 0x6b, 0x61, 0x73, 0x6b, 0x61, 0x64, 0x61, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1f, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x19,
	0x3a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x22, 0x10, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x2f, 0x71, 0x75, 0x65, 0x72, 0x69, 0x65, 0x73, 0x30, 0x01, 0x12, 0x86, 0x01, 0x0a, 0x08,
	0x47, 0x65, 0x74, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x28, 0x2e, 0x6b, 0x61, 0x73, 0x6b, 0x61,
	0x64, 0x61, 0x2e, 0x6b, 0x61, 0x73, 0x6b, 0x61, 0x64, 0x61, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x2e, 0x47, 0x65, 0x74, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x29, 0x2e, 0x6b, 0x61, 0x73, 0x6b, 0x61, 0x64, 0x61, 0x2e, 0x6b, 0x61, 0x73,
	0x6b, 0x61, 0x64, 0x61, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x47, 0x65, 0x74,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x25, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x1f, 0x12, 0x1d, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2f,
	0x71, 0x75, 0x65, 0x72, 0x69, 0x65, 0x73, 0x2f, 0x7b, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x69,
	0x64, 0x3d, 0x2a, 0x7d, 0x12, 0x82, 0x01, 0x0a, 0x0b, 0x4c, 0x69, 0x73, 0x74, 0x51, 0x75, 0x65,
	0x72, 0x69, 0x65, 0x73, 0x12, 0x2b, 0x2e, 0x6b, 0x61, 0x73, 0x6b, 0x61, 0x64, 0x61, 0x2e, 0x6b,
	0x61, 0x73, 0x6b, 0x61, 0x64, 0x61, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x51, 0x75, 0x65, 0x72, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x2c, 0x2e, 0x6b, 0x61, 0x73, 0x6b, 0x61, 0x64, 0x61, 0x2e, 0x6b, 0x61, 0x73, 0x6b,
	0x61, 0x64, 0x61, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x51, 0x75, 0x65, 0x72, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x18, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x12, 0x12, 0x10, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x2f, 0x71, 0x75, 0x65, 0x72, 0x69, 0x65, 0x73, 0x42, 0xfd, 0x01, 0x0a, 0x1b, 0x63, 0x6f,
	0x6d, 0x2e, 0x6b, 0x61, 0x73, 0x6b, 0x61, 0x64, 0x61, 0x2e, 0x6b, 0x61, 0x73, 0x6b, 0x61, 0x64,
	0x61, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x42, 0x11, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x4d,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6b, 0x61, 0x73, 0x6b, 0x61,
	0x64, 0x61, 0x2f, 0x6b, 0x61, 0x73, 0x6b, 0x61, 0x64, 0x61, 0x2d, 0x61, 0x69, 0x2f, 0x77, 0x72,
	0x65, 0x6e, 0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x6b, 0x61, 0x73, 0x6b, 0x61, 0x64, 0x61, 0x2f, 0x6b,
	0x61, 0x73, 0x6b, 0x61, 0x64, 0x61, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x3b, 0x6b,
	0x61, 0x73, 0x6b, 0x61, 0x64, 0x61, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0xa2, 0x02, 0x03,
	0x4b, 0x4b, 0x58, 0xaa, 0x02, 0x17, 0x4b, 0x61, 0x73, 0x6b, 0x61, 0x64, 0x61, 0x2e, 0x4b, 0x61,
	0x73, 0x6b, 0x61, 0x64, 0x61, 0x2e, 0x56, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0xca, 0x02, 0x17,
	0x4b, 0x61, 0x73, 0x6b, 0x61, 0x64, 0x61, 0x5c, 0x4b, 0x61, 0x73, 0x6b, 0x61, 0x64, 0x61, 0x5c,
	0x56, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0xe2, 0x02, 0x23, 0x4b, 0x61, 0x73, 0x6b, 0x61, 0x64,
	0x61, 0x5c, 0x4b, 0x61, 0x73, 0x6b, 0x61, 0x64, 0x61, 0x5c, 0x56, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x19,
	0x4b, 0x61, 0x73, 0x6b, 0x61, 0x64, 0x61, 0x3a, 0x3a, 0x4b, 0x61, 0x73, 0x6b, 0x61, 0x64, 0x61,
	0x3a, 0x3a, 0x56, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_kaskada_kaskada_v1alpha_query_service_proto_rawDescOnce sync.Once
	file_kaskada_kaskada_v1alpha_query_service_proto_rawDescData = file_kaskada_kaskada_v1alpha_query_service_proto_rawDesc
)

func file_kaskada_kaskada_v1alpha_query_service_proto_rawDescGZIP() []byte {
	file_kaskada_kaskada_v1alpha_query_service_proto_rawDescOnce.Do(func() {
		file_kaskada_kaskada_v1alpha_query_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_kaskada_kaskada_v1alpha_query_service_proto_rawDescData)
	})
	return file_kaskada_kaskada_v1alpha_query_service_proto_rawDescData
}

var file_kaskada_kaskada_v1alpha_query_service_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_kaskada_kaskada_v1alpha_query_service_proto_msgTypes = make([]protoimpl.MessageInfo, 17)
var file_kaskada_kaskada_v1alpha_query_service_proto_goTypes = []interface{}{
	(Query_ResultBehavior)(0),            // 0: kaskada.kaskada.v1alpha.Query.ResultBehavior
	(CreateQueryResponse_State)(0),       // 1: kaskada.kaskada.v1alpha.CreateQueryResponse.State
	(*Query)(nil),                        // 2: kaskada.kaskada.v1alpha.Query
	(*QueryOptions)(nil),                 // 3: kaskada.kaskada.v1alpha.QueryOptions
	(*CreateQueryRequest)(nil),           // 4: kaskada.kaskada.v1alpha.CreateQueryRequest
	(*CreateQueryResponse)(nil),          // 5: kaskada.kaskada.v1alpha.CreateQueryResponse
	(*GetQueryRequest)(nil),              // 6: kaskada.kaskada.v1alpha.GetQueryRequest
	(*GetQueryResponse)(nil),             // 7: kaskada.kaskada.v1alpha.GetQueryResponse
	(*ListQueriesRequest)(nil),           // 8: kaskada.kaskada.v1alpha.ListQueriesRequest
	(*ListQueriesResponse)(nil),          // 9: kaskada.kaskada.v1alpha.ListQueriesResponse
	(*Query_Limits)(nil),                 // 10: kaskada.kaskada.v1alpha.Query.Limits
	(*Query_RedisBulkResponse)(nil),      // 11: kaskada.kaskada.v1alpha.Query.RedisBulkResponse
	(*Query_RedisAI)(nil),                // 12: kaskada.kaskada.v1alpha.Query.RedisAI
	(*Query_Pulsar)(nil),                 // 13: kaskada.kaskada.v1alpha.Query.Pulsar
	(*CreateQueryResponse_Analysis)(nil), // 14: kaskada.kaskada.v1alpha.CreateQueryResponse.Analysis
	(*CreateQueryResponse_Config)(nil),   // 15: kaskada.kaskada.v1alpha.CreateQueryResponse.Config
	(*CreateQueryResponse_Metrics)(nil),  // 16: kaskada.kaskada.v1alpha.CreateQueryResponse.Metrics
	(*CreateQueryResponse_RedisAI)(nil),  // 17: kaskada.kaskada.v1alpha.CreateQueryResponse.RedisAI
	(*CreateQueryResponse_Pulsar)(nil),   // 18: kaskada.kaskada.v1alpha.CreateQueryResponse.Pulsar
	(*AsFiles)(nil),                      // 19: kaskada.kaskada.v1alpha.AsFiles
	(*wrapperspb.StringValue)(nil),       // 20: google.protobuf.StringValue
	(*View)(nil),                         // 21: kaskada.kaskada.v1alpha.View
	(*SliceRequest)(nil),                 // 22: kaskada.kaskada.v1alpha.SliceRequest
	(*timestamppb.Timestamp)(nil),        // 23: google.protobuf.Timestamp
	(*FenlDiagnostics)(nil),              // 24: kaskada.kaskada.v1alpha.FenlDiagnostics
	(*RequestDetails)(nil),               // 25: kaskada.kaskada.v1alpha.RequestDetails
	(*FileResults)(nil),                  // 26: kaskada.kaskada.v1alpha.FileResults
	(*Schema)(nil),                       // 27: kaskada.kaskada.v1alpha.Schema
	(*durationpb.Duration)(nil),          // 28: google.protobuf.Duration
}
var file_kaskada_kaskada_v1alpha_query_service_proto_depIdxs = []int32{
	19, // 0: kaskada.kaskada.v1alpha.Query.as_files:type_name -> kaskada.kaskada.v1alpha.AsFiles
	12, // 1: kaskada.kaskada.v1alpha.Query.redis_a_i:type_name -> kaskada.kaskada.v1alpha.Query.RedisAI
	13, // 2: kaskada.kaskada.v1alpha.Query.pulsar:type_name -> kaskada.kaskada.v1alpha.Query.Pulsar
	20, // 3: kaskada.kaskada.v1alpha.Query.data_token_id:type_name -> google.protobuf.StringValue
	21, // 4: kaskada.kaskada.v1alpha.Query.views:type_name -> kaskada.kaskada.v1alpha.View
	0,  // 5: kaskada.kaskada.v1alpha.Query.result_behavior:type_name -> kaskada.kaskada.v1alpha.Query.ResultBehavior
	10, // 6: kaskada.kaskada.v1alpha.Query.limits:type_name -> kaskada.kaskada.v1alpha.Query.Limits
	22, // 7: kaskada.kaskada.v1alpha.Query.slice:type_name -> kaskada.kaskada.v1alpha.SliceRequest
	23, // 8: kaskada.kaskada.v1alpha.Query.changed_since_time:type_name -> google.protobuf.Timestamp
	23, // 9: kaskada.kaskada.v1alpha.Query.final_result_time:type_name -> google.protobuf.Timestamp
	23, // 10: kaskada.kaskada.v1alpha.Query.create_time:type_name -> google.protobuf.Timestamp
	2,  // 11: kaskada.kaskada.v1alpha.CreateQueryRequest.query:type_name -> kaskada.kaskada.v1alpha.Query
	3,  // 12: kaskada.kaskada.v1alpha.CreateQueryRequest.query_options:type_name -> kaskada.kaskada.v1alpha.QueryOptions
	1,  // 13: kaskada.kaskada.v1alpha.CreateQueryResponse.state:type_name -> kaskada.kaskada.v1alpha.CreateQueryResponse.State
	15, // 14: kaskada.kaskada.v1alpha.CreateQueryResponse.config:type_name -> kaskada.kaskada.v1alpha.CreateQueryResponse.Config
	14, // 15: kaskada.kaskada.v1alpha.CreateQueryResponse.analysis:type_name -> kaskada.kaskada.v1alpha.CreateQueryResponse.Analysis
	24, // 16: kaskada.kaskada.v1alpha.CreateQueryResponse.fenl_diagnostics:type_name -> kaskada.kaskada.v1alpha.FenlDiagnostics
	16, // 17: kaskada.kaskada.v1alpha.CreateQueryResponse.metrics:type_name -> kaskada.kaskada.v1alpha.CreateQueryResponse.Metrics
	25, // 18: kaskada.kaskada.v1alpha.CreateQueryResponse.request_details:type_name -> kaskada.kaskada.v1alpha.RequestDetails
	26, // 19: kaskada.kaskada.v1alpha.CreateQueryResponse.file_results:type_name -> kaskada.kaskada.v1alpha.FileResults
	17, // 20: kaskada.kaskada.v1alpha.CreateQueryResponse.redis_a_i:type_name -> kaskada.kaskada.v1alpha.CreateQueryResponse.RedisAI
	18, // 21: kaskada.kaskada.v1alpha.CreateQueryResponse.pulsar:type_name -> kaskada.kaskada.v1alpha.CreateQueryResponse.Pulsar
	2,  // 22: kaskada.kaskada.v1alpha.GetQueryResponse.query:type_name -> kaskada.kaskada.v1alpha.Query
	2,  // 23: kaskada.kaskada.v1alpha.ListQueriesResponse.queries:type_name -> kaskada.kaskada.v1alpha.Query
	25, // 24: kaskada.kaskada.v1alpha.ListQueriesResponse.request_details:type_name -> kaskada.kaskada.v1alpha.RequestDetails
	27, // 25: kaskada.kaskada.v1alpha.CreateQueryResponse.Analysis.schema:type_name -> kaskada.kaskada.v1alpha.Schema
	22, // 26: kaskada.kaskada.v1alpha.CreateQueryResponse.Config.slice_request:type_name -> kaskada.kaskada.v1alpha.SliceRequest
	28, // 27: kaskada.kaskada.v1alpha.CreateQueryResponse.Metrics.time_preparing:type_name -> google.protobuf.Duration
	28, // 28: kaskada.kaskada.v1alpha.CreateQueryResponse.Metrics.time_computing:type_name -> google.protobuf.Duration
	4,  // 29: kaskada.kaskada.v1alpha.QueryService.CreateQuery:input_type -> kaskada.kaskada.v1alpha.CreateQueryRequest
	6,  // 30: kaskada.kaskada.v1alpha.QueryService.GetQuery:input_type -> kaskada.kaskada.v1alpha.GetQueryRequest
	8,  // 31: kaskada.kaskada.v1alpha.QueryService.ListQueries:input_type -> kaskada.kaskada.v1alpha.ListQueriesRequest
	5,  // 32: kaskada.kaskada.v1alpha.QueryService.CreateQuery:output_type -> kaskada.kaskada.v1alpha.CreateQueryResponse
	7,  // 33: kaskada.kaskada.v1alpha.QueryService.GetQuery:output_type -> kaskada.kaskada.v1alpha.GetQueryResponse
	9,  // 34: kaskada.kaskada.v1alpha.QueryService.ListQueries:output_type -> kaskada.kaskada.v1alpha.ListQueriesResponse
	32, // [32:35] is the sub-list for method output_type
	29, // [29:32] is the sub-list for method input_type
	29, // [29:29] is the sub-list for extension type_name
	29, // [29:29] is the sub-list for extension extendee
	0,  // [0:29] is the sub-list for field type_name
}

func init() { file_kaskada_kaskada_v1alpha_query_service_proto_init() }
func file_kaskada_kaskada_v1alpha_query_service_proto_init() {
	if File_kaskada_kaskada_v1alpha_query_service_proto != nil {
		return
	}
	file_kaskada_kaskada_v1alpha_common_proto_init()
	file_kaskada_kaskada_v1alpha_fenl_diagnostics_proto_init()
	file_kaskada_kaskada_v1alpha_schema_proto_init()
	file_kaskada_kaskada_v1alpha_view_service_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_kaskada_kaskada_v1alpha_query_service_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Query); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kaskada_kaskada_v1alpha_query_service_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kaskada_kaskada_v1alpha_query_service_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateQueryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kaskada_kaskada_v1alpha_query_service_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateQueryResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kaskada_kaskada_v1alpha_query_service_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetQueryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kaskada_kaskada_v1alpha_query_service_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetQueryResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kaskada_kaskada_v1alpha_query_service_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListQueriesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kaskada_kaskada_v1alpha_query_service_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListQueriesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kaskada_kaskada_v1alpha_query_service_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Query_Limits); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kaskada_kaskada_v1alpha_query_service_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Query_RedisBulkResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kaskada_kaskada_v1alpha_query_service_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Query_RedisAI); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kaskada_kaskada_v1alpha_query_service_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Query_Pulsar); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kaskada_kaskada_v1alpha_query_service_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateQueryResponse_Analysis); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kaskada_kaskada_v1alpha_query_service_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateQueryResponse_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kaskada_kaskada_v1alpha_query_service_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateQueryResponse_Metrics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kaskada_kaskada_v1alpha_query_service_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateQueryResponse_RedisAI); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kaskada_kaskada_v1alpha_query_service_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateQueryResponse_Pulsar); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_kaskada_kaskada_v1alpha_query_service_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*Query_AsFiles)(nil),
		(*Query_RedisAI_)(nil),
		(*Query_Pulsar_)(nil),
	}
	file_kaskada_kaskada_v1alpha_query_service_proto_msgTypes[3].OneofWrappers = []interface{}{
		(*CreateQueryResponse_FileResults)(nil),
		(*CreateQueryResponse_RedisAI_)(nil),
		(*CreateQueryResponse_Pulsar_)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_kaskada_kaskada_v1alpha_query_service_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   17,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_kaskada_kaskada_v1alpha_query_service_proto_goTypes,
		DependencyIndexes: file_kaskada_kaskada_v1alpha_query_service_proto_depIdxs,
		EnumInfos:         file_kaskada_kaskada_v1alpha_query_service_proto_enumTypes,
		MessageInfos:      file_kaskada_kaskada_v1alpha_query_service_proto_msgTypes,
	}.Build()
	File_kaskada_kaskada_v1alpha_query_service_proto = out.File
	file_kaskada_kaskada_v1alpha_query_service_proto_rawDesc = nil
	file_kaskada_kaskada_v1alpha_query_service_proto_goTypes = nil
	file_kaskada_kaskada_v1alpha_query_service_proto_depIdxs = nil
}
