// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: kaskada/kaskada/v1alpha/table_service.proto

package kaskadav1alpha

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on Table with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Table) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Table with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in TableMultiError, or nil if none found.
func (m *Table) ValidateAll() error {
	return m.validate(true)
}

func (m *Table) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TableId

	if utf8.RuneCountInString(m.GetTableName()) < 1 {
		err := TableValidationError{
			field:  "TableName",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetTimeColumnName()) < 1 {
		err := TableValidationError{
			field:  "TimeColumnName",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetEntityKeyColumnName()) < 1 {
		err := TableValidationError{
			field:  "EntityKeyColumnName",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if wrapper := m.GetSubsortColumnName(); wrapper != nil {

		if utf8.RuneCountInString(wrapper.GetValue()) < 1 {
			err := TableValidationError{
				field:  "SubsortColumnName",
				reason: "value length must be at least 1 runes",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	// no validation rules for GroupingId

	if all {
		switch v := interface{}(m.GetCreateTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, TableValidationError{
					field:  "CreateTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, TableValidationError{
					field:  "CreateTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreateTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TableValidationError{
				field:  "CreateTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdateTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, TableValidationError{
					field:  "UpdateTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, TableValidationError{
					field:  "UpdateTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdateTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TableValidationError{
				field:  "UpdateTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Version

	if all {
		switch v := interface{}(m.GetSchema()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, TableValidationError{
					field:  "Schema",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, TableValidationError{
					field:  "Schema",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSchema()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TableValidationError{
				field:  "Schema",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for FileCount

	if all {
		switch v := interface{}(m.GetTableSource()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, TableValidationError{
					field:  "TableSource",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, TableValidationError{
					field:  "TableSource",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTableSource()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TableValidationError{
				field:  "TableSource",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return TableMultiError(errors)
	}

	return nil
}

// TableMultiError is an error wrapping multiple validation errors returned by
// Table.ValidateAll() if the designated constraints aren't met.
type TableMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TableMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TableMultiError) AllErrors() []error { return m }

// TableValidationError is the validation error returned by Table.Validate if
// the designated constraints aren't met.
type TableValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TableValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TableValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TableValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TableValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TableValidationError) ErrorName() string { return "TableValidationError" }

// Error satisfies the builtin error interface
func (e TableValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTable.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TableValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TableValidationError{}

// Validate checks the field values on ListTablesRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListTablesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListTablesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListTablesRequestMultiError, or nil if none found.
func (m *ListTablesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListTablesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Search

	if val := m.GetPageSize(); val < 0 || val > 1000 {
		err := ListTablesRequestValidationError{
			field:  "PageSize",
			reason: "value must be inside range [0, 1000]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for PageToken

	if len(errors) > 0 {
		return ListTablesRequestMultiError(errors)
	}

	return nil
}

// ListTablesRequestMultiError is an error wrapping multiple validation errors
// returned by ListTablesRequest.ValidateAll() if the designated constraints
// aren't met.
type ListTablesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListTablesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListTablesRequestMultiError) AllErrors() []error { return m }

// ListTablesRequestValidationError is the validation error returned by
// ListTablesRequest.Validate if the designated constraints aren't met.
type ListTablesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListTablesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListTablesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListTablesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListTablesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListTablesRequestValidationError) ErrorName() string {
	return "ListTablesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListTablesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListTablesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListTablesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListTablesRequestValidationError{}

// Validate checks the field values on ListTablesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListTablesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListTablesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListTablesResponseMultiError, or nil if none found.
func (m *ListTablesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListTablesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetTables() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListTablesResponseValidationError{
						field:  fmt.Sprintf("Tables[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListTablesResponseValidationError{
						field:  fmt.Sprintf("Tables[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListTablesResponseValidationError{
					field:  fmt.Sprintf("Tables[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for NextPageToken

	if all {
		switch v := interface{}(m.GetRequestDetails()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListTablesResponseValidationError{
					field:  "RequestDetails",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListTablesResponseValidationError{
					field:  "RequestDetails",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRequestDetails()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListTablesResponseValidationError{
				field:  "RequestDetails",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ListTablesResponseMultiError(errors)
	}

	return nil
}

// ListTablesResponseMultiError is an error wrapping multiple validation errors
// returned by ListTablesResponse.ValidateAll() if the designated constraints
// aren't met.
type ListTablesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListTablesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListTablesResponseMultiError) AllErrors() []error { return m }

// ListTablesResponseValidationError is the validation error returned by
// ListTablesResponse.Validate if the designated constraints aren't met.
type ListTablesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListTablesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListTablesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListTablesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListTablesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListTablesResponseValidationError) ErrorName() string {
	return "ListTablesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListTablesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListTablesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListTablesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListTablesResponseValidationError{}

// Validate checks the field values on GetTableRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetTableRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetTableRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetTableRequestMultiError, or nil if none found.
func (m *GetTableRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetTableRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetTableName()) < 1 {
		err := GetTableRequestValidationError{
			field:  "TableName",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetTableRequestMultiError(errors)
	}

	return nil
}

// GetTableRequestMultiError is an error wrapping multiple validation errors
// returned by GetTableRequest.ValidateAll() if the designated constraints
// aren't met.
type GetTableRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetTableRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetTableRequestMultiError) AllErrors() []error { return m }

// GetTableRequestValidationError is the validation error returned by
// GetTableRequest.Validate if the designated constraints aren't met.
type GetTableRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetTableRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetTableRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetTableRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetTableRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetTableRequestValidationError) ErrorName() string { return "GetTableRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetTableRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetTableRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetTableRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetTableRequestValidationError{}

// Validate checks the field values on GetTableResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetTableResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetTableResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetTableResponseMultiError, or nil if none found.
func (m *GetTableResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetTableResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetTable()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetTableResponseValidationError{
					field:  "Table",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetTableResponseValidationError{
					field:  "Table",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTable()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetTableResponseValidationError{
				field:  "Table",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetRequestDetails()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetTableResponseValidationError{
					field:  "RequestDetails",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetTableResponseValidationError{
					field:  "RequestDetails",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRequestDetails()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetTableResponseValidationError{
				field:  "RequestDetails",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetTableResponseMultiError(errors)
	}

	return nil
}

// GetTableResponseMultiError is an error wrapping multiple validation errors
// returned by GetTableResponse.ValidateAll() if the designated constraints
// aren't met.
type GetTableResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetTableResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetTableResponseMultiError) AllErrors() []error { return m }

// GetTableResponseValidationError is the validation error returned by
// GetTableResponse.Validate if the designated constraints aren't met.
type GetTableResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetTableResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetTableResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetTableResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetTableResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetTableResponseValidationError) ErrorName() string { return "GetTableResponseValidationError" }

// Error satisfies the builtin error interface
func (e GetTableResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetTableResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetTableResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetTableResponseValidationError{}

// Validate checks the field values on CreateTableRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateTableRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateTableRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateTableRequestMultiError, or nil if none found.
func (m *CreateTableRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateTableRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetTable() == nil {
		err := CreateTableRequestValidationError{
			field:  "Table",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetTable()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateTableRequestValidationError{
					field:  "Table",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateTableRequestValidationError{
					field:  "Table",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTable()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateTableRequestValidationError{
				field:  "Table",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateTableRequestMultiError(errors)
	}

	return nil
}

// CreateTableRequestMultiError is an error wrapping multiple validation errors
// returned by CreateTableRequest.ValidateAll() if the designated constraints
// aren't met.
type CreateTableRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateTableRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateTableRequestMultiError) AllErrors() []error { return m }

// CreateTableRequestValidationError is the validation error returned by
// CreateTableRequest.Validate if the designated constraints aren't met.
type CreateTableRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateTableRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateTableRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateTableRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateTableRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateTableRequestValidationError) ErrorName() string {
	return "CreateTableRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateTableRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateTableRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateTableRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateTableRequestValidationError{}

// Validate checks the field values on CreateTableResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateTableResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateTableResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateTableResponseMultiError, or nil if none found.
func (m *CreateTableResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateTableResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetTable()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateTableResponseValidationError{
					field:  "Table",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateTableResponseValidationError{
					field:  "Table",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTable()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateTableResponseValidationError{
				field:  "Table",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetRequestDetails()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateTableResponseValidationError{
					field:  "RequestDetails",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateTableResponseValidationError{
					field:  "RequestDetails",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRequestDetails()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateTableResponseValidationError{
				field:  "RequestDetails",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateTableResponseMultiError(errors)
	}

	return nil
}

// CreateTableResponseMultiError is an error wrapping multiple validation
// errors returned by CreateTableResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateTableResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateTableResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateTableResponseMultiError) AllErrors() []error { return m }

// CreateTableResponseValidationError is the validation error returned by
// CreateTableResponse.Validate if the designated constraints aren't met.
type CreateTableResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateTableResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateTableResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateTableResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateTableResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateTableResponseValidationError) ErrorName() string {
	return "CreateTableResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateTableResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateTableResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateTableResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateTableResponseValidationError{}

// Validate checks the field values on DeleteTableRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteTableRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteTableRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteTableRequestMultiError, or nil if none found.
func (m *DeleteTableRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteTableRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetTableName()) < 1 {
		err := DeleteTableRequestValidationError{
			field:  "TableName",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Force

	if len(errors) > 0 {
		return DeleteTableRequestMultiError(errors)
	}

	return nil
}

// DeleteTableRequestMultiError is an error wrapping multiple validation errors
// returned by DeleteTableRequest.ValidateAll() if the designated constraints
// aren't met.
type DeleteTableRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteTableRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteTableRequestMultiError) AllErrors() []error { return m }

// DeleteTableRequestValidationError is the validation error returned by
// DeleteTableRequest.Validate if the designated constraints aren't met.
type DeleteTableRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteTableRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteTableRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteTableRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteTableRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteTableRequestValidationError) ErrorName() string {
	return "DeleteTableRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteTableRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteTableRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteTableRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteTableRequestValidationError{}

// Validate checks the field values on DeleteTableResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteTableResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteTableResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteTableResponseMultiError, or nil if none found.
func (m *DeleteTableResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteTableResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for DataTokenId

	if all {
		switch v := interface{}(m.GetRequestDetails()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DeleteTableResponseValidationError{
					field:  "RequestDetails",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DeleteTableResponseValidationError{
					field:  "RequestDetails",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRequestDetails()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DeleteTableResponseValidationError{
				field:  "RequestDetails",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return DeleteTableResponseMultiError(errors)
	}

	return nil
}

// DeleteTableResponseMultiError is an error wrapping multiple validation
// errors returned by DeleteTableResponse.ValidateAll() if the designated
// constraints aren't met.
type DeleteTableResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteTableResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteTableResponseMultiError) AllErrors() []error { return m }

// DeleteTableResponseValidationError is the validation error returned by
// DeleteTableResponse.Validate if the designated constraints aren't met.
type DeleteTableResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteTableResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteTableResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteTableResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteTableResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteTableResponseValidationError) ErrorName() string {
	return "DeleteTableResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteTableResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteTableResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteTableResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteTableResponseValidationError{}

// Validate checks the field values on LoadDataRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *LoadDataRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LoadDataRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// LoadDataRequestMultiError, or nil if none found.
func (m *LoadDataRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *LoadDataRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetTableName()) < 1 {
		err := LoadDataRequestValidationError{
			field:  "TableName",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	switch m.SourceData.(type) {

	case *LoadDataRequest_FileInput:

		if all {
			switch v := interface{}(m.GetFileInput()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, LoadDataRequestValidationError{
						field:  "FileInput",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, LoadDataRequestValidationError{
						field:  "FileInput",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetFileInput()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return LoadDataRequestValidationError{
					field:  "FileInput",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		err := LoadDataRequestValidationError{
			field:  "SourceData",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)

	}

	if len(errors) > 0 {
		return LoadDataRequestMultiError(errors)
	}

	return nil
}

// LoadDataRequestMultiError is an error wrapping multiple validation errors
// returned by LoadDataRequest.ValidateAll() if the designated constraints
// aren't met.
type LoadDataRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LoadDataRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LoadDataRequestMultiError) AllErrors() []error { return m }

// LoadDataRequestValidationError is the validation error returned by
// LoadDataRequest.Validate if the designated constraints aren't met.
type LoadDataRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LoadDataRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LoadDataRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LoadDataRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LoadDataRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LoadDataRequestValidationError) ErrorName() string { return "LoadDataRequestValidationError" }

// Error satisfies the builtin error interface
func (e LoadDataRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLoadDataRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LoadDataRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LoadDataRequestValidationError{}

// Validate checks the field values on LoadDataResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *LoadDataResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LoadDataResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// LoadDataResponseMultiError, or nil if none found.
func (m *LoadDataResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *LoadDataResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for DataTokenId

	if all {
		switch v := interface{}(m.GetRequestDetails()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, LoadDataResponseValidationError{
					field:  "RequestDetails",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, LoadDataResponseValidationError{
					field:  "RequestDetails",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRequestDetails()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return LoadDataResponseValidationError{
				field:  "RequestDetails",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return LoadDataResponseMultiError(errors)
	}

	return nil
}

// LoadDataResponseMultiError is an error wrapping multiple validation errors
// returned by LoadDataResponse.ValidateAll() if the designated constraints
// aren't met.
type LoadDataResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LoadDataResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LoadDataResponseMultiError) AllErrors() []error { return m }

// LoadDataResponseValidationError is the validation error returned by
// LoadDataResponse.Validate if the designated constraints aren't met.
type LoadDataResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LoadDataResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LoadDataResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LoadDataResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LoadDataResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LoadDataResponseValidationError) ErrorName() string { return "LoadDataResponseValidationError" }

// Error satisfies the builtin error interface
func (e LoadDataResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLoadDataResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LoadDataResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LoadDataResponseValidationError{}

// Validate checks the field values on Table_TableSource with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *Table_TableSource) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Table_TableSource with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// Table_TableSourceMultiError, or nil if none found.
func (m *Table_TableSource) ValidateAll() error {
	return m.validate(true)
}

func (m *Table_TableSource) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	switch m.Source.(type) {

	case *Table_TableSource_Kaskada:

		if all {
			switch v := interface{}(m.GetKaskada()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, Table_TableSourceValidationError{
						field:  "Kaskada",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, Table_TableSourceValidationError{
						field:  "Kaskada",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetKaskada()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return Table_TableSourceValidationError{
					field:  "Kaskada",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return Table_TableSourceMultiError(errors)
	}

	return nil
}

// Table_TableSourceMultiError is an error wrapping multiple validation errors
// returned by Table_TableSource.ValidateAll() if the designated constraints
// aren't met.
type Table_TableSourceMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Table_TableSourceMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Table_TableSourceMultiError) AllErrors() []error { return m }

// Table_TableSourceValidationError is the validation error returned by
// Table_TableSource.Validate if the designated constraints aren't met.
type Table_TableSourceValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Table_TableSourceValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Table_TableSourceValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Table_TableSourceValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Table_TableSourceValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Table_TableSourceValidationError) ErrorName() string {
	return "Table_TableSourceValidationError"
}

// Error satisfies the builtin error interface
func (e Table_TableSourceValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTable_TableSource.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Table_TableSourceValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Table_TableSourceValidationError{}

// Validate checks the field values on Table_KaskadaSource with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *Table_KaskadaSource) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Table_KaskadaSource with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// Table_KaskadaSourceMultiError, or nil if none found.
func (m *Table_KaskadaSource) ValidateAll() error {
	return m.validate(true)
}

func (m *Table_KaskadaSource) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return Table_KaskadaSourceMultiError(errors)
	}

	return nil
}

// Table_KaskadaSourceMultiError is an error wrapping multiple validation
// errors returned by Table_KaskadaSource.ValidateAll() if the designated
// constraints aren't met.
type Table_KaskadaSourceMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Table_KaskadaSourceMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Table_KaskadaSourceMultiError) AllErrors() []error { return m }

// Table_KaskadaSourceValidationError is the validation error returned by
// Table_KaskadaSource.Validate if the designated constraints aren't met.
type Table_KaskadaSourceValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Table_KaskadaSourceValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Table_KaskadaSourceValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Table_KaskadaSourceValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Table_KaskadaSourceValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Table_KaskadaSourceValidationError) ErrorName() string {
	return "Table_KaskadaSourceValidationError"
}

// Error satisfies the builtin error interface
func (e Table_KaskadaSourceValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTable_KaskadaSource.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Table_KaskadaSourceValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Table_KaskadaSourceValidationError{}
