// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0-devel
// 	protoc        (unknown)
// source: kaskada/kaskada/v2alpha/query_service.proto

package kaskadav2alpha

import (
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	v1alpha "github.com/kaskada/kaskada-ai/wren/gen/kaskada/kaskada/v1alpha"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type QueryState int32

const (
	QueryState_QUERY_STATE_UNSPECIFIED QueryState = 0
	QueryState_QUERY_STATE_COMPILED    QueryState = 1
	QueryState_QUERY_STATE_PREPARING   QueryState = 2
	QueryState_QUERY_STATE_PREPARED    QueryState = 3
	QueryState_QUERY_STATE_COMPUTING   QueryState = 4
	QueryState_QUERY_STATE_SUCCESS     QueryState = 5
	QueryState_QUERY_STATE_FAILURE     QueryState = 6
)

// Enum value maps for QueryState.
var (
	QueryState_name = map[int32]string{
		0: "QUERY_STATE_UNSPECIFIED",
		1: "QUERY_STATE_COMPILED",
		2: "QUERY_STATE_PREPARING",
		3: "QUERY_STATE_PREPARED",
		4: "QUERY_STATE_COMPUTING",
		5: "QUERY_STATE_SUCCESS",
		6: "QUERY_STATE_FAILURE",
	}
	QueryState_value = map[string]int32{
		"QUERY_STATE_UNSPECIFIED": 0,
		"QUERY_STATE_COMPILED":    1,
		"QUERY_STATE_PREPARING":   2,
		"QUERY_STATE_PREPARED":    3,
		"QUERY_STATE_COMPUTING":   4,
		"QUERY_STATE_SUCCESS":     5,
		"QUERY_STATE_FAILURE":     6,
	}
)

func (x QueryState) Enum() *QueryState {
	p := new(QueryState)
	*p = x
	return p
}

func (x QueryState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (QueryState) Descriptor() protoreflect.EnumDescriptor {
	return file_kaskada_kaskada_v2alpha_query_service_proto_enumTypes[0].Descriptor()
}

func (QueryState) Type() protoreflect.EnumType {
	return &file_kaskada_kaskada_v2alpha_query_service_proto_enumTypes[0]
}

func (x QueryState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use QueryState.Descriptor instead.
func (QueryState) EnumDescriptor() ([]byte, []int) {
	return file_kaskada_kaskada_v2alpha_query_service_proto_rawDescGZIP(), []int{0}
}

type LatestDataToken struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DataTokenId string `protobuf:"bytes,1,opt,name=data_token_id,json=dataTokenId,proto3" json:"data_token_id,omitempty"`
}

func (x *LatestDataToken) Reset() {
	*x = LatestDataToken{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kaskada_kaskada_v2alpha_query_service_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LatestDataToken) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LatestDataToken) ProtoMessage() {}

func (x *LatestDataToken) ProtoReflect() protoreflect.Message {
	mi := &file_kaskada_kaskada_v2alpha_query_service_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LatestDataToken.ProtoReflect.Descriptor instead.
func (*LatestDataToken) Descriptor() ([]byte, []int) {
	return file_kaskada_kaskada_v2alpha_query_service_proto_rawDescGZIP(), []int{0}
}

func (x *LatestDataToken) GetDataTokenId() string {
	if x != nil {
		return x.DataTokenId
	}
	return ""
}

type SpecificDataToken struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DataTokenId string `protobuf:"bytes,1,opt,name=data_token_id,json=dataTokenId,proto3" json:"data_token_id,omitempty"`
}

func (x *SpecificDataToken) Reset() {
	*x = SpecificDataToken{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kaskada_kaskada_v2alpha_query_service_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpecificDataToken) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpecificDataToken) ProtoMessage() {}

func (x *SpecificDataToken) ProtoReflect() protoreflect.Message {
	mi := &file_kaskada_kaskada_v2alpha_query_service_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpecificDataToken.ProtoReflect.Descriptor instead.
func (*SpecificDataToken) Descriptor() ([]byte, []int) {
	return file_kaskada_kaskada_v2alpha_query_service_proto_rawDescGZIP(), []int{1}
}

func (x *SpecificDataToken) GetDataTokenId() string {
	if x != nil {
		return x.DataTokenId
	}
	return ""
}

type DataToken struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to DataToken:
	//	*DataToken_LatestDataToken
	//	*DataToken_SpecificDataToken
	DataToken isDataToken_DataToken `protobuf_oneof:"data_token"`
}

func (x *DataToken) Reset() {
	*x = DataToken{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kaskada_kaskada_v2alpha_query_service_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataToken) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataToken) ProtoMessage() {}

func (x *DataToken) ProtoReflect() protoreflect.Message {
	mi := &file_kaskada_kaskada_v2alpha_query_service_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataToken.ProtoReflect.Descriptor instead.
func (*DataToken) Descriptor() ([]byte, []int) {
	return file_kaskada_kaskada_v2alpha_query_service_proto_rawDescGZIP(), []int{2}
}

func (m *DataToken) GetDataToken() isDataToken_DataToken {
	if m != nil {
		return m.DataToken
	}
	return nil
}

func (x *DataToken) GetLatestDataToken() *LatestDataToken {
	if x, ok := x.GetDataToken().(*DataToken_LatestDataToken); ok {
		return x.LatestDataToken
	}
	return nil
}

func (x *DataToken) GetSpecificDataToken() *SpecificDataToken {
	if x, ok := x.GetDataToken().(*DataToken_SpecificDataToken); ok {
		return x.SpecificDataToken
	}
	return nil
}

type isDataToken_DataToken interface {
	isDataToken_DataToken()
}

type DataToken_LatestDataToken struct {
	// Use the latest available data token for the query
	LatestDataToken *LatestDataToken `protobuf:"bytes,1,opt,name=latest_data_token,json=latestDataToken,proto3,oneof"`
}

type DataToken_SpecificDataToken struct {
	// UUID of data token to use for query
	SpecificDataToken *SpecificDataToken `protobuf:"bytes,2,opt,name=specific_data_token,json=specificDataToken,proto3,oneof"`
}

func (*DataToken_LatestDataToken) isDataToken_DataToken() {}

func (*DataToken_SpecificDataToken) isDataToken_DataToken() {}

type QueryView struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The View's Name.
	//
	// This value must be unique within an Kaskada account as it is used to
	// identify the view in Fenl queries.
	ViewName string `protobuf:"bytes,1,opt,name=view_name,json=viewName,proto3" json:"view_name,omitempty"`
	// The View's Fenl expression.
	Expression string `protobuf:"bytes,2,opt,name=expression,proto3" json:"expression,omitempty"`
}

func (x *QueryView) Reset() {
	*x = QueryView{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kaskada_kaskada_v2alpha_query_service_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryView) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryView) ProtoMessage() {}

func (x *QueryView) ProtoReflect() protoreflect.Message {
	mi := &file_kaskada_kaskada_v2alpha_query_service_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryView.ProtoReflect.Descriptor instead.
func (*QueryView) Descriptor() ([]byte, []int) {
	return file_kaskada_kaskada_v2alpha_query_service_proto_rawDescGZIP(), []int{3}
}

func (x *QueryView) GetViewName() string {
	if x != nil {
		return x.ViewName
	}
	return ""
}

func (x *QueryView) GetExpression() string {
	if x != nil {
		return x.Expression
	}
	return ""
}

type DestinationRedisAI struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The RedisAI database number to write to
	Db int32 `protobuf:"varint,1,opt,name=db,proto3" json:"db,omitempty"`
	// The RedisAI instance hostname
	Host string `protobuf:"bytes,2,opt,name=host,proto3" json:"host,omitempty"`
	// The RedisAI instance port
	Port int32 `protobuf:"varint,3,opt,name=port,proto3" json:"port,omitempty"`
}

func (x *DestinationRedisAI) Reset() {
	*x = DestinationRedisAI{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kaskada_kaskada_v2alpha_query_service_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DestinationRedisAI) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DestinationRedisAI) ProtoMessage() {}

func (x *DestinationRedisAI) ProtoReflect() protoreflect.Message {
	mi := &file_kaskada_kaskada_v2alpha_query_service_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DestinationRedisAI.ProtoReflect.Descriptor instead.
func (*DestinationRedisAI) Descriptor() ([]byte, []int) {
	return file_kaskada_kaskada_v2alpha_query_service_proto_rawDescGZIP(), []int{4}
}

func (x *DestinationRedisAI) GetDb() int32 {
	if x != nil {
		return x.Db
	}
	return 0
}

func (x *DestinationRedisAI) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *DestinationRedisAI) GetPort() int32 {
	if x != nil {
		return x.Port
	}
	return 0
}

// where to return results of the query
// at least 1 of these should be set
type Destination struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Returns results as files.
	//
	// The query expression's type must be a record.
	// Each record field corresponds to an output column.
	//
	// If compute completes successfully, the Query->QueryResults
	// object will contain URIs to files.
	AsFiles *v1alpha.AsFiles `protobuf:"bytes,1,opt,name=as_files,json=asFiles,proto3" json:"as_files,omitempty"`
	// Writes the results directly to a RedisAI instance.
	//
	// Uses a series of AI.TENSORSET operations
	//
	// The query expression's type must be a record.
	// The record type must include a field named 'key'.
	// The value of the 'key' field is used as the AI.TENSORSET key.
	// All other fields must be numeric.
	//
	// See https://redis.io/topics/protocol
	RedisAI *DestinationRedisAI `protobuf:"bytes,3,opt,name=redis_a_i,json=redisAI,proto3" json:"redis_a_i,omitempty"`
}

func (x *Destination) Reset() {
	*x = Destination{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kaskada_kaskada_v2alpha_query_service_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Destination) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Destination) ProtoMessage() {}

func (x *Destination) ProtoReflect() protoreflect.Message {
	mi := &file_kaskada_kaskada_v2alpha_query_service_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Destination.ProtoReflect.Descriptor instead.
func (*Destination) Descriptor() ([]byte, []int) {
	return file_kaskada_kaskada_v2alpha_query_service_proto_rawDescGZIP(), []int{5}
}

func (x *Destination) GetAsFiles() *v1alpha.AsFiles {
	if x != nil {
		return x.AsFiles
	}
	return nil
}

func (x *Destination) GetRedisAI() *DestinationRedisAI {
	if x != nil {
		return x.RedisAI
	}
	return nil
}

type AllResults struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Time bound (inclusive) after which results will be output.
	//
	// Results will include rows for changes (events and ticks) after this time (inclusive).
	ChangedSinceTime *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=changed_since_time,json=changedSinceTime,proto3" json:"changed_since_time,omitempty"`
}

func (x *AllResults) Reset() {
	*x = AllResults{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kaskada_kaskada_v2alpha_query_service_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AllResults) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AllResults) ProtoMessage() {}

func (x *AllResults) ProtoReflect() protoreflect.Message {
	mi := &file_kaskada_kaskada_v2alpha_query_service_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AllResults.ProtoReflect.Descriptor instead.
func (*AllResults) Descriptor() ([]byte, []int) {
	return file_kaskada_kaskada_v2alpha_query_service_proto_rawDescGZIP(), []int{6}
}

func (x *AllResults) GetChangedSinceTime() *timestamppb.Timestamp {
	if x != nil {
		return x.ChangedSinceTime
	}
	return nil
}

type FinalResults struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Time bound (inclusive) after which results will be output.
	//
	// Results will include a final result for any entity that would be included in the changed results.
	ChangedSinceTime *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=changed_since_time,json=changedSinceTime,proto3" json:"changed_since_time,omitempty"`
	// Time bound (inclusive) which final results will include.
	FinalResultTime *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=final_result_time,json=finalResultTime,proto3" json:"final_result_time,omitempty"`
}

func (x *FinalResults) Reset() {
	*x = FinalResults{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kaskada_kaskada_v2alpha_query_service_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinalResults) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinalResults) ProtoMessage() {}

func (x *FinalResults) ProtoReflect() protoreflect.Message {
	mi := &file_kaskada_kaskada_v2alpha_query_service_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinalResults.ProtoReflect.Descriptor instead.
func (*FinalResults) Descriptor() ([]byte, []int) {
	return file_kaskada_kaskada_v2alpha_query_service_proto_rawDescGZIP(), []int{7}
}

func (x *FinalResults) GetChangedSinceTime() *timestamppb.Timestamp {
	if x != nil {
		return x.ChangedSinceTime
	}
	return nil
}

func (x *FinalResults) GetFinalResultTime() *timestamppb.Timestamp {
	if x != nil {
		return x.FinalResultTime
	}
	return nil
}

type FinalResultsAtTime struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Time bound (inclusive) after which results will be output.
	//
	// Results will include a final result for any entity that would be included in the changed results.
	ChangedSinceTime *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=changed_since_time,json=changedSinceTime,proto3" json:"changed_since_time,omitempty"`
	// Time bound (inclusive) which final results will include.
	FinalResultTime *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=final_result_time,json=finalResultTime,proto3" json:"final_result_time,omitempty"`
}

func (x *FinalResultsAtTime) Reset() {
	*x = FinalResultsAtTime{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kaskada_kaskada_v2alpha_query_service_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinalResultsAtTime) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinalResultsAtTime) ProtoMessage() {}

func (x *FinalResultsAtTime) ProtoReflect() protoreflect.Message {
	mi := &file_kaskada_kaskada_v2alpha_query_service_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinalResultsAtTime.ProtoReflect.Descriptor instead.
func (*FinalResultsAtTime) Descriptor() ([]byte, []int) {
	return file_kaskada_kaskada_v2alpha_query_service_proto_rawDescGZIP(), []int{8}
}

func (x *FinalResultsAtTime) GetChangedSinceTime() *timestamppb.Timestamp {
	if x != nil {
		return x.ChangedSinceTime
	}
	return nil
}

func (x *FinalResultsAtTime) GetFinalResultTime() *timestamppb.Timestamp {
	if x != nil {
		return x.FinalResultTime
	}
	return nil
}

type ResultBehavior struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to ResultBehavior:
	//	*ResultBehavior_AllResults
	//	*ResultBehavior_FinalResults
	//	*ResultBehavior_FinalResultsAtTime
	ResultBehavior isResultBehavior_ResultBehavior `protobuf_oneof:"result_behavior"`
}

func (x *ResultBehavior) Reset() {
	*x = ResultBehavior{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kaskada_kaskada_v2alpha_query_service_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResultBehavior) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResultBehavior) ProtoMessage() {}

func (x *ResultBehavior) ProtoReflect() protoreflect.Message {
	mi := &file_kaskada_kaskada_v2alpha_query_service_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResultBehavior.ProtoReflect.Descriptor instead.
func (*ResultBehavior) Descriptor() ([]byte, []int) {
	return file_kaskada_kaskada_v2alpha_query_service_proto_rawDescGZIP(), []int{9}
}

func (m *ResultBehavior) GetResultBehavior() isResultBehavior_ResultBehavior {
	if m != nil {
		return m.ResultBehavior
	}
	return nil
}

func (x *ResultBehavior) GetAllResults() *AllResults {
	if x, ok := x.GetResultBehavior().(*ResultBehavior_AllResults); ok {
		return x.AllResults
	}
	return nil
}

func (x *ResultBehavior) GetFinalResults() *FinalResults {
	if x, ok := x.GetResultBehavior().(*ResultBehavior_FinalResults); ok {
		return x.FinalResults
	}
	return nil
}

func (x *ResultBehavior) GetFinalResultsAtTime() *FinalResultsAtTime {
	if x, ok := x.GetResultBehavior().(*ResultBehavior_FinalResultsAtTime); ok {
		return x.FinalResultsAtTime
	}
	return nil
}

type isResultBehavior_ResultBehavior interface {
	isResultBehavior_ResultBehavior()
}

type ResultBehavior_AllResults struct {
	// All results are returned
	AllResults *AllResults `protobuf:"bytes,1,opt,name=all_results,json=allResults,proto3,oneof"`
}

type ResultBehavior_FinalResults struct {
	// Only the most recent event for each entity will be returned
	FinalResults *FinalResults `protobuf:"bytes,2,opt,name=final_results,json=finalResults,proto3,oneof"`
}

type ResultBehavior_FinalResultsAtTime struct {
	// Only the most recent event (inclusive limit) for each entity will be returned
	FinalResultsAtTime *FinalResultsAtTime `protobuf:"bytes,3,opt,name=final_results_at_time,json=finalResultsAtTime,proto3,oneof"`
}

func (*ResultBehavior_AllResults) isResultBehavior_ResultBehavior() {}

func (*ResultBehavior_FinalResults) isResultBehavior_ResultBehavior() {}

func (*ResultBehavior_FinalResultsAtTime) isResultBehavior_ResultBehavior() {}

type QueryLimits struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Produces a preview of the data with at least this many rows.
	PreviewRows int64 `protobuf:"varint,1,opt,name=preview_rows,json=previewRows,proto3" json:"preview_rows,omitempty"`
}

func (x *QueryLimits) Reset() {
	*x = QueryLimits{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kaskada_kaskada_v2alpha_query_service_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryLimits) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryLimits) ProtoMessage() {}

func (x *QueryLimits) ProtoReflect() protoreflect.Message {
	mi := &file_kaskada_kaskada_v2alpha_query_service_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryLimits.ProtoReflect.Descriptor instead.
func (*QueryLimits) Descriptor() ([]byte, []int) {
	return file_kaskada_kaskada_v2alpha_query_service_proto_rawDescGZIP(), []int{10}
}

func (x *QueryLimits) GetPreviewRows() int64 {
	if x != nil {
		return x.PreviewRows
	}
	return 0
}

type QueryViews struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The views utilized in the query
	Views []*QueryView `protobuf:"bytes,1,rep,name=views,proto3" json:"views,omitempty"`
}

func (x *QueryViews) Reset() {
	*x = QueryViews{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kaskada_kaskada_v2alpha_query_service_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryViews) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryViews) ProtoMessage() {}

func (x *QueryViews) ProtoReflect() protoreflect.Message {
	mi := &file_kaskada_kaskada_v2alpha_query_service_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryViews.ProtoReflect.Descriptor instead.
func (*QueryViews) Descriptor() ([]byte, []int) {
	return file_kaskada_kaskada_v2alpha_query_service_proto_rawDescGZIP(), []int{11}
}

func (x *QueryViews) GetViews() []*QueryView {
	if x != nil {
		return x.Views
	}
	return nil
}

type QueryConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional. A token to run queries against. Enables repeatable queries.
	// if ommitted, the latest dataToken is used.
	DataToken *DataToken `protobuf:"bytes,1,opt,name=data_token,json=dataToken,proto3" json:"data_token,omitempty"`
	// How to slice the input data for the query
	Slice *v1alpha.SliceRequest `protobuf:"bytes,2,opt,name=slice,proto3" json:"slice,omitempty"`
	// Configures how the query results should be returned.
	Destination *Destination `protobuf:"bytes,3,opt,name=destination,proto3" json:"destination,omitempty"`
	// Determines how results are returned.
	//
	// Note that for Destination -> RedisBulkResponse or RedisAI, the only
	// valid option is `FinalResults`
	ResultBehavior *ResultBehavior `protobuf:"bytes,4,opt,name=result_behavior,json=resultBehavior,proto3" json:"result_behavior,omitempty"`
	// Configure limits on the output set.
	Limits               *QueryLimits `protobuf:"bytes,5,opt,name=limits,proto3" json:"limits,omitempty"`
	ExperimentalFeatures []string     `protobuf:"bytes,6,rep,name=experimental_features,json=experimentalFeatures,proto3" json:"experimental_features,omitempty"`
}

func (x *QueryConfig) Reset() {
	*x = QueryConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kaskada_kaskada_v2alpha_query_service_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryConfig) ProtoMessage() {}

func (x *QueryConfig) ProtoReflect() protoreflect.Message {
	mi := &file_kaskada_kaskada_v2alpha_query_service_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryConfig.ProtoReflect.Descriptor instead.
func (*QueryConfig) Descriptor() ([]byte, []int) {
	return file_kaskada_kaskada_v2alpha_query_service_proto_rawDescGZIP(), []int{12}
}

func (x *QueryConfig) GetDataToken() *DataToken {
	if x != nil {
		return x.DataToken
	}
	return nil
}

func (x *QueryConfig) GetSlice() *v1alpha.SliceRequest {
	if x != nil {
		return x.Slice
	}
	return nil
}

func (x *QueryConfig) GetDestination() *Destination {
	if x != nil {
		return x.Destination
	}
	return nil
}

func (x *QueryConfig) GetResultBehavior() *ResultBehavior {
	if x != nil {
		return x.ResultBehavior
	}
	return nil
}

func (x *QueryConfig) GetLimits() *QueryLimits {
	if x != nil {
		return x.Limits
	}
	return nil
}

func (x *QueryConfig) GetExperimentalFeatures() []string {
	if x != nil {
		return x.ExperimentalFeatures
	}
	return nil
}

type CSVResults struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// URIs identifying the CSV files containing the query
	// results.
	Paths []string `protobuf:"bytes,1,rep,name=paths,proto3" json:"paths,omitempty"`
}

func (x *CSVResults) Reset() {
	*x = CSVResults{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kaskada_kaskada_v2alpha_query_service_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CSVResults) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CSVResults) ProtoMessage() {}

func (x *CSVResults) ProtoReflect() protoreflect.Message {
	mi := &file_kaskada_kaskada_v2alpha_query_service_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CSVResults.ProtoReflect.Descriptor instead.
func (*CSVResults) Descriptor() ([]byte, []int) {
	return file_kaskada_kaskada_v2alpha_query_service_proto_rawDescGZIP(), []int{13}
}

func (x *CSVResults) GetPaths() []string {
	if x != nil {
		return x.Paths
	}
	return nil
}

type ParquetResults struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// URIs identifying the Parquet files containing the query
	// results.
	Paths []string `protobuf:"bytes,1,rep,name=paths,proto3" json:"paths,omitempty"`
}

func (x *ParquetResults) Reset() {
	*x = ParquetResults{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kaskada_kaskada_v2alpha_query_service_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ParquetResults) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ParquetResults) ProtoMessage() {}

func (x *ParquetResults) ProtoReflect() protoreflect.Message {
	mi := &file_kaskada_kaskada_v2alpha_query_service_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ParquetResults.ProtoReflect.Descriptor instead.
func (*ParquetResults) Descriptor() ([]byte, []int) {
	return file_kaskada_kaskada_v2alpha_query_service_proto_rawDescGZIP(), []int{14}
}

func (x *ParquetResults) GetPaths() []string {
	if x != nil {
		return x.Paths
	}
	return nil
}

type RedisBulkResults struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// URIs identifying the Redis Bulk files containing the query
	// results.
	Paths []string `protobuf:"bytes,1,rep,name=paths,proto3" json:"paths,omitempty"`
}

func (x *RedisBulkResults) Reset() {
	*x = RedisBulkResults{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kaskada_kaskada_v2alpha_query_service_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RedisBulkResults) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RedisBulkResults) ProtoMessage() {}

func (x *RedisBulkResults) ProtoReflect() protoreflect.Message {
	mi := &file_kaskada_kaskada_v2alpha_query_service_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RedisBulkResults.ProtoReflect.Descriptor instead.
func (*RedisBulkResults) Descriptor() ([]byte, []int) {
	return file_kaskada_kaskada_v2alpha_query_service_proto_rawDescGZIP(), []int{15}
}

func (x *RedisBulkResults) GetPaths() []string {
	if x != nil {
		return x.Paths
	}
	return nil
}

type QueryOutput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FileResults *v1alpha.FileResults `protobuf:"bytes,1,opt,name=file_results,json=fileResults,proto3" json:"file_results,omitempty"`
}

func (x *QueryOutput) Reset() {
	*x = QueryOutput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kaskada_kaskada_v2alpha_query_service_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryOutput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryOutput) ProtoMessage() {}

func (x *QueryOutput) ProtoReflect() protoreflect.Message {
	mi := &file_kaskada_kaskada_v2alpha_query_service_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryOutput.ProtoReflect.Descriptor instead.
func (*QueryOutput) Descriptor() ([]byte, []int) {
	return file_kaskada_kaskada_v2alpha_query_service_proto_rawDescGZIP(), []int{16}
}

func (x *QueryOutput) GetFileResults() *v1alpha.FileResults {
	if x != nil {
		return x.FileResults
	}
	return nil
}

type QueryResults struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Contains URIs to the query output when returning
	// file-based results from the query
	Output *QueryOutput `protobuf:"bytes,1,opt,name=output,proto3" json:"output,omitempty"`
	// Diagnostic information about the query
	FenlDiagnostics *v1alpha.FenlDiagnostics `protobuf:"bytes,2,opt,name=fenl_diagnostics,json=fenlDiagnostics,proto3" json:"fenl_diagnostics,omitempty"`
	// The schema of the query.  If this is empty, check
	// `fenl_diagnostics` for reasons.
	Schema *v1alpha.Schema `protobuf:"bytes,3,opt,name=schema,proto3" json:"schema,omitempty"`
}

func (x *QueryResults) Reset() {
	*x = QueryResults{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kaskada_kaskada_v2alpha_query_service_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryResults) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryResults) ProtoMessage() {}

func (x *QueryResults) ProtoReflect() protoreflect.Message {
	mi := &file_kaskada_kaskada_v2alpha_query_service_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryResults.ProtoReflect.Descriptor instead.
func (*QueryResults) Descriptor() ([]byte, []int) {
	return file_kaskada_kaskada_v2alpha_query_service_proto_rawDescGZIP(), []int{17}
}

func (x *QueryResults) GetOutput() *QueryOutput {
	if x != nil {
		return x.Output
	}
	return nil
}

func (x *QueryResults) GetFenlDiagnostics() *v1alpha.FenlDiagnostics {
	if x != nil {
		return x.FenlDiagnostics
	}
	return nil
}

func (x *QueryResults) GetSchema() *v1alpha.Schema {
	if x != nil {
		return x.Schema
	}
	return nil
}

type QueryMetrics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Time spent preparing input
	TimePreparing *durationpb.Duration `protobuf:"bytes,1,opt,name=time_preparing,json=timePreparing,proto3" json:"time_preparing,omitempty"`
	// Time spent computing results
	TimeComputing *durationpb.Duration `protobuf:"bytes,2,opt,name=time_computing,json=timeComputing,proto3" json:"time_computing,omitempty"`
	// The number of output files produced.
	OutputFiles int64 `protobuf:"varint,3,opt,name=output_files,json=outputFiles,proto3" json:"output_files,omitempty"`
	// Total input rows to be processed by this query.
	TotalInputRows int64 `protobuf:"varint,4,opt,name=total_input_rows,json=totalInputRows,proto3" json:"total_input_rows,omitempty"`
	// Number of input rows processed by this query.
	ProcessedInputRows int64 `protobuf:"varint,5,opt,name=processed_input_rows,json=processedInputRows,proto3" json:"processed_input_rows,omitempty"`
	// The number of output rows produced so far.
	ProducedOutputRows int64 `protobuf:"varint,6,opt,name=produced_output_rows,json=producedOutputRows,proto3" json:"produced_output_rows,omitempty"`
}

func (x *QueryMetrics) Reset() {
	*x = QueryMetrics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kaskada_kaskada_v2alpha_query_service_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryMetrics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryMetrics) ProtoMessage() {}

func (x *QueryMetrics) ProtoReflect() protoreflect.Message {
	mi := &file_kaskada_kaskada_v2alpha_query_service_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryMetrics.ProtoReflect.Descriptor instead.
func (*QueryMetrics) Descriptor() ([]byte, []int) {
	return file_kaskada_kaskada_v2alpha_query_service_proto_rawDescGZIP(), []int{18}
}

func (x *QueryMetrics) GetTimePreparing() *durationpb.Duration {
	if x != nil {
		return x.TimePreparing
	}
	return nil
}

func (x *QueryMetrics) GetTimeComputing() *durationpb.Duration {
	if x != nil {
		return x.TimeComputing
	}
	return nil
}

func (x *QueryMetrics) GetOutputFiles() int64 {
	if x != nil {
		return x.OutputFiles
	}
	return 0
}

func (x *QueryMetrics) GetTotalInputRows() int64 {
	if x != nil {
		return x.TotalInputRows
	}
	return 0
}

func (x *QueryMetrics) GetProcessedInputRows() int64 {
	if x != nil {
		return x.ProcessedInputRows
	}
	return 0
}

func (x *QueryMetrics) GetProducedOutputRows() int64 {
	if x != nil {
		return x.ProducedOutputRows
	}
	return 0
}

type Query struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The query's ID.
	//
	// This value is a unique identifier for the query within a Kaskada
	// account. The ID is generated by Kaskada, and is provided as a
	// read-only field.
	QueryId string `protobuf:"bytes,1,opt,name=query_id,json=queryId,proto3" json:"query_id,omitempty"`
	// The creation timestamp of the query in kaskada
	CreateTime *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	// The update timestamp of the query in kaskada.  This timestamp
	// updates as progress is being made on the query
	UpdateTime *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
	// A Fenl expression to compute
	Expression string `protobuf:"bytes,4,opt,name=expression,proto3" json:"expression,omitempty"`
	// The views used by the expression
	Views *QueryViews `protobuf:"bytes,5,opt,name=views,proto3" json:"views,omitempty"`
	// The configuration of the query provided at create-time
	Config *QueryConfig `protobuf:"bytes,6,opt,name=config,proto3" json:"config,omitempty"`
	// The current state of the query
	State QueryState `protobuf:"varint,7,opt,name=state,proto3,enum=kaskada.kaskada.v2alpha.QueryState" json:"state,omitempty"`
	// The results of the query
	Results *QueryResults `protobuf:"bytes,8,opt,name=results,proto3" json:"results,omitempty"`
	// Metrics about the query execution
	Metrics *QueryMetrics `protobuf:"bytes,9,opt,name=metrics,proto3" json:"metrics,omitempty"`
}

func (x *Query) Reset() {
	*x = Query{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kaskada_kaskada_v2alpha_query_service_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Query) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Query) ProtoMessage() {}

func (x *Query) ProtoReflect() protoreflect.Message {
	mi := &file_kaskada_kaskada_v2alpha_query_service_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Query.ProtoReflect.Descriptor instead.
func (*Query) Descriptor() ([]byte, []int) {
	return file_kaskada_kaskada_v2alpha_query_service_proto_rawDescGZIP(), []int{19}
}

func (x *Query) GetQueryId() string {
	if x != nil {
		return x.QueryId
	}
	return ""
}

func (x *Query) GetCreateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

func (x *Query) GetUpdateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdateTime
	}
	return nil
}

func (x *Query) GetExpression() string {
	if x != nil {
		return x.Expression
	}
	return ""
}

func (x *Query) GetViews() *QueryViews {
	if x != nil {
		return x.Views
	}
	return nil
}

func (x *Query) GetConfig() *QueryConfig {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *Query) GetState() QueryState {
	if x != nil {
		return x.State
	}
	return QueryState_QUERY_STATE_UNSPECIFIED
}

func (x *Query) GetResults() *QueryResults {
	if x != nil {
		return x.Results
	}
	return nil
}

func (x *Query) GetMetrics() *QueryMetrics {
	if x != nil {
		return x.Metrics
	}
	return nil
}

type CreateQueryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A Fenl expression to compute.
	Expression string `protobuf:"bytes,1,opt,name=expression,proto3" json:"expression,omitempty"`
	// Any views used by the expression
	Views *QueryViews `protobuf:"bytes,2,opt,name=views,proto3" json:"views,omitempty"`
	// The configuration of the query
	Config *QueryConfig `protobuf:"bytes,3,opt,name=config,proto3" json:"config,omitempty"`
	// Attempt to create a query, but don't save it to the database,
	// or initiate compute on it. See the `QueryResults` object in
	// the response for diagnostic and schema info.
	DryRun bool `protobuf:"varint,4,opt,name=dry_run,json=dryRun,proto3" json:"dry_run,omitempty"`
}

func (x *CreateQueryRequest) Reset() {
	*x = CreateQueryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kaskada_kaskada_v2alpha_query_service_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateQueryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateQueryRequest) ProtoMessage() {}

func (x *CreateQueryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kaskada_kaskada_v2alpha_query_service_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateQueryRequest.ProtoReflect.Descriptor instead.
func (*CreateQueryRequest) Descriptor() ([]byte, []int) {
	return file_kaskada_kaskada_v2alpha_query_service_proto_rawDescGZIP(), []int{20}
}

func (x *CreateQueryRequest) GetExpression() string {
	if x != nil {
		return x.Expression
	}
	return ""
}

func (x *CreateQueryRequest) GetViews() *QueryViews {
	if x != nil {
		return x.Views
	}
	return nil
}

func (x *CreateQueryRequest) GetConfig() *QueryConfig {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *CreateQueryRequest) GetDryRun() bool {
	if x != nil {
		return x.DryRun
	}
	return false
}

type CreateQueryResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The requested Query.
	Query *Query `protobuf:"bytes,1,opt,name=query,proto3" json:"query,omitempty"`
	// Information, help, or warnings related to the request
	RequestDetails *v1alpha.RequestDetails `protobuf:"bytes,2,opt,name=request_details,json=requestDetails,proto3" json:"request_details,omitempty"`
}

func (x *CreateQueryResponse) Reset() {
	*x = CreateQueryResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kaskada_kaskada_v2alpha_query_service_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateQueryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateQueryResponse) ProtoMessage() {}

func (x *CreateQueryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kaskada_kaskada_v2alpha_query_service_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateQueryResponse.ProtoReflect.Descriptor instead.
func (*CreateQueryResponse) Descriptor() ([]byte, []int) {
	return file_kaskada_kaskada_v2alpha_query_service_proto_rawDescGZIP(), []int{21}
}

func (x *CreateQueryResponse) GetQuery() *Query {
	if x != nil {
		return x.Query
	}
	return nil
}

func (x *CreateQueryResponse) GetRequestDetails() *v1alpha.RequestDetails {
	if x != nil {
		return x.RequestDetails
	}
	return nil
}

type DeleteQueryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The ID of the Query to delete.
	QueryId string `protobuf:"bytes,1,opt,name=query_id,json=queryId,proto3" json:"query_id,omitempty"`
}

func (x *DeleteQueryRequest) Reset() {
	*x = DeleteQueryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kaskada_kaskada_v2alpha_query_service_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteQueryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteQueryRequest) ProtoMessage() {}

func (x *DeleteQueryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kaskada_kaskada_v2alpha_query_service_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteQueryRequest.ProtoReflect.Descriptor instead.
func (*DeleteQueryRequest) Descriptor() ([]byte, []int) {
	return file_kaskada_kaskada_v2alpha_query_service_proto_rawDescGZIP(), []int{22}
}

func (x *DeleteQueryRequest) GetQueryId() string {
	if x != nil {
		return x.QueryId
	}
	return ""
}

type DeleteQueryResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Information, help, or warnings related to the request
	RequestDetails *v1alpha.RequestDetails `protobuf:"bytes,1,opt,name=request_details,json=requestDetails,proto3" json:"request_details,omitempty"`
}

func (x *DeleteQueryResponse) Reset() {
	*x = DeleteQueryResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kaskada_kaskada_v2alpha_query_service_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteQueryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteQueryResponse) ProtoMessage() {}

func (x *DeleteQueryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kaskada_kaskada_v2alpha_query_service_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteQueryResponse.ProtoReflect.Descriptor instead.
func (*DeleteQueryResponse) Descriptor() ([]byte, []int) {
	return file_kaskada_kaskada_v2alpha_query_service_proto_rawDescGZIP(), []int{23}
}

func (x *DeleteQueryResponse) GetRequestDetails() *v1alpha.RequestDetails {
	if x != nil {
		return x.RequestDetails
	}
	return nil
}

type GetQueryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The ID of the Query to get.
	QueryId string `protobuf:"bytes,1,opt,name=query_id,json=queryId,proto3" json:"query_id,omitempty"`
	// If this is `true`, then file-based results will be pre-signed
	// before being returned.
	//
	// The files can be read with HTTP, and will be available for a
	// fixed amount of time (TTL).
	//
	// For example: When running the engine with S3 as the backing
	// store, and working locally, set this to true to return
	// results as HTTP URLs instead of S3 URIs.  The returned URLs
	// can be used to download the results file without additional
	// authenticaiton to S3.
	PresignResults bool `protobuf:"varint,2,opt,name=presign_results,json=presignResults,proto3" json:"presign_results,omitempty"`
}

func (x *GetQueryRequest) Reset() {
	*x = GetQueryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kaskada_kaskada_v2alpha_query_service_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetQueryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetQueryRequest) ProtoMessage() {}

func (x *GetQueryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kaskada_kaskada_v2alpha_query_service_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetQueryRequest.ProtoReflect.Descriptor instead.
func (*GetQueryRequest) Descriptor() ([]byte, []int) {
	return file_kaskada_kaskada_v2alpha_query_service_proto_rawDescGZIP(), []int{24}
}

func (x *GetQueryRequest) GetQueryId() string {
	if x != nil {
		return x.QueryId
	}
	return ""
}

func (x *GetQueryRequest) GetPresignResults() bool {
	if x != nil {
		return x.PresignResults
	}
	return false
}

type GetQueryResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The requested Query.
	Query *Query `protobuf:"bytes,1,opt,name=query,proto3" json:"query,omitempty"`
	// Information, help, or warnings related to the request
	RequestDetails *v1alpha.RequestDetails `protobuf:"bytes,2,opt,name=request_details,json=requestDetails,proto3" json:"request_details,omitempty"`
}

func (x *GetQueryResponse) Reset() {
	*x = GetQueryResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kaskada_kaskada_v2alpha_query_service_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetQueryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetQueryResponse) ProtoMessage() {}

func (x *GetQueryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kaskada_kaskada_v2alpha_query_service_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetQueryResponse.ProtoReflect.Descriptor instead.
func (*GetQueryResponse) Descriptor() ([]byte, []int) {
	return file_kaskada_kaskada_v2alpha_query_service_proto_rawDescGZIP(), []int{25}
}

func (x *GetQueryResponse) GetQuery() *Query {
	if x != nil {
		return x.Query
	}
	return nil
}

func (x *GetQueryResponse) GetRequestDetails() *v1alpha.RequestDetails {
	if x != nil {
		return x.RequestDetails
	}
	return nil
}

type ListQueriesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Query search string.
	//
	// If provided, only queries cointaining the given string will
	// be returned.
	Search string `protobuf:"bytes,1,opt,name=search,proto3" json:"search,omitempty"`
	// The maximum number of items to return.
	PageSize int32 `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// The next_page_token value returned from a previous List request, if
	// any. Note: if this is set, the `search` and `page_size` parameters
	// are ignored, and the values set in the original request are used
	// instead.
	PageToken string `protobuf:"bytes,3,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
}

func (x *ListQueriesRequest) Reset() {
	*x = ListQueriesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kaskada_kaskada_v2alpha_query_service_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListQueriesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListQueriesRequest) ProtoMessage() {}

func (x *ListQueriesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kaskada_kaskada_v2alpha_query_service_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListQueriesRequest.ProtoReflect.Descriptor instead.
func (*ListQueriesRequest) Descriptor() ([]byte, []int) {
	return file_kaskada_kaskada_v2alpha_query_service_proto_rawDescGZIP(), []int{26}
}

func (x *ListQueriesRequest) GetSearch() string {
	if x != nil {
		return x.Search
	}
	return ""
}

func (x *ListQueriesRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListQueriesRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

type ListQueriesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A list of queries.
	Queries []*Query `protobuf:"bytes,1,rep,name=queries,proto3" json:"queries,omitempty"`
	// Token to retrieve the next page of results, or empty if there are no
	// more results in the list.
	NextPageToken string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	// Information, help, or warnings related to the request
	RequestDetails *v1alpha.RequestDetails `protobuf:"bytes,3,opt,name=request_details,json=requestDetails,proto3" json:"request_details,omitempty"`
}

func (x *ListQueriesResponse) Reset() {
	*x = ListQueriesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kaskada_kaskada_v2alpha_query_service_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListQueriesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListQueriesResponse) ProtoMessage() {}

func (x *ListQueriesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kaskada_kaskada_v2alpha_query_service_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListQueriesResponse.ProtoReflect.Descriptor instead.
func (*ListQueriesResponse) Descriptor() ([]byte, []int) {
	return file_kaskada_kaskada_v2alpha_query_service_proto_rawDescGZIP(), []int{27}
}

func (x *ListQueriesResponse) GetQueries() []*Query {
	if x != nil {
		return x.Queries
	}
	return nil
}

func (x *ListQueriesResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

func (x *ListQueriesResponse) GetRequestDetails() *v1alpha.RequestDetails {
	if x != nil {
		return x.RequestDetails
	}
	return nil
}

var File_kaskada_kaskada_v2alpha_query_service_proto protoreflect.FileDescriptor

var file_kaskada_kaskada_v2alpha_query_service_proto_rawDesc = []byte{
	0x0a, 0x2b, 0x6b, 0x61, 0x73, 0x6b, 0x61, 0x64, 0x61, 0x2f, 0x6b, 0x61, 0x73, 0x6b, 0x61, 0x64,
	0x61, 0x2f, 0x76, 0x32, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x17, 0x6b,
	0x61, 0x73, 0x6b, 0x61, 0x64, 0x61, 0x2e, 0x6b, 0x61, 0x73, 0x6b, 0x61, 0x64, 0x61, 0x2e, 0x76,
	0x32, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x62, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x24, 0x6b, 0x61, 0x73, 0x6b, 0x61, 0x64, 0x61, 0x2f,
	0x6b, 0x61, 0x73, 0x6b, 0x61, 0x64, 0x61, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2f,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2e, 0x6b, 0x61,
	0x73, 0x6b, 0x61, 0x64, 0x61, 0x2f, 0x6b, 0x61, 0x73, 0x6b, 0x61, 0x64, 0x61, 0x2f, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x2f, 0x66, 0x65, 0x6e, 0x6c, 0x5f, 0x64, 0x69, 0x61, 0x67, 0x6e,
	0x6f, 0x73, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x24, 0x6b, 0x61,
	0x73, 0x6b, 0x61, 0x64, 0x61, 0x2f, 0x6b, 0x61, 0x73, 0x6b, 0x61, 0x64, 0x61, 0x2f, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x17, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x3a, 0x0a, 0x0f, 0x4c,
	0x61, 0x74, 0x65, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x27,
	0x0a, 0x0d, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x0b, 0x64, 0x61, 0x74, 0x61,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x64, 0x22, 0x40, 0x0a, 0x11, 0x53, 0x70, 0x65, 0x63, 0x69,
	0x66, 0x69, 0x63, 0x44, 0x61, 0x74, 0x61, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x2b, 0x0a, 0x0d,
	0x64, 0x61, 0x74, 0x61, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0b, 0x64, 0x61,
	0x74, 0x61, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x64, 0x22, 0xd4, 0x01, 0x0a, 0x09, 0x44, 0x61,
	0x74, 0x61, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x56, 0x0a, 0x11, 0x6c, 0x61, 0x74, 0x65, 0x73,
	0x74, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x28, 0x2e, 0x6b, 0x61, 0x73, 0x6b, 0x61, 0x64, 0x61, 0x2e, 0x6b, 0x61, 0x73,
	0x6b, 0x61, 0x64, 0x61, 0x2e, 0x76, 0x32, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x4c, 0x61, 0x74,
	0x65, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x48, 0x00, 0x52, 0x0f,
	0x6c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12,
	0x5c, 0x0a, 0x13, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x5f, 0x64, 0x61, 0x74, 0x61,
	0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x6b,
	0x61, 0x73, 0x6b, 0x61, 0x64, 0x61, 0x2e, 0x6b, 0x61, 0x73, 0x6b, 0x61, 0x64, 0x61, 0x2e, 0x76,
	0x32, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x44,
	0x61, 0x74, 0x61, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x48, 0x00, 0x52, 0x11, 0x73, 0x70, 0x65, 0x63,
	0x69, 0x66, 0x69, 0x63, 0x44, 0x61, 0x74, 0x61, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x42, 0x11, 0x0a,
	0x0a, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x03, 0xf8, 0x42, 0x01,
	0x22, 0x5a, 0x0a, 0x09, 0x51, 0x75, 0x65, 0x72, 0x79, 0x56, 0x69, 0x65, 0x77, 0x12, 0x24, 0x0a,
	0x09, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x08, 0x76, 0x69, 0x65, 0x77, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x27, 0x0a, 0x0a, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01,
	0x52, 0x0a, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x6d, 0x0a, 0x12,
	0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x64, 0x69, 0x73,
	0x41, 0x49, 0x12, 0x19, 0x0a, 0x02, 0x64, 0x62, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x42, 0x09,
	0xfa, 0x42, 0x06, 0x1a, 0x04, 0x18, 0x0f, 0x28, 0x00, 0x52, 0x02, 0x64, 0x62, 0x12, 0x1b, 0x0a,
	0x04, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04,
	0x72, 0x02, 0x10, 0x01, 0x52, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x04, 0x70, 0x6f,
	0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0b, 0xfa, 0x42, 0x08, 0x1a, 0x06, 0x18,
	0xff, 0xff, 0x03, 0x20, 0x00, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x22, 0x93, 0x01, 0x0a, 0x0b,
	0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3b, 0x0a, 0x08, 0x61,
	0x73, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e,
	0x6b, 0x61, 0x73, 0x6b, 0x61, 0x64, 0x61, 0x2e, 0x6b, 0x61, 0x73, 0x6b, 0x61, 0x64, 0x61, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x41, 0x73, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x52,
	0x07, 0x61, 0x73, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x12, 0x47, 0x0a, 0x09, 0x72, 0x65, 0x64, 0x69,
	0x73, 0x5f, 0x61, 0x5f, 0x69, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x6b, 0x61,
	0x73, 0x6b, 0x61, 0x64, 0x61, 0x2e, 0x6b, 0x61, 0x73, 0x6b, 0x61, 0x64, 0x61, 0x2e, 0x76, 0x32,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x64, 0x69, 0x73, 0x41, 0x49, 0x52, 0x07, 0x72, 0x65, 0x64, 0x69, 0x73, 0x41,
	0x49, 0x22, 0x56, 0x0a, 0x0a, 0x41, 0x6c, 0x6c, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x12,
	0x48, 0x0a, 0x12, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x5f, 0x73, 0x69, 0x6e, 0x63, 0x65,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x10, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64,
	0x53, 0x69, 0x6e, 0x63, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xa0, 0x01, 0x0a, 0x0c, 0x46, 0x69,
	0x6e, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x48, 0x0a, 0x12, 0x63, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x64, 0x5f, 0x73, 0x69, 0x6e, 0x63, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x10, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x53, 0x69, 0x6e, 0x63, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x46, 0x0a, 0x11, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0f, 0x66, 0x69, 0x6e,
	0x61, 0x6c, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xa6, 0x01, 0x0a,
	0x12, 0x46, 0x69, 0x6e, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x41, 0x74, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x48, 0x0a, 0x12, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x5f, 0x73,
	0x69, 0x6e, 0x63, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x10, 0x63, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x64, 0x53, 0x69, 0x6e, 0x63, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x46, 0x0a,
	0x11, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x0f, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xa0, 0x02, 0x0a, 0x0e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x12, 0x46, 0x0a, 0x0b, 0x61, 0x6c, 0x6c, 0x5f,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e,
	0x6b, 0x61, 0x73, 0x6b, 0x61, 0x64, 0x61, 0x2e, 0x6b, 0x61, 0x73, 0x6b, 0x61, 0x64, 0x61, 0x2e,
	0x76, 0x32, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x41, 0x6c, 0x6c, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x73, 0x48, 0x00, 0x52, 0x0a, 0x61, 0x6c, 0x6c, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73,
	0x12, 0x4c, 0x0a, 0x0d, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6b, 0x61, 0x73, 0x6b, 0x61, 0x64,
	0x61, 0x2e, 0x6b, 0x61, 0x73, 0x6b, 0x61, 0x64, 0x61, 0x2e, 0x76, 0x32, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x2e, 0x46, 0x69, 0x6e, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x48, 0x00,
	0x52, 0x0c, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x60,
	0x0a, 0x15, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x5f,
	0x61, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e,
	0x6b, 0x61, 0x73, 0x6b, 0x61, 0x64, 0x61, 0x2e, 0x6b, 0x61, 0x73, 0x6b, 0x61, 0x64, 0x61, 0x2e,
	0x76, 0x32, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x46, 0x69, 0x6e, 0x61, 0x6c, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x73, 0x41, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x48, 0x00, 0x52, 0x12, 0x66, 0x69,
	0x6e, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x41, 0x74, 0x54, 0x69, 0x6d, 0x65,
	0x42, 0x16, 0x0a, 0x0f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x62, 0x65, 0x68, 0x61, 0x76,
	0x69, 0x6f, 0x72, 0x12, 0x03, 0xf8, 0x42, 0x01, 0x22, 0x30, 0x0a, 0x0b, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x72, 0x65, 0x76, 0x69,
	0x65, 0x77, 0x5f, 0x72, 0x6f, 0x77, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x70,
	0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x52, 0x6f, 0x77, 0x73, 0x22, 0x46, 0x0a, 0x0a, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x56, 0x69, 0x65, 0x77, 0x73, 0x12, 0x38, 0x0a, 0x05, 0x76, 0x69, 0x65, 0x77,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6b, 0x61, 0x73, 0x6b, 0x61, 0x64,
	0x61, 0x2e, 0x6b, 0x61, 0x73, 0x6b, 0x61, 0x64, 0x61, 0x2e, 0x76, 0x32, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x56, 0x69, 0x65, 0x77, 0x52, 0x05, 0x76, 0x69, 0x65,
	0x77, 0x73, 0x22, 0x9a, 0x03, 0x0a, 0x0b, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x12, 0x41, 0x0a, 0x0a, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6b, 0x61, 0x73, 0x6b, 0x61, 0x64, 0x61,
	0x2e, 0x6b, 0x61, 0x73, 0x6b, 0x61, 0x64, 0x61, 0x2e, 0x76, 0x32, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x2e, 0x44, 0x61, 0x74, 0x61, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x09, 0x64, 0x61, 0x74, 0x61,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x3b, 0x0a, 0x05, 0x73, 0x6c, 0x69, 0x63, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6b, 0x61, 0x73, 0x6b, 0x61, 0x64, 0x61, 0x2e, 0x6b,
	0x61, 0x73, 0x6b, 0x61, 0x64, 0x61, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x53,
	0x6c, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x05, 0x73, 0x6c, 0x69,
	0x63, 0x65, 0x12, 0x46, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6b, 0x61, 0x73, 0x6b, 0x61, 0x64,
	0x61, 0x2e, 0x6b, 0x61, 0x73, 0x6b, 0x61, 0x64, 0x61, 0x2e, 0x76, 0x32, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x2e, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x64,
	0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x50, 0x0a, 0x0f, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x5f, 0x62, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x6b, 0x61, 0x73, 0x6b, 0x61, 0x64, 0x61, 0x2e, 0x6b, 0x61,
	0x73, 0x6b, 0x61, 0x64, 0x61, 0x2e, 0x76, 0x32, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x52, 0x0e, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x12, 0x3c, 0x0a, 0x06,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6b,
	0x61, 0x73, 0x6b, 0x61, 0x64, 0x61, 0x2e, 0x6b, 0x61, 0x73, 0x6b, 0x61, 0x64, 0x61, 0x2e, 0x76,
	0x32, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4c, 0x69, 0x6d, 0x69,
	0x74, 0x73, 0x52, 0x06, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x12, 0x33, 0x0a, 0x15, 0x65, 0x78,
	0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x5f, 0x66, 0x65, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x14, 0x65, 0x78, 0x70, 0x65, 0x72,
	0x69, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x22,
	0x22, 0x0a, 0x0a, 0x43, 0x53, 0x56, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x14, 0x0a,
	0x05, 0x70, 0x61, 0x74, 0x68, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x70, 0x61,
	0x74, 0x68, 0x73, 0x22, 0x26, 0x0a, 0x0e, 0x50, 0x61, 0x72, 0x71, 0x75, 0x65, 0x74, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x61, 0x74, 0x68, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x70, 0x61, 0x74, 0x68, 0x73, 0x22, 0x28, 0x0a, 0x10, 0x52,
	0x65, 0x64, 0x69, 0x73, 0x42, 0x75, 0x6c, 0x6b, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x12,
	0x14, 0x0a, 0x05, 0x70, 0x61, 0x74, 0x68, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05,
	0x70, 0x61, 0x74, 0x68, 0x73, 0x22, 0x56, 0x0a, 0x0b, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4f, 0x75,
	0x74, 0x70, 0x75, 0x74, 0x12, 0x47, 0x0a, 0x0c, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6b, 0x61, 0x73,
	0x6b, 0x61, 0x64, 0x61, 0x2e, 0x6b, 0x61, 0x73, 0x6b, 0x61, 0x64, 0x61, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73,
	0x52, 0x0b, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x22, 0xda, 0x01,
	0x0a, 0x0c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x3c,
	0x0a, 0x06, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24,
	0x2e, 0x6b, 0x61, 0x73, 0x6b, 0x61, 0x64, 0x61, 0x2e, 0x6b, 0x61, 0x73, 0x6b, 0x61, 0x64, 0x61,
	0x2e, 0x76, 0x32, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4f, 0x75,
	0x74, 0x70, 0x75, 0x74, 0x52, 0x06, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x12, 0x53, 0x0a, 0x10,
	0x66, 0x65, 0x6e, 0x6c, 0x5f, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x6b, 0x61, 0x73, 0x6b, 0x61, 0x64, 0x61,
	0x2e, 0x6b, 0x61, 0x73, 0x6b, 0x61, 0x64, 0x61, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x2e, 0x46, 0x65, 0x6e, 0x6c, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x73,
	0x52, 0x0f, 0x66, 0x65, 0x6e, 0x6c, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63,
	0x73, 0x12, 0x37, 0x0a, 0x06, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1f, 0x2e, 0x6b, 0x61, 0x73, 0x6b, 0x61, 0x64, 0x61, 0x2e, 0x6b, 0x61, 0x73, 0x6b,
	0x61, 0x64, 0x61, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x53, 0x63, 0x68, 0x65,
	0x6d, 0x61, 0x52, 0x06, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x22, 0xc3, 0x02, 0x0a, 0x0c, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12, 0x40, 0x0a, 0x0e, 0x74,
	0x69, 0x6d, 0x65, 0x5f, 0x70, 0x72, 0x65, 0x70, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d,
	0x74, 0x69, 0x6d, 0x65, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x40, 0x0a,
	0x0e, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x0d, 0x74, 0x69, 0x6d, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x12,
	0x21, 0x0a, 0x0c, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x46, 0x69, 0x6c,
	0x65, 0x73, 0x12, 0x28, 0x0a, 0x10, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x70, 0x75,
	0x74, 0x5f, 0x72, 0x6f, 0x77, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x52, 0x6f, 0x77, 0x73, 0x12, 0x30, 0x0a, 0x14,
	0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x64, 0x5f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f,
	0x72, 0x6f, 0x77, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x70, 0x72, 0x6f, 0x63,
	0x65, 0x73, 0x73, 0x65, 0x64, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x52, 0x6f, 0x77, 0x73, 0x12, 0x30,
	0x0a, 0x14, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x64, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75,
	0x74, 0x5f, 0x72, 0x6f, 0x77, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x65, 0x64, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x52, 0x6f, 0x77, 0x73,
	0x22, 0xa3, 0x04, 0x0a, 0x05, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x1e, 0x0a, 0x08, 0x71, 0x75,
	0x65, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41,
	0x03, 0x52, 0x07, 0x71, 0x75, 0x65, 0x72, 0x79, 0x49, 0x64, 0x12, 0x40, 0x0a, 0x0b, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x03, 0xe0, 0x41, 0x03,
	0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x40, 0x0a, 0x0b,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x03, 0xe0,
	0x41, 0x03, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x27,
	0x0a, 0x0a, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0a, 0x65, 0x78, 0x70,
	0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x3e, 0x0a, 0x05, 0x76, 0x69, 0x65, 0x77, 0x73,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6b, 0x61, 0x73, 0x6b, 0x61, 0x64, 0x61,
	0x2e, 0x6b, 0x61, 0x73, 0x6b, 0x61, 0x64, 0x61, 0x2e, 0x76, 0x32, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x56, 0x69, 0x65, 0x77, 0x73, 0x42, 0x03, 0xe0, 0x41, 0x03,
	0x52, 0x05, 0x76, 0x69, 0x65, 0x77, 0x73, 0x12, 0x41, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6b, 0x61, 0x73, 0x6b, 0x61, 0x64,
	0x61, 0x2e, 0x6b, 0x61, 0x73, 0x6b, 0x61, 0x64, 0x61, 0x2e, 0x76, 0x32, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x03, 0xe0,
	0x41, 0x03, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x3e, 0x0a, 0x05, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x6b, 0x61, 0x73, 0x6b,
	0x61, 0x64, 0x61, 0x2e, 0x6b, 0x61, 0x73, 0x6b, 0x61, 0x64, 0x61, 0x2e, 0x76, 0x32, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x03,
	0xe0, 0x41, 0x03, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x44, 0x0a, 0x07, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6b, 0x61,
	0x73, 0x6b, 0x61, 0x64, 0x61, 0x2e, 0x6b, 0x61, 0x73, 0x6b, 0x61, 0x64, 0x61, 0x2e, 0x76, 0x32,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x73, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73,
	0x12, 0x44, 0x0a, 0x07, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x25, 0x2e, 0x6b, 0x61, 0x73, 0x6b, 0x61, 0x64, 0x61, 0x2e, 0x6b, 0x61, 0x73, 0x6b,
	0x61, 0x64, 0x61, 0x2e, 0x76, 0x32, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x07, 0x6d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x22, 0xcf, 0x01, 0x0a, 0x12, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x27, 0x0a,
	0x0a, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x72,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x39, 0x0a, 0x05, 0x76, 0x69, 0x65, 0x77, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6b, 0x61, 0x73, 0x6b, 0x61, 0x64, 0x61, 0x2e,
	0x6b, 0x61, 0x73, 0x6b, 0x61, 0x64, 0x61, 0x2e, 0x76, 0x32, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x56, 0x69, 0x65, 0x77, 0x73, 0x52, 0x05, 0x76, 0x69, 0x65, 0x77,
	0x73, 0x12, 0x3c, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x24, 0x2e, 0x6b, 0x61, 0x73, 0x6b, 0x61, 0x64, 0x61, 0x2e, 0x6b, 0x61, 0x73, 0x6b,
	0x61, 0x64, 0x61, 0x2e, 0x76, 0x32, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12,
	0x17, 0x0a, 0x07, 0x64, 0x72, 0x79, 0x5f, 0x72, 0x75, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x06, 0x64, 0x72, 0x79, 0x52, 0x75, 0x6e, 0x22, 0x9d, 0x01, 0x0a, 0x13, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x34, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x6b, 0x61, 0x73, 0x6b, 0x61, 0x64, 0x61, 0x2e, 0x6b, 0x61, 0x73, 0x6b, 0x61, 0x64,
	0x61, 0x2e, 0x76, 0x32, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52,
	0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x12, 0x50, 0x0a, 0x0f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x27, 0x2e, 0x6b, 0x61, 0x73, 0x6b, 0x61, 0x64, 0x61, 0x2e, 0x6b, 0x61, 0x73, 0x6b, 0x61, 0x64,
	0x61, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x0e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x22, 0x38, 0x0a, 0x12, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x22,
	0x0a, 0x08, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x07, 0x71, 0x75, 0x65, 0x72, 0x79,
	0x49, 0x64, 0x22, 0x67, 0x0a, 0x13, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x50, 0x0a, 0x0f, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x27, 0x2e, 0x6b, 0x61, 0x73, 0x6b, 0x61, 0x64, 0x61, 0x2e, 0x6b, 0x61, 0x73,
	0x6b, 0x61, 0x64, 0x61, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x0e, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x22, 0x5e, 0x0a, 0x0f, 0x47,
	0x65, 0x74, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x22,
	0x0a, 0x08, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x07, 0x71, 0x75, 0x65, 0x72, 0x79,
	0x49, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x70, 0x72, 0x65, 0x73, 0x69, 0x67, 0x6e, 0x5f, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x70, 0x72, 0x65,
	0x73, 0x69, 0x67, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x22, 0x9a, 0x01, 0x0a, 0x10,
	0x47, 0x65, 0x74, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x34, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x6b, 0x61, 0x73, 0x6b, 0x61, 0x64, 0x61, 0x2e, 0x6b, 0x61, 0x73, 0x6b, 0x61, 0x64,
	0x61, 0x2e, 0x76, 0x32, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52,
	0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x12, 0x50, 0x0a, 0x0f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x27, 0x2e, 0x6b, 0x61, 0x73, 0x6b, 0x61, 0x64, 0x61, 0x2e, 0x6b, 0x61, 0x73, 0x6b, 0x61, 0x64,
	0x61, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x0e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x22, 0x74, 0x0a, 0x12, 0x4c, 0x69, 0x73, 0x74,
	0x51, 0x75, 0x65, 0x72, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16,
	0x0a, 0x06, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x12, 0x27, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73,
	0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0a, 0xfa, 0x42, 0x07, 0x1a, 0x05,
	0x18, 0xe8, 0x07, 0x28, 0x00, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12,
	0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0xc9,
	0x01, 0x0a, 0x13, 0x4c, 0x69, 0x73, 0x74, 0x51, 0x75, 0x65, 0x72, 0x69, 0x65, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x38, 0x0a, 0x07, 0x71, 0x75, 0x65, 0x72, 0x69, 0x65,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6b, 0x61, 0x73, 0x6b, 0x61, 0x64,
	0x61, 0x2e, 0x6b, 0x61, 0x73, 0x6b, 0x61, 0x64, 0x61, 0x2e, 0x76, 0x32, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x07, 0x71, 0x75, 0x65, 0x72, 0x69, 0x65, 0x73,
	0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x50,
	0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x50, 0x0a, 0x0f, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x27, 0x2e, 0x6b, 0x61, 0x73, 0x6b, 0x61, 0x64, 0x61, 0x2e, 0x6b, 0x61, 0x73, 0x6b,
	0x61, 0x64, 0x61, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x0e, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x2a, 0xc5, 0x01, 0x0a, 0x0a, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1b, 0x0a, 0x17, 0x51, 0x55, 0x45,
	0x52, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49,
	0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x18, 0x0a, 0x14, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x01,
	0x12, 0x19, 0x0a, 0x15, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f,
	0x50, 0x52, 0x45, 0x50, 0x41, 0x52, 0x49, 0x4e, 0x47, 0x10, 0x02, 0x12, 0x18, 0x0a, 0x14, 0x51,
	0x55, 0x45, 0x52, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x50, 0x52, 0x45, 0x50, 0x41,
	0x52, 0x45, 0x44, 0x10, 0x03, 0x12, 0x19, 0x0a, 0x15, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x45, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x55, 0x54, 0x49, 0x4e, 0x47, 0x10, 0x04,
	0x12, 0x17, 0x0a, 0x13, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f,
	0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x05, 0x12, 0x17, 0x0a, 0x13, 0x51, 0x55, 0x45,
	0x52, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x55, 0x52, 0x45,
	0x10, 0x06, 0x32, 0xae, 0x04, 0x0a, 0x0c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x12, 0x83, 0x01, 0x0a, 0x0b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x12, 0x2b, 0x2e, 0x6b, 0x61, 0x73, 0x6b, 0x61, 0x64, 0x61, 0x2e, 0x6b, 0x61,
	0x73, 0x6b, 0x61, 0x64, 0x61, 0x2e, 0x76, 0x32, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x2c, 0x2e, 0x6b, 0x61, 0x73, 0x6b, 0x61, 0x64, 0x61, 0x2e, 0x6b, 0x61, 0x73, 0x6b, 0x61,
	0x64, 0x61, 0x2e, 0x76, 0x32, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x19,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x13, 0x3a, 0x01, 0x2a, 0x22, 0x0e, 0x2f, 0x76, 0x32, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x2f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x12, 0x8d, 0x01, 0x0a, 0x0b, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x2b, 0x2e, 0x6b, 0x61, 0x73, 0x6b,
	0x61, 0x64, 0x61, 0x2e, 0x6b, 0x61, 0x73, 0x6b, 0x61, 0x64, 0x61, 0x2e, 0x76, 0x32, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x6b, 0x61, 0x73, 0x6b, 0x61, 0x64, 0x61,
	0x2e, 0x6b, 0x61, 0x73, 0x6b, 0x61, 0x64, 0x61, 0x2e, 0x76, 0x32, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x23, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1d, 0x2a, 0x1b, 0x2f, 0x76,
	0x32, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2f, 0x7b, 0x71, 0x75,
	0x65, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x3d, 0x2a, 0x7d, 0x12, 0x84, 0x01, 0x0a, 0x08, 0x47, 0x65,
	0x74, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x28, 0x2e, 0x6b, 0x61, 0x73, 0x6b, 0x61, 0x64, 0x61,
	0x2e, 0x6b, 0x61, 0x73, 0x6b, 0x61, 0x64, 0x61, 0x2e, 0x76, 0x32, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x2e, 0x47, 0x65, 0x74, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x29, 0x2e, 0x6b, 0x61, 0x73, 0x6b, 0x61, 0x64, 0x61, 0x2e, 0x6b, 0x61, 0x73, 0x6b, 0x61,
	0x64, 0x61, 0x2e, 0x76, 0x32, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x47, 0x65, 0x74, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x23, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x1d, 0x12, 0x1b, 0x2f, 0x76, 0x32, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2f, 0x71, 0x75,
	0x65, 0x72, 0x79, 0x2f, 0x7b, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x3d, 0x2a, 0x7d,
	0x12, 0x80, 0x01, 0x0a, 0x0b, 0x4c, 0x69, 0x73, 0x74, 0x51, 0x75, 0x65, 0x72, 0x69, 0x65, 0x73,
	0x12, 0x2b, 0x2e, 0x6b, 0x61, 0x73, 0x6b, 0x61, 0x64, 0x61, 0x2e, 0x6b, 0x61, 0x73, 0x6b, 0x61,
	0x64, 0x61, 0x2e, 0x76, 0x32, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x51,
	0x75, 0x65, 0x72, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e,
	0x6b, 0x61, 0x73, 0x6b, 0x61, 0x64, 0x61, 0x2e, 0x6b, 0x61, 0x73, 0x6b, 0x61, 0x64, 0x61, 0x2e,
	0x76, 0x32, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x51, 0x75, 0x65, 0x72,
	0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x16, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x10, 0x12, 0x0e, 0x2f, 0x76, 0x32, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2f, 0x71, 0x75,
	0x65, 0x72, 0x79, 0x42, 0xfd, 0x01, 0x0a, 0x1b, 0x63, 0x6f, 0x6d, 0x2e, 0x6b, 0x61, 0x73, 0x6b,
	0x61, 0x64, 0x61, 0x2e, 0x6b, 0x61, 0x73, 0x6b, 0x61, 0x64, 0x61, 0x2e, 0x76, 0x32, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x42, 0x11, 0x51, 0x75, 0x65, 0x72, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x4d, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6b, 0x61, 0x73, 0x6b, 0x61, 0x64, 0x61, 0x2f, 0x6b, 0x61, 0x73,
	0x6b, 0x61, 0x64, 0x61, 0x2d, 0x61, 0x69, 0x2f, 0x77, 0x72, 0x65, 0x6e, 0x2f, 0x67, 0x65, 0x6e,
	0x2f, 0x6b, 0x61, 0x73, 0x6b, 0x61, 0x64, 0x61, 0x2f, 0x6b, 0x61, 0x73, 0x6b, 0x61, 0x64, 0x61,
	0x2f, 0x76, 0x32, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x3b, 0x6b, 0x61, 0x73, 0x6b, 0x61, 0x64, 0x61,
	0x76, 0x32, 0x61, 0x6c, 0x70, 0x68, 0x61, 0xa2, 0x02, 0x03, 0x4b, 0x4b, 0x58, 0xaa, 0x02, 0x17,
	0x4b, 0x61, 0x73, 0x6b, 0x61, 0x64, 0x61, 0x2e, 0x4b, 0x61, 0x73, 0x6b, 0x61, 0x64, 0x61, 0x2e,
	0x56, 0x32, 0x61, 0x6c, 0x70, 0x68, 0x61, 0xca, 0x02, 0x17, 0x4b, 0x61, 0x73, 0x6b, 0x61, 0x64,
	0x61, 0x5c, 0x4b, 0x61, 0x73, 0x6b, 0x61, 0x64, 0x61, 0x5c, 0x56, 0x32, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0xe2, 0x02, 0x23, 0x4b, 0x61, 0x73, 0x6b, 0x61, 0x64, 0x61, 0x5c, 0x4b, 0x61, 0x73, 0x6b,
	0x61, 0x64, 0x61, 0x5c, 0x56, 0x32, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x5c, 0x47, 0x50, 0x42, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x19, 0x4b, 0x61, 0x73, 0x6b, 0x61, 0x64,
	0x61, 0x3a, 0x3a, 0x4b, 0x61, 0x73, 0x6b, 0x61, 0x64, 0x61, 0x3a, 0x3a, 0x56, 0x32, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_kaskada_kaskada_v2alpha_query_service_proto_rawDescOnce sync.Once
	file_kaskada_kaskada_v2alpha_query_service_proto_rawDescData = file_kaskada_kaskada_v2alpha_query_service_proto_rawDesc
)

func file_kaskada_kaskada_v2alpha_query_service_proto_rawDescGZIP() []byte {
	file_kaskada_kaskada_v2alpha_query_service_proto_rawDescOnce.Do(func() {
		file_kaskada_kaskada_v2alpha_query_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_kaskada_kaskada_v2alpha_query_service_proto_rawDescData)
	})
	return file_kaskada_kaskada_v2alpha_query_service_proto_rawDescData
}

var file_kaskada_kaskada_v2alpha_query_service_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_kaskada_kaskada_v2alpha_query_service_proto_msgTypes = make([]protoimpl.MessageInfo, 28)
var file_kaskada_kaskada_v2alpha_query_service_proto_goTypes = []interface{}{
	(QueryState)(0),                 // 0: kaskada.kaskada.v2alpha.QueryState
	(*LatestDataToken)(nil),         // 1: kaskada.kaskada.v2alpha.LatestDataToken
	(*SpecificDataToken)(nil),       // 2: kaskada.kaskada.v2alpha.SpecificDataToken
	(*DataToken)(nil),               // 3: kaskada.kaskada.v2alpha.DataToken
	(*QueryView)(nil),               // 4: kaskada.kaskada.v2alpha.QueryView
	(*DestinationRedisAI)(nil),      // 5: kaskada.kaskada.v2alpha.DestinationRedisAI
	(*Destination)(nil),             // 6: kaskada.kaskada.v2alpha.Destination
	(*AllResults)(nil),              // 7: kaskada.kaskada.v2alpha.AllResults
	(*FinalResults)(nil),            // 8: kaskada.kaskada.v2alpha.FinalResults
	(*FinalResultsAtTime)(nil),      // 9: kaskada.kaskada.v2alpha.FinalResultsAtTime
	(*ResultBehavior)(nil),          // 10: kaskada.kaskada.v2alpha.ResultBehavior
	(*QueryLimits)(nil),             // 11: kaskada.kaskada.v2alpha.QueryLimits
	(*QueryViews)(nil),              // 12: kaskada.kaskada.v2alpha.QueryViews
	(*QueryConfig)(nil),             // 13: kaskada.kaskada.v2alpha.QueryConfig
	(*CSVResults)(nil),              // 14: kaskada.kaskada.v2alpha.CSVResults
	(*ParquetResults)(nil),          // 15: kaskada.kaskada.v2alpha.ParquetResults
	(*RedisBulkResults)(nil),        // 16: kaskada.kaskada.v2alpha.RedisBulkResults
	(*QueryOutput)(nil),             // 17: kaskada.kaskada.v2alpha.QueryOutput
	(*QueryResults)(nil),            // 18: kaskada.kaskada.v2alpha.QueryResults
	(*QueryMetrics)(nil),            // 19: kaskada.kaskada.v2alpha.QueryMetrics
	(*Query)(nil),                   // 20: kaskada.kaskada.v2alpha.Query
	(*CreateQueryRequest)(nil),      // 21: kaskada.kaskada.v2alpha.CreateQueryRequest
	(*CreateQueryResponse)(nil),     // 22: kaskada.kaskada.v2alpha.CreateQueryResponse
	(*DeleteQueryRequest)(nil),      // 23: kaskada.kaskada.v2alpha.DeleteQueryRequest
	(*DeleteQueryResponse)(nil),     // 24: kaskada.kaskada.v2alpha.DeleteQueryResponse
	(*GetQueryRequest)(nil),         // 25: kaskada.kaskada.v2alpha.GetQueryRequest
	(*GetQueryResponse)(nil),        // 26: kaskada.kaskada.v2alpha.GetQueryResponse
	(*ListQueriesRequest)(nil),      // 27: kaskada.kaskada.v2alpha.ListQueriesRequest
	(*ListQueriesResponse)(nil),     // 28: kaskada.kaskada.v2alpha.ListQueriesResponse
	(*v1alpha.AsFiles)(nil),         // 29: kaskada.kaskada.v1alpha.AsFiles
	(*timestamppb.Timestamp)(nil),   // 30: google.protobuf.Timestamp
	(*v1alpha.SliceRequest)(nil),    // 31: kaskada.kaskada.v1alpha.SliceRequest
	(*v1alpha.FileResults)(nil),     // 32: kaskada.kaskada.v1alpha.FileResults
	(*v1alpha.FenlDiagnostics)(nil), // 33: kaskada.kaskada.v1alpha.FenlDiagnostics
	(*v1alpha.Schema)(nil),          // 34: kaskada.kaskada.v1alpha.Schema
	(*durationpb.Duration)(nil),     // 35: google.protobuf.Duration
	(*v1alpha.RequestDetails)(nil),  // 36: kaskada.kaskada.v1alpha.RequestDetails
}
var file_kaskada_kaskada_v2alpha_query_service_proto_depIdxs = []int32{
	1,  // 0: kaskada.kaskada.v2alpha.DataToken.latest_data_token:type_name -> kaskada.kaskada.v2alpha.LatestDataToken
	2,  // 1: kaskada.kaskada.v2alpha.DataToken.specific_data_token:type_name -> kaskada.kaskada.v2alpha.SpecificDataToken
	29, // 2: kaskada.kaskada.v2alpha.Destination.as_files:type_name -> kaskada.kaskada.v1alpha.AsFiles
	5,  // 3: kaskada.kaskada.v2alpha.Destination.redis_a_i:type_name -> kaskada.kaskada.v2alpha.DestinationRedisAI
	30, // 4: kaskada.kaskada.v2alpha.AllResults.changed_since_time:type_name -> google.protobuf.Timestamp
	30, // 5: kaskada.kaskada.v2alpha.FinalResults.changed_since_time:type_name -> google.protobuf.Timestamp
	30, // 6: kaskada.kaskada.v2alpha.FinalResults.final_result_time:type_name -> google.protobuf.Timestamp
	30, // 7: kaskada.kaskada.v2alpha.FinalResultsAtTime.changed_since_time:type_name -> google.protobuf.Timestamp
	30, // 8: kaskada.kaskada.v2alpha.FinalResultsAtTime.final_result_time:type_name -> google.protobuf.Timestamp
	7,  // 9: kaskada.kaskada.v2alpha.ResultBehavior.all_results:type_name -> kaskada.kaskada.v2alpha.AllResults
	8,  // 10: kaskada.kaskada.v2alpha.ResultBehavior.final_results:type_name -> kaskada.kaskada.v2alpha.FinalResults
	9,  // 11: kaskada.kaskada.v2alpha.ResultBehavior.final_results_at_time:type_name -> kaskada.kaskada.v2alpha.FinalResultsAtTime
	4,  // 12: kaskada.kaskada.v2alpha.QueryViews.views:type_name -> kaskada.kaskada.v2alpha.QueryView
	3,  // 13: kaskada.kaskada.v2alpha.QueryConfig.data_token:type_name -> kaskada.kaskada.v2alpha.DataToken
	31, // 14: kaskada.kaskada.v2alpha.QueryConfig.slice:type_name -> kaskada.kaskada.v1alpha.SliceRequest
	6,  // 15: kaskada.kaskada.v2alpha.QueryConfig.destination:type_name -> kaskada.kaskada.v2alpha.Destination
	10, // 16: kaskada.kaskada.v2alpha.QueryConfig.result_behavior:type_name -> kaskada.kaskada.v2alpha.ResultBehavior
	11, // 17: kaskada.kaskada.v2alpha.QueryConfig.limits:type_name -> kaskada.kaskada.v2alpha.QueryLimits
	32, // 18: kaskada.kaskada.v2alpha.QueryOutput.file_results:type_name -> kaskada.kaskada.v1alpha.FileResults
	17, // 19: kaskada.kaskada.v2alpha.QueryResults.output:type_name -> kaskada.kaskada.v2alpha.QueryOutput
	33, // 20: kaskada.kaskada.v2alpha.QueryResults.fenl_diagnostics:type_name -> kaskada.kaskada.v1alpha.FenlDiagnostics
	34, // 21: kaskada.kaskada.v2alpha.QueryResults.schema:type_name -> kaskada.kaskada.v1alpha.Schema
	35, // 22: kaskada.kaskada.v2alpha.QueryMetrics.time_preparing:type_name -> google.protobuf.Duration
	35, // 23: kaskada.kaskada.v2alpha.QueryMetrics.time_computing:type_name -> google.protobuf.Duration
	30, // 24: kaskada.kaskada.v2alpha.Query.create_time:type_name -> google.protobuf.Timestamp
	30, // 25: kaskada.kaskada.v2alpha.Query.update_time:type_name -> google.protobuf.Timestamp
	12, // 26: kaskada.kaskada.v2alpha.Query.views:type_name -> kaskada.kaskada.v2alpha.QueryViews
	13, // 27: kaskada.kaskada.v2alpha.Query.config:type_name -> kaskada.kaskada.v2alpha.QueryConfig
	0,  // 28: kaskada.kaskada.v2alpha.Query.state:type_name -> kaskada.kaskada.v2alpha.QueryState
	18, // 29: kaskada.kaskada.v2alpha.Query.results:type_name -> kaskada.kaskada.v2alpha.QueryResults
	19, // 30: kaskada.kaskada.v2alpha.Query.metrics:type_name -> kaskada.kaskada.v2alpha.QueryMetrics
	12, // 31: kaskada.kaskada.v2alpha.CreateQueryRequest.views:type_name -> kaskada.kaskada.v2alpha.QueryViews
	13, // 32: kaskada.kaskada.v2alpha.CreateQueryRequest.config:type_name -> kaskada.kaskada.v2alpha.QueryConfig
	20, // 33: kaskada.kaskada.v2alpha.CreateQueryResponse.query:type_name -> kaskada.kaskada.v2alpha.Query
	36, // 34: kaskada.kaskada.v2alpha.CreateQueryResponse.request_details:type_name -> kaskada.kaskada.v1alpha.RequestDetails
	36, // 35: kaskada.kaskada.v2alpha.DeleteQueryResponse.request_details:type_name -> kaskada.kaskada.v1alpha.RequestDetails
	20, // 36: kaskada.kaskada.v2alpha.GetQueryResponse.query:type_name -> kaskada.kaskada.v2alpha.Query
	36, // 37: kaskada.kaskada.v2alpha.GetQueryResponse.request_details:type_name -> kaskada.kaskada.v1alpha.RequestDetails
	20, // 38: kaskada.kaskada.v2alpha.ListQueriesResponse.queries:type_name -> kaskada.kaskada.v2alpha.Query
	36, // 39: kaskada.kaskada.v2alpha.ListQueriesResponse.request_details:type_name -> kaskada.kaskada.v1alpha.RequestDetails
	21, // 40: kaskada.kaskada.v2alpha.QueryService.CreateQuery:input_type -> kaskada.kaskada.v2alpha.CreateQueryRequest
	23, // 41: kaskada.kaskada.v2alpha.QueryService.DeleteQuery:input_type -> kaskada.kaskada.v2alpha.DeleteQueryRequest
	25, // 42: kaskada.kaskada.v2alpha.QueryService.GetQuery:input_type -> kaskada.kaskada.v2alpha.GetQueryRequest
	27, // 43: kaskada.kaskada.v2alpha.QueryService.ListQueries:input_type -> kaskada.kaskada.v2alpha.ListQueriesRequest
	22, // 44: kaskada.kaskada.v2alpha.QueryService.CreateQuery:output_type -> kaskada.kaskada.v2alpha.CreateQueryResponse
	24, // 45: kaskada.kaskada.v2alpha.QueryService.DeleteQuery:output_type -> kaskada.kaskada.v2alpha.DeleteQueryResponse
	26, // 46: kaskada.kaskada.v2alpha.QueryService.GetQuery:output_type -> kaskada.kaskada.v2alpha.GetQueryResponse
	28, // 47: kaskada.kaskada.v2alpha.QueryService.ListQueries:output_type -> kaskada.kaskada.v2alpha.ListQueriesResponse
	44, // [44:48] is the sub-list for method output_type
	40, // [40:44] is the sub-list for method input_type
	40, // [40:40] is the sub-list for extension type_name
	40, // [40:40] is the sub-list for extension extendee
	0,  // [0:40] is the sub-list for field type_name
}

func init() { file_kaskada_kaskada_v2alpha_query_service_proto_init() }
func file_kaskada_kaskada_v2alpha_query_service_proto_init() {
	if File_kaskada_kaskada_v2alpha_query_service_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_kaskada_kaskada_v2alpha_query_service_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LatestDataToken); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kaskada_kaskada_v2alpha_query_service_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpecificDataToken); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kaskada_kaskada_v2alpha_query_service_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataToken); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kaskada_kaskada_v2alpha_query_service_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryView); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kaskada_kaskada_v2alpha_query_service_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DestinationRedisAI); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kaskada_kaskada_v2alpha_query_service_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Destination); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kaskada_kaskada_v2alpha_query_service_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AllResults); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kaskada_kaskada_v2alpha_query_service_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinalResults); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kaskada_kaskada_v2alpha_query_service_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinalResultsAtTime); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kaskada_kaskada_v2alpha_query_service_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResultBehavior); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kaskada_kaskada_v2alpha_query_service_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryLimits); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kaskada_kaskada_v2alpha_query_service_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryViews); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kaskada_kaskada_v2alpha_query_service_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kaskada_kaskada_v2alpha_query_service_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CSVResults); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kaskada_kaskada_v2alpha_query_service_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ParquetResults); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kaskada_kaskada_v2alpha_query_service_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RedisBulkResults); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kaskada_kaskada_v2alpha_query_service_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryOutput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kaskada_kaskada_v2alpha_query_service_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryResults); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kaskada_kaskada_v2alpha_query_service_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryMetrics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kaskada_kaskada_v2alpha_query_service_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Query); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kaskada_kaskada_v2alpha_query_service_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateQueryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kaskada_kaskada_v2alpha_query_service_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateQueryResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kaskada_kaskada_v2alpha_query_service_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteQueryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kaskada_kaskada_v2alpha_query_service_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteQueryResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kaskada_kaskada_v2alpha_query_service_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetQueryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kaskada_kaskada_v2alpha_query_service_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetQueryResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kaskada_kaskada_v2alpha_query_service_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListQueriesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kaskada_kaskada_v2alpha_query_service_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListQueriesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_kaskada_kaskada_v2alpha_query_service_proto_msgTypes[2].OneofWrappers = []interface{}{
		(*DataToken_LatestDataToken)(nil),
		(*DataToken_SpecificDataToken)(nil),
	}
	file_kaskada_kaskada_v2alpha_query_service_proto_msgTypes[9].OneofWrappers = []interface{}{
		(*ResultBehavior_AllResults)(nil),
		(*ResultBehavior_FinalResults)(nil),
		(*ResultBehavior_FinalResultsAtTime)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_kaskada_kaskada_v2alpha_query_service_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   28,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_kaskada_kaskada_v2alpha_query_service_proto_goTypes,
		DependencyIndexes: file_kaskada_kaskada_v2alpha_query_service_proto_depIdxs,
		EnumInfos:         file_kaskada_kaskada_v2alpha_query_service_proto_enumTypes,
		MessageInfos:      file_kaskada_kaskada_v2alpha_query_service_proto_msgTypes,
	}.Build()
	File_kaskada_kaskada_v2alpha_query_service_proto = out.File
	file_kaskada_kaskada_v2alpha_query_service_proto_rawDesc = nil
	file_kaskada_kaskada_v2alpha_query_service_proto_goTypes = nil
	file_kaskada_kaskada_v2alpha_query_service_proto_depIdxs = nil
}
