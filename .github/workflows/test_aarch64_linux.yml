on:
  # pull_request:
  #   branches: [ main ]
  # push:
  #   branches: [ main ]
  # merge_group:
  #   branches: [ main ]
  workflow_call:
  workflow_dispatch:


permissions:
  # For deploying release artifacts.
  contents: write
  pull-requests: read
  # For pushing Docker images to ghcr.io.
  packages: write
  # For creating the release announcement.
  discussions: write

env:
  IMAGE: ghcr.io/${{ github.repository_owner}}/engine

name: Engine Release
jobs:
  release_engine_build:
    name: Engine Release Build
    strategy:
      matrix:
        include:
          # - target: x86_64-apple-darwin
          #   goos: darwin
          #   goarch: amd64
          #   host: macos-latest
          # - target: aarch64-apple-darwin
          #   goos: darwin
          #   goarch: arm64
          #   host: macos-latest
          - target: x86_64-unknown-linux-gnu
            goos: linux
            goarch: amd64
            host: ubuntu-latest
          - target: aarch64-unknown-linux-gnu
            goos: linux
            goarch: arm64
            host: ubuntu-20.04
    runs-on: ${{ matrix.host }}
    steps:
      - name: Checkout code
        uses: actions/checkout@master

      - name: Wren - Install Buf
        uses: bufbuild/buf-setup-action@v1.12.0
        with:
          version: "1.10.0"
          buf_user: ${{ secrets.BUF_USER }}
          buf_api_token: ${{ secrets.BUF_API_TOKEN }}
          github_token: ${{ secrets.GITHUB_TOKEN }}

      - name: Wren - Install GoLang
        uses: actions/setup-go@v3
        with:
          go-version: "1.19"
          cache: true
          cache-dependency-path: wren/go.sum

      - name: Wren - Generate Protobufs
        run: buf generate
        working-directory: proto

      - name: Wren - Generate Ent
        run: go generate ./ent
        working-directory: wren

      - name: Wren - Copy NOTICE
        run: cp NOTICE ./wren/

      - name: Apt Packages (Linux)
        if: matrix.goos == 'linux'
        uses: awalsh128/cache-apt-pkgs-action@latest
        with:
          packages: lld
          version: 1.0

      - name: Wren - Build
        run: |
          mkdir ../release/
          go build -ldflags="-w -s" -o ../release/wren${{ matrix.exe }} main.go
        env:
          GOARCH: ${{ matrix.goarch }}
          GOOS: ${{ matrix.goos }}
          CGO_ENABLED: 1
          CXX: ${{ matrix.cxx }}
          CC: ${{ matrix.cc }}
        working-directory: wren

      - name: Sparrow - Install toolchain
        id: toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
          target: ${{ matrix.target }}

      - name: Install Protoc
        uses: arduino/setup-protoc@v1
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Sparrow - cargo build (Release)
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --release --all-features --target ${{ matrix.target }} -p sparrow-main

      - name: Organize engine artifacts
        run: |
          mv target/${{ matrix.target }}/release/sparrow-main${{ matrix.exe }} release

      - name: Upload engine artifacts
        uses: actions/upload-artifact@v3
        with:
          name: engine-${{ matrix.goos }}-${{ matrix.goarch }}
          retention-days: 5
          path: |
            release/sparrow-main${{ matrix.exe }}
            release/wren${{ matrix.exe }}

      - name: Add artifacts to release
        if: startsWith(github.ref, 'refs/tags/engine@v')
        run: |
          cp release/sparrow-main${{ matrix.exe }} ${ENGINE_ASSET_NAME}
          gh release upload ${TAG} ${ENGINE_ASSET_NAME} --clobber
          cp release/wren${{ matrix.exe }} ${WREN_ASSET_NAME}
          gh release upload ${TAG} ${WREN_ASSET_NAME} --clobber
        shell: bash
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAG: ${{ github.ref_name }}
          # Name of the assets to produce. We don't include the version
          # so can have a stable link to the latest asset.
          ENGINE_ASSET_NAME: kaskada-engine-${{ matrix.goos }}-${{ matrix.goarch }}${{ matrix.exe }}
          WREN_ASSET_NAME: kaskada-manager-${{ matrix.goos }}-${{ matrix.goarch }}${{ matrix.exe }}

      - name: Current Date
        id: current_date
        run: |
          echo "created=$(date -u +"%Y-%m-%d %H:%M:%S%z")" | tee -a "$GITHUB_OUTPUT"
        shell: bash

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        if: ${{ startsWith(github.ref, 'refs/tags/engine@v') && matrix.target == 'x86_64-unknown-linux-gnu' }}

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        if: ${{ startsWith(github.ref, 'refs/tags/engine@v') && matrix.target == 'x86_64-unknown-linux-gnu' }}
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Docker images
        uses: docker/build-push-action@v4
        if: ${{ startsWith(github.ref, 'refs/tags/engine@v') && matrix.target == 'x86_64-unknown-linux-gnu' }}
        with:
          context: .
          file: Dockerfile.release
          push: true
          tags: ${{ env.IMAGE }}:${{ needs.release_engine_draft.outputs.version }},${{ env.IMAGE }}:latest
          labels: |
            org.opencontainers.image.title=kaskada engine
            org.opencontainers.image.description=The kaskada engine
            org.opencontainers.image.url=${{ github.repositoryUrl }}
            org.opencontainers.image.source=${{ github.repositoryUrl }}
            org.opencontainers.image.version=${{ needs.release_engine_draft.outputs.version }}
            org.opencontainers.image.created=${{ steps.current_date.outputs.created }}
            org.opencontainers.image.revision=${{ github.sha }}
            org.opencontainers.image.licenses=Apache-2.0

  release_engine_release:
    name: Create and upload engine release
    runs-on: ubuntu-20.04
    if: startsWith(github.ref, 'refs/tags/engine@v')
    needs: ["release_engine_draft", "release_engine_build"]
    steps:
      - name: Checkout code
        uses: actions/checkout@master

      - name: Install Buf
        uses: bufbuild/buf-setup-action@v1.12.0
        with:
          version: "1.10.0"
          buf_user: ${{ secrets.BUF_USER }}
          buf_api_token: ${{ secrets.BUF_API_TOKEN }}
          github_token: ${{ secrets.GITHUB_TOKEN }}

      - name: Push Protobufs
        run: buf push --tag ${{ github.ref_name }} --tag ${{ github.sha }}
        working-directory: proto

      - name: Publish release
        run: gh release edit ${{ github.ref_name }} --draft=false --discussion-category="Announcements" --latest
        env:
          GH_TOKEN: ${{ github.token }}
