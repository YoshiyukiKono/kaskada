name: Engine (wren + sparrow) CI

on:
  pull_request:
    branches: [ main ]
  push:
    branches: [ main ]
  merge_group:
    branches: [ main ]
  workflow_call:
  workflow_dispatch:

# In cases of concurrent workflows running (consecutive pushes to PR)
# leave the latest workflow and cancel the other (older) workflows
# See https://docs.github.com/en/actions/using-jobs/using-concurrency
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  actions: write
  # Used by clippy action to report lint errors.
  checks: write
  contents: read
  # For pushing Docker images to ghcr.io.
  packages: write

env:
  IMAGE: ghcr.io/${{ github.repository_owner }}/engine-integration-tests

jobs:
  build_wren:
    name: Build wren (golang)
    uses: ./.github/workflows/reusable_ci_wren.yml

  build_sparrow:
    name: Build sparrow (rust)
    uses: ./.github/workflows/reusable_ci_rust.yml

  build_integration_test_binary:
    name: Build binary of integration tests
    uses: ./.github/workflows/ci_integration_tests.yml

  build_integ_test_docker_image:
    name: Build docker image with binary artifacts for integration tests
    runs-on: ubuntu-latest
    needs: [build_wren, build_sparrow, build_integration_test_binary]
    outputs:
      image-name: ${{ env.IMAGE }}:v_${{ env.GITHUB_REF_NAME }}_${{ steps.vars.outputs.sha_short }}v
    steps:
      - name: Checkout sources
        uses: actions/checkout@v3

      - name: Get wren binary
        uses: actions/download-artifact@v3
        with:
          name: wren-binary
          path: ci-bin/wren/

      - name: Get Sparrow binary
        uses: actions/download-artifact@v3
        with:
          name: engine-debug
          path: ci-bin/engine/

      - name: Get Integration Tests binary
        uses: actions/download-artifact@v3
        with:
          name: integration-tests-binary
          path: ci-bin/integ-tests/

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Current Date
        id: current_date
        run: |
          echo "created=$(date -u +"%Y-%m-%d %H:%M:%S%z")" | tee -a "$GITHUB_OUTPUT"
        shell: bash

      - name: Set outputs
        id: vars
        run: |
          echo "sha_short=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT
          echo "sha_full=$(git rev-parse HEAD)" >> $GITHUB_OUTPUT

      - name: Check outputs
        run: |
          echo ${{ steps.vars.outputs.sha_short }}
          echo ${{ steps.vars.outputs.sha_full }}

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Docker images
        uses: docker/build-push-action@v4
        with:
          context: .
          file: Dockerfile.integration
          push: true
          tags: ${{ env.IMAGE }}:v_${{ env.GITHUB_REF_NAME }}_${{ steps.vars.outputs.sha_short }}v,${{ env.IMAGE }}:v_${{ env.GITHUB_REF_NAME }}_${{ steps.vars.outputs.sha_full }}v
          labels: |
            org.opencontainers.image.title=kaskada integration test image
            org.opencontainers.image.description=The kaskada image for integration testing
            org.opencontainers.image.url=${{ github.repositoryUrl }}
            org.opencontainers.image.source=${{ github.repositoryUrl }}
            org.opencontainers.image.version=${{  steps.vars.outputs.sha_short }}
            org.opencontainers.image.created=${{ steps.current_date.outputs.created }}
            org.opencontainers.image.revision=${{ github.sha }}
            org.opencontainers.image.licenses=Apache-2.0

      - name: Output Docker Container Name
        id: docker-container-name
        run: |
          echo "${{ env.IMAGE }}:v_${{ env.GITHUB_REF_NAME }}_${{ steps.vars.outputs.sha_full }}v"
          echo "${{ env.IMAGE }}:v_${{ env.GITHUB_REF_NAME }}_${{ steps.vars.outputs.sha_short }}v"

  run_integ_tests:
    name: Run integration tests inside docker image
    runs-on: ubuntu-latest
    needs: [build_integ_test_docker_image]
    container:
      image: ${{ needs.build_integ_test_docker_image.outputs.image-name }}
      env:
        # for sparrow
        SPARROW_GRPC_ADDR: 0.0.0.0:50052
        SPARROW_LOG_FILTER: "egg::=warn,sparrow_=info,info"
        # for wren
        DB_DIALECT: "sqlite"
        DB_PATH: "/data/kaskada.db"
        DB_IN_MEMORY: "false"
        DEBUG: "true"
        ENV: docker-compose
        FILE_SERVICE_HOST: localhost
        FILE_SERVICE_PORT: "50052"
        OBJECT_STORE_TYPE: "local"
        OBJECT_STORE_PATH: "/data"
        PREPARE_SERVICE_HOST: localhost
        PREPARE_SERVICE_PORT: "50052"
        QUERY_SERVICE_HOST: localhost
        QUERY_SERVICE_PORT: "50052"
        # for both
        TMPDIR: "/data/tmp"
        LOCAL: true
    steps:
      - name: Run integ tests
        shell: bash
        run: |
          /run-integ.sh 
          sleep 10
          cd /integ-test-run/
          ./api.test
