name: Engine (wren + sparrow) CI

on:
  pull_request:
    branches: [main]
  push:
    branches: [main]
  merge_group:
    branches: [main]
  workflow_call:
  workflow_dispatch:

# In cases of concurrent workflows running (consecutive pushes to PR)
# leave the latest workflow and cancel the other (older) workflows
# See https://docs.github.com/en/actions/using-jobs/using-concurrency
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  actions: write
  # Used by clippy action to report lint errors.
  checks: write
  contents: read
  # For pushing Docker images to ghcr.io.
  packages: write

env:
  IMAGE: ghcr.io/${{ github.repository }}/engine-integration-tests

jobs:
  # build_wren:
  #   name: Build wren (golang)
  #   uses: ./.github/workflows/reusable_ci_wren.yml

  # build_sparrow:
  #   name: Build sparrow (rust)
  #   uses: ./.github/workflows/reusable_ci_rust.yml

  # build_integration_test_binary:
  #   name: Build binary of integration tests
  #   uses: ./.github/workflows/reusable_ci_integration_tests.yml


  download_from_gdrive:
    name: Download files from Google Drive
    runs-on: ubuntu-latest
    steps: 

      - name: Checkout sources
        uses: actions/checkout@v3

      - name: Install Buf
        uses: bufbuild/buf-setup-action@v1.12.0
        with:
          version: "1.10.0"
          buf_user: ${{ secrets.BUF_USER }}
          buf_api_token: ${{ secrets.BUF_API_TOKEN }}
          github_token: ${{ secrets.GITHUB_TOKEN }}

      - name: Generate Protos
        run: buf generate
        working-directory: proto

      - name: Install GoLang
        uses: actions/setup-go@v3
        with:
          go-version: "1.19"
          cache: true
          cache-dependency-path: wren/go.sum

      - name: Generate ent
        run: go generate ./ent
        working-directory: wren

      - name: Copy NOTICE
        run: cp NOTICE ./wren/
      
      - name: Donwload binaries 
        run: |
          mkdir -p ./ci-bin/engine/
          mkdir -p ./ci-bin/wren/
          mkdir -p ./ci-bin/integ-tests/

          wget --load-cookies /tmp/cookies.txt "https://docs.google.com/uc?export=download&confirm=$(wget --quiet --save-cookies /tmp/cookies.txt --keep-session-cookies --no-check-certificate 'https://docs.google.com/uc?export=download&id=1xliTl4_sen8JVSJRm8s4KP6bR50pYkBK' -O- | sed -rn 's/.*confirm=([0-9A-Za-z_]+).*/\1\n/p')&id=1xliTl4_sen8JVSJRm8s4KP6bR50pYkBK" -O ./ci-bin/engine/sparrow-main && rm -rf /tmp/cookies.txt

          wget --load-cookies /tmp/cookies.txt "https://docs.google.com/uc?export=download&confirm=$(wget --quiet --save-cookies /tmp/cookies.txt --keep-session-cookies --no-check-certificate 'https://docs.google.com/uc?export=download&id=1TRoJnHF9FcxZrH7h8I-1oPUty4R9gpSX' -O- | sed -rn 's/.*confirm=([0-9A-Za-z_]+).*/\1\n/p')&id=1TRoJnHF9FcxZrH7h8I-1oPUty4R9gpSX" -O ./ci-bin/wren/wren-binary && rm -rf /tmp/cookies.txt

          wget --load-cookies /tmp/cookies.txt "https://docs.google.com/uc?export=download&confirm=$(wget --quiet --save-cookies /tmp/cookies.txt --keep-session-cookies --no-check-certificate 'https://docs.google.com/uc?export=download&id=1yMHLeN7p0IxtkXBPWXzEV937FOnHy4Gz' -O- | sed -rn 's/.*confirm=([0-9A-Za-z_]+).*/\1\n/p')&id=1yMHLeN7p0IxtkXBPWXzEV937FOnHy4Gz" -O ./ci-bin/integ-tests/api.test && rm -rf /tmp/cookies.txt

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Doocker compose up for integration tests 
        run: |
          DOCKER_BUILDKIT=1 docker compose -f ./tests/integration/docker-compose-ci-integration.yml up --build --detach
          
      - name: Check docker containers healthcheck
        run: |    
          timeout 120s sh -c 'until docker ps | grep pulsar | grep -q healthy; do echo "Waiting for container to be healthy..."; sleep 2; done'

      - name: Run integration tests
        run: | 
          cd ./tests/integration/api
          LOCAL=true go run github.com/onsi/ginkgo/v2/ginkgo -v ./...

      - name: Docker compose down for integration tests 
        run: docker compose -f ./tests/integration/docker-compose-ci-integration.yml down

  # build_integ_test_docker_image:
  #   name: Build docker image with binary artifacts for integration tests
  #   runs-on: ubuntu-20.04
  #   needs: [build_wren, build_sparrow, build_integration_test_binary]
  #   outputs:
  #     image-name: ${{ env.IMAGE }}:v_${{ env.GITHUB_REF_NAME }}_${{ steps.vars.outputs.sha_short }}v
  #     should_skip: ${{ needs.build_wren.outputs.should_skip != true || needs.build_sparrow.outputs.should_skip != true || needs.build_integration_test_binary.outputs.should_skip != true }}
  #   if: ${{ needs.build_wren.outputs.should_skip != true || needs.build_sparrow.outputs.should_skip != true || needs.build_integration_test_binary.outputs.should_skip != true }}
  #   steps:
  #     - name: Checkout sources
  #       uses: actions/checkout@v3

  #     - name: Get wren binary
  #       uses: actions/download-artifact@v3
  #       with:
  #         name: wren-binary
  #         path: ci-bin/wren/

  #     - name: Get Sparrow binary
  #       uses: actions/download-artifact@v3
  #       with:
  #         name: engine-debug
  #         path: ci-bin/engine/

  #     - name: Get Integration Tests binary
  #       uses: actions/download-artifact@v3
  #       with:
  #         name: integration-tests-binary
  #         path: ci-bin/integ-tests/

  #     - name: Set up Docker Buildx
  #       uses: docker/setup-buildx-action@v2

  #     - name: Current Date
  #       id: current_date
  #       run: |
  #         echo "created=$(date -u +"%Y-%m-%d %H:%M:%S%z")" | tee -a "$GITHUB_OUTPUT"
  #       shell: bash

  #     - name: Set outputs
  #       id: vars
  #       run: |
  #         echo "sha_short=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT
  #         echo "sha_full=$(git rev-parse HEAD)" >> $GITHUB_OUTPUT

  #     - name: Check outputs
  #       run: |
  #         echo ${{ steps.vars.outputs.sha_short }}
  #         echo ${{ steps.vars.outputs.sha_full }}

  #     - name: Login to GitHub Container Registry
  #       uses: docker/login-action@v2
  #       with:
  #         registry: ghcr.io
  #         username: ${{ github.actor }}
  #         password: ${{ secrets.GITHUB_TOKEN }}

  #     - name: Build and push Docker images
  #       uses: docker/build-push-action@v4
  #       with:
  #         context: .
  #         file: Dockerfile.integration
  #         push: true
  #         tags: ${{ env.IMAGE }}:v_${{ env.GITHUB_REF_NAME }}_${{ steps.vars.outputs.sha_short }}v,${{ env.IMAGE }}:v_${{ env.GITHUB_REF_NAME }}_${{ steps.vars.outputs.sha_full }}v
  #         labels: |
  #           org.opencontainers.image.title=kaskada integration test image
  #           org.opencontainers.image.description=The kaskada image for integration testing
  #           org.opencontainers.image.url=${{ github.repositoryUrl }}
  #           org.opencontainers.image.source=${{ github.repositoryUrl }}
  #           org.opencontainers.image.version=${{  steps.vars.outputs.sha_short }}
  #           org.opencontainers.image.created=${{ steps.current_date.outputs.created }}
  #           org.opencontainers.image.revision=${{ github.sha }}
  #           org.opencontainers.image.licenses=Apache-2.0

  #     - name: Output Docker Container Name
  #       id: docker-container-name
  #       run: |
  #         echo "${{ env.IMAGE }}:v_${{ env.GITHUB_REF_NAME }}_${{ steps.vars.outputs.sha_full }}v"
  #         echo "${{ env.IMAGE }}:v_${{ env.GITHUB_REF_NAME }}_${{ steps.vars.outputs.sha_short }}v"

  # run_integ_tests:
  #   name: Run integration tests inside docker image
  #   runs-on: ubuntu-latest
  #   needs: [build_integ_test_docker_image]
  #   if: ${{ needs.build_integ_test_docker_image.outputs.should_skip != true }}
  #   container:
  #     image: ${{ needs.build_integ_test_docker_image.outputs.image-name }}
  #     env:
  #       # for sparrow
  #       SPARROW_GRPC_ADDR: 0.0.0.0:50052
  #       SPARROW_LOG_FILTER: "egg::=warn,sparrow_=info,info"
  #       # for wren
  #       DB_DIALECT: "sqlite"
  #       DB_PATH: "/data/kaskada.db"
  #       DB_IN_MEMORY: "false"
  #       DEBUG: "true"
  #       ENV: docker-compose
  #       FILE_SERVICE_HOST: localhost
  #       FILE_SERVICE_PORT: "50052"
  #       OBJECT_STORE_TYPE: "local"
  #       OBJECT_STORE_PATH: "/data"
  #       PREPARE_SERVICE_HOST: localhost
  #       PREPARE_SERVICE_PORT: "50052"
  #       QUERY_SERVICE_HOST: localhost
  #       QUERY_SERVICE_PORT: "50052"
  #       # for both
  #       TMPDIR: "/data/tmp"
  #       LOCAL: true
  #   steps:
  #     - name: Run integ tests
  #       shell: bash
  #       run: |
  #         /run-integ.sh 
  #         sleep 10
  #         cd /integ-test-run/
  #         ./api.test
