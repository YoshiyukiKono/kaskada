syntax = "proto3";

package kaskada.kaskada.v1alpha;

import "google/api/annotations.proto";
import "google/api/field_behavior.proto";
import "kaskada/kaskada/v1alpha/common.proto";
import "kaskada/kaskada/v1alpha/schema.proto";
import "validate/validate.proto";

message View {
  // The view's ID.
  //
  // This value is a unique identifier for the view within a Kaskada
  // account. The ID is generated by Kaskada, and is provided as a
  // read-only field.
  string view_id = 1 [(google.api.field_behavior) = OUTPUT_ONLY];

  // The View's Name.
  //
  // This value must be unique within an Kaskada account as it is used to
  // identify the view in Fenl queries.
  string view_name = 2 [(validate.rules).string.min_len = 1];

  // The View's Fenl expression.
  string expression = 3 [(validate.rules).string.min_len = 1];

  // The result type of the view.
  DataType result_type = 7 [(google.api.field_behavior) = OUTPUT_ONLY];

  // The result of the analyze step during view creation
  Analysis analysis = 8 [(google.api.field_behavior) = OUTPUT_ONLY];
}

message ListViewsRequest {
  // View search string.
  //
  // If provided, only Views with a field containing the given string will
  // be returned.
  string search = 1;

  // The maximum number of items to return.
  int32 page_size = 2 [(validate.rules).int32 = {
    gte: 0,
    lte: 1000
  }];

  // The next_page_token value returned from a previous List request, if
  // any. Note: if this is set, the `search` and `page_size` parameters
  // are ignored, and the values set in the original request are used
  // instead.
  string page_token = 3;
}

message ListViewsResponse {
  // A list of Views.
  repeated View views = 1;

  // Information, help, or warnings related to the request
  RequestDetails request_details = 2;

  // Token to retrieve the next page of results, or empty if there are no
  // more results in the list.
  string next_page_token = 3;
}

message GetViewRequest {
  // The name of the View to get.
  string view_name = 1 [(validate.rules).string.min_len = 1];
}

message GetViewResponse {
  // The requested View.
  View view = 1;

  // Information, help, or warnings related to the request
  RequestDetails request_details = 2;
}

message CreateViewRequest {
  // The View resource to create.
  View view = 1 [(validate.rules).message.required = true];

  // If this is `true`, then the view is validated and if there are no
  // errors, the resultant analysis is returned. No actual view is created.
  bool dry_run = 2;
}

message CreateViewResponse {
  // The View resource that was created.
  // If this is empty, check `analysis` for reasons.
  View view = 1;

  // Information, help, or warnings related to the request
  RequestDetails request_details = 2;

  // The result of the analyze step during view creation
  Analysis analysis = 3;
}

message DeleteViewRequest {
  // The name of the View to delete.
  string view_name = 1 [(validate.rules).string.min_len = 1];
  // Force delete the view (defaults to false)
  bool force = 2;
}

message DeleteViewResponse {
  // Information, help, or warnings related to the request
  RequestDetails request_details = 1;
}

// A service for managing Views.
service ViewService {
  // Lists views.
  //
  // The response includes all Views defined for the Kaskada account.
  // If a search string is provided, only Views matching the search string
  // are returned.
  rpc ListViews(ListViewsRequest) returns (ListViewsResponse) {
    // List method maps to HTTP GET.
    option (google.api.http) = {get: "/v1alpha/views"};
  }

  // Gets a view.
  rpc GetView(GetViewRequest) returns (GetViewResponse) {
    // Get maps to HTTP GET.
    option (google.api.http) = {get: "/v1alpha/views/{view_name=*}"};
  }

  // Creates a view.
  rpc CreateView(CreateViewRequest) returns (CreateViewResponse) {
    // Create maps to HTTP POST. URL path as the collection name.
    // HTTP request body contains the resource.
    option (google.api.http) = {
      post: "/v1alpha/views"
      body: "view"
    };
  }

  // Deletes a view.
  rpc DeleteView(DeleteViewRequest) returns (DeleteViewResponse) {
    option (google.api.http) = {delete: "/v1alpha/views/{view_name=*}"};
  }
}
